
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000564e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  0000564e  000056c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003a50  00000000  00000000  0000583c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f50  00000000  00000000  0000928c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000250  00000000  00000000  0000a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b10  00000000  00000000  0000a62c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001782  00000000  00000000  0000d13c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b1  00000000  00000000  0000e8be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000fd70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  0000ff90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  000102a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010d39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3f 23 	call	0x467e	; 0x467e <main>
      7a:	0c 94 25 2b 	jmp	0x564a	; 0x564a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 4d 04 	call	0x89a	; 0x89a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af ea       	ldi	r26, 0xAF	; 175
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0a 2b 	jmp	0x5614	; 0x5614 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f ea       	ldi	r24, 0xAF	; 175
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0a 2b 	jmp	0x5614	; 0x5614 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f ea       	ldi	r22, 0xAF	; 175
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

000007da <__nesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__nesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__nesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__nesf2+0x58>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

0000083a <__gtsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

0000089a <__gesf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__gesf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__gesf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__gesf2+0x58>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

000008fa <__ltsf2>:
     8fa:	a8 e1       	ldi	r26, 0x18	; 24
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	2d 83       	std	Y+5, r18	; 0x05
     910:	3e 83       	std	Y+6, r19	; 0x06
     912:	4f 83       	std	Y+7, r20	; 0x07
     914:	58 87       	std	Y+8, r21	; 0x08
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	e8 2e       	mov	r14, r24
     91a:	f1 2c       	mov	r15, r1
     91c:	ec 0e       	add	r14, r28
     91e:	fd 1e       	adc	r15, r29
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	b7 01       	movw	r22, r14
     926:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     92a:	8e 01       	movw	r16, r28
     92c:	0f 5e       	subi	r16, 0xEF	; 239
     92e:	1f 4f       	sbci	r17, 0xFF	; 255
     930:	ce 01       	movw	r24, r28
     932:	05 96       	adiw	r24, 0x05	; 5
     934:	b8 01       	movw	r22, r16
     936:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     93a:	89 85       	ldd	r24, Y+9	; 0x09
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	40 f0       	brcs	.+16     	; 0x950 <__ltsf2+0x56>
     940:	89 89       	ldd	r24, Y+17	; 0x11
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	28 f0       	brcs	.+10     	; 0x950 <__ltsf2+0x56>
     946:	c7 01       	movw	r24, r14
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__ltsf2+0x58>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	68 96       	adiw	r28, 0x18	; 24
     954:	e6 e0       	ldi	r30, 0x06	; 6
     956:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

0000095a <__floatsisf>:
     95a:	a8 e0       	ldi	r26, 0x08	; 8
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 f7 2a 	jmp	0x55ee	; 0x55ee <__prologue_saves__+0x12>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	da 01       	movw	r26, r20
     970:	c9 01       	movw	r24, r18
     972:	88 27       	eor	r24, r24
     974:	b7 fd       	sbrc	r27, 7
     976:	83 95       	inc	r24
     978:	99 27       	eor	r25, r25
     97a:	aa 27       	eor	r26, r26
     97c:	bb 27       	eor	r27, r27
     97e:	b8 2e       	mov	r11, r24
     980:	21 15       	cp	r18, r1
     982:	31 05       	cpc	r19, r1
     984:	41 05       	cpc	r20, r1
     986:	51 05       	cpc	r21, r1
     988:	19 f4       	brne	.+6      	; 0x990 <__floatsisf+0x36>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	3a c0       	rjmp	.+116    	; 0xa04 <__floatsisf+0xaa>
     990:	88 23       	and	r24, r24
     992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x64>
     994:	20 30       	cpi	r18, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	38 07       	cpc	r19, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	48 07       	cpc	r20, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	58 07       	cpc	r21, r24
     9a2:	29 f4       	brne	.+10     	; 0x9ae <__floatsisf+0x54>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	9f ec       	ldi	r25, 0xCF	; 207
     9ac:	30 c0       	rjmp	.+96     	; 0xa0e <__floatsisf+0xb4>
     9ae:	ee 24       	eor	r14, r14
     9b0:	ff 24       	eor	r15, r15
     9b2:	87 01       	movw	r16, r14
     9b4:	e2 1a       	sub	r14, r18
     9b6:	f3 0a       	sbc	r15, r19
     9b8:	04 0b       	sbc	r16, r20
     9ba:	15 0b       	sbc	r17, r21
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__floatsisf+0x68>
     9be:	79 01       	movw	r14, r18
     9c0:	8a 01       	movw	r16, r20
     9c2:	8e e1       	ldi	r24, 0x1E	; 30
     9c4:	c8 2e       	mov	r12, r24
     9c6:	d1 2c       	mov	r13, r1
     9c8:	dc 82       	std	Y+4, r13	; 0x04
     9ca:	cb 82       	std	Y+3, r12	; 0x03
     9cc:	ed 82       	std	Y+5, r14	; 0x05
     9ce:	fe 82       	std	Y+6, r15	; 0x06
     9d0:	0f 83       	std	Y+7, r16	; 0x07
     9d2:	18 87       	std	Y+8, r17	; 0x08
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	84 f4       	brge	.+32     	; 0xa04 <__floatsisf+0xaa>
     9e4:	08 2e       	mov	r0, r24
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__floatsisf+0x96>
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	00 1f       	adc	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	0a 94       	dec	r0
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__floatsisf+0x8e>
     9f4:	ed 82       	std	Y+5, r14	; 0x05
     9f6:	fe 82       	std	Y+6, r15	; 0x06
     9f8:	0f 83       	std	Y+7, r16	; 0x07
     9fa:	18 87       	std	Y+8, r17	; 0x08
     9fc:	c8 1a       	sub	r12, r24
     9fe:	d9 0a       	sbc	r13, r25
     a00:	dc 82       	std	Y+4, r13	; 0x04
     a02:	cb 82       	std	Y+3, r12	; 0x03
     a04:	ba 82       	std	Y+2, r11	; 0x02
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     a0e:	28 96       	adiw	r28, 0x08	; 8
     a10:	e9 e0       	ldi	r30, 0x09	; 9
     a12:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__epilogue_restores__+0x12>

00000a16 <__fixsfsi>:
     a16:	ac e0       	ldi	r26, 0x0C	; 12
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__prologue_saves__+0x20>
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	7a 83       	std	Y+2, r23	; 0x02
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	6b 5f       	subi	r22, 0xFB	; 251
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	61 f1       	breq	.+88     	; 0xa96 <__fixsfsi+0x80>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	50 f1       	brcs	.+84     	; 0xa96 <__fixsfsi+0x80>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	21 f4       	brne	.+8      	; 0xa4e <__fixsfsi+0x38>
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	88 23       	and	r24, r24
     a4a:	51 f1       	breq	.+84     	; 0xaa0 <__fixsfsi+0x8a>
     a4c:	2e c0       	rjmp	.+92     	; 0xaaa <__fixsfsi+0x94>
     a4e:	2f 81       	ldd	r18, Y+7	; 0x07
     a50:	38 85       	ldd	r19, Y+8	; 0x08
     a52:	37 fd       	sbrc	r19, 7
     a54:	20 c0       	rjmp	.+64     	; 0xa96 <__fixsfsi+0x80>
     a56:	6e 81       	ldd	r22, Y+6	; 0x06
     a58:	2f 31       	cpi	r18, 0x1F	; 31
     a5a:	31 05       	cpc	r19, r1
     a5c:	1c f0       	brlt	.+6      	; 0xa64 <__fixsfsi+0x4e>
     a5e:	66 23       	and	r22, r22
     a60:	f9 f0       	breq	.+62     	; 0xaa0 <__fixsfsi+0x8a>
     a62:	23 c0       	rjmp	.+70     	; 0xaaa <__fixsfsi+0x94>
     a64:	8e e1       	ldi	r24, 0x1E	; 30
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19
     a6c:	29 85       	ldd	r18, Y+9	; 0x09
     a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a70:	4b 85       	ldd	r20, Y+11	; 0x0b
     a72:	5c 85       	ldd	r21, Y+12	; 0x0c
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fixsfsi+0x68>
     a76:	56 95       	lsr	r21
     a78:	47 95       	ror	r20
     a7a:	37 95       	ror	r19
     a7c:	27 95       	ror	r18
     a7e:	8a 95       	dec	r24
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__fixsfsi+0x60>
     a82:	66 23       	and	r22, r22
     a84:	b1 f0       	breq	.+44     	; 0xab2 <__fixsfsi+0x9c>
     a86:	50 95       	com	r21
     a88:	40 95       	com	r20
     a8a:	30 95       	com	r19
     a8c:	21 95       	neg	r18
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <__fixsfsi+0x9c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__fixsfsi+0x9c>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f ef       	ldi	r20, 0xFF	; 255
     aa6:	5f e7       	ldi	r21, 0x7F	; 127
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__fixsfsi+0x9c>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e8       	ldi	r21, 0x80	; 128
     ab2:	b9 01       	movw	r22, r18
     ab4:	ca 01       	movw	r24, r20
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	e2 e0       	ldi	r30, 0x02	; 2
     aba:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__epilogue_restores__+0x20>

00000abe <__floatunsisf>:
     abe:	a8 e0       	ldi	r26, 0x08	; 8
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e5 e6       	ldi	r30, 0x65	; 101
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
     ac6:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__prologue_saves__+0x10>
     aca:	7b 01       	movw	r14, r22
     acc:	8c 01       	movw	r16, r24
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	19 f4       	brne	.+6      	; 0xade <__floatunsisf+0x20>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	60 c0       	rjmp	.+192    	; 0xb9e <__floatunsisf+0xe0>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	8e e1       	ldi	r24, 0x1E	; 30
     ae4:	c8 2e       	mov	r12, r24
     ae6:	d1 2c       	mov	r13, r1
     ae8:	dc 82       	std	Y+4, r13	; 0x04
     aea:	cb 82       	std	Y+3, r12	; 0x03
     aec:	ed 82       	std	Y+5, r14	; 0x05
     aee:	fe 82       	std	Y+6, r15	; 0x06
     af0:	0f 83       	std	Y+7, r16	; 0x07
     af2:	18 87       	std	Y+8, r17	; 0x08
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     afc:	fc 01       	movw	r30, r24
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f7 ff       	sbrs	r31, 7
     b02:	3b c0       	rjmp	.+118    	; 0xb7a <__floatunsisf+0xbc>
     b04:	22 27       	eor	r18, r18
     b06:	33 27       	eor	r19, r19
     b08:	2e 1b       	sub	r18, r30
     b0a:	3f 0b       	sbc	r19, r31
     b0c:	57 01       	movw	r10, r14
     b0e:	68 01       	movw	r12, r16
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__floatunsisf+0x5e>
     b14:	d6 94       	lsr	r13
     b16:	c7 94       	ror	r12
     b18:	b7 94       	ror	r11
     b1a:	a7 94       	ror	r10
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__floatunsisf+0x56>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0x7c>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	aa 1f       	adc	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	2a 95       	dec	r18
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0x74>
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	a1 09       	sbc	r26, r1
     b42:	b1 09       	sbc	r27, r1
     b44:	8e 21       	and	r24, r14
     b46:	9f 21       	and	r25, r15
     b48:	a0 23       	and	r26, r16
     b4a:	b1 23       	and	r27, r17
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	a1 05       	cpc	r26, r1
     b50:	b1 05       	cpc	r27, r1
     b52:	21 f0       	breq	.+8      	; 0xb5c <__floatunsisf+0x9e>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4a 29       	or	r20, r10
     b5e:	5b 29       	or	r21, r11
     b60:	6c 29       	or	r22, r12
     b62:	7d 29       	or	r23, r13
     b64:	4d 83       	std	Y+5, r20	; 0x05
     b66:	5e 83       	std	Y+6, r21	; 0x06
     b68:	6f 83       	std	Y+7, r22	; 0x07
     b6a:	78 87       	std	Y+8, r23	; 0x08
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	8e 1b       	sub	r24, r30
     b72:	9f 0b       	sbc	r25, r31
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <__floatunsisf+0xe0>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	81 f0       	breq	.+32     	; 0xb9e <__floatunsisf+0xe0>
     b7e:	0e 2e       	mov	r0, r30
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__floatunsisf+0xcc>
     b82:	ee 0c       	add	r14, r14
     b84:	ff 1c       	adc	r15, r15
     b86:	00 1f       	adc	r16, r16
     b88:	11 1f       	adc	r17, r17
     b8a:	0a 94       	dec	r0
     b8c:	d2 f7       	brpl	.-12     	; 0xb82 <__floatunsisf+0xc4>
     b8e:	ed 82       	std	Y+5, r14	; 0x05
     b90:	fe 82       	std	Y+6, r15	; 0x06
     b92:	0f 83       	std	Y+7, r16	; 0x07
     b94:	18 87       	std	Y+8, r17	; 0x08
     b96:	ce 1a       	sub	r12, r30
     b98:	df 0a       	sbc	r13, r31
     b9a:	dc 82       	std	Y+4, r13	; 0x04
     b9c:	cb 82       	std	Y+3, r12	; 0x03
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     ba8:	28 96       	adiw	r28, 0x08	; 8
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__epilogue_restores__+0x10>

00000bb0 <__clzsi2>:
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e8 16       	cp	r14, r24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	f8 06       	cpc	r15, r24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 07       	cpc	r16, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	18 07       	cpc	r17, r24
     bcc:	88 f4       	brcc	.+34     	; 0xbf0 <__clzsi2+0x40>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	e8 16       	cp	r14, r24
     bd2:	f1 04       	cpc	r15, r1
     bd4:	01 05       	cpc	r16, r1
     bd6:	11 05       	cpc	r17, r1
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <__clzsi2+0x36>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <__clzsi2+0x36>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	17 c0       	rjmp	.+46     	; 0xc14 <__clzsi2+0x64>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	12 c0       	rjmp	.+36     	; 0xc14 <__clzsi2+0x64>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	e8 16       	cp	r14, r24
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	f8 06       	cpc	r15, r24
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 07       	cpc	r16, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	18 07       	cpc	r17, r24
     c00:	28 f0       	brcs	.+10     	; 0xc0c <__clzsi2+0x5c>
     c02:	88 e1       	ldi	r24, 0x18	; 24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__clzsi2+0x64>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	20 e2       	ldi	r18, 0x20	; 32
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	28 1b       	sub	r18, r24
     c1e:	39 0b       	sbc	r19, r25
     c20:	4a 0b       	sbc	r20, r26
     c22:	5b 0b       	sbc	r21, r27
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__clzsi2+0x7e>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	8a 95       	dec	r24
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__clzsi2+0x76>
     c32:	f7 01       	movw	r30, r14
     c34:	e9 54       	subi	r30, 0x49	; 73
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	28 1b       	sub	r18, r24
     c3c:	31 09       	sbc	r19, r1
     c3e:	41 09       	sbc	r20, r1
     c40:	51 09       	sbc	r21, r1
     c42:	c9 01       	movw	r24, r18
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <__pack_f>:
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	e4 80       	ldd	r14, Z+4	; 0x04
     c5c:	f5 80       	ldd	r15, Z+5	; 0x05
     c5e:	06 81       	ldd	r16, Z+6	; 0x06
     c60:	17 81       	ldd	r17, Z+7	; 0x07
     c62:	d1 80       	ldd	r13, Z+1	; 0x01
     c64:	80 81       	ld	r24, Z
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	48 f4       	brcc	.+18     	; 0xc7c <__pack_f+0x2e>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e1       	ldi	r26, 0x10	; 16
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 2a       	or	r14, r24
     c74:	f9 2a       	or	r15, r25
     c76:	0a 2b       	or	r16, r26
     c78:	1b 2b       	or	r17, r27
     c7a:	a5 c0       	rjmp	.+330    	; 0xdc6 <__pack_f+0x178>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__pack_f+0x34>
     c80:	9f c0       	rjmp	.+318    	; 0xdc0 <__pack_f+0x172>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	21 f4       	brne	.+8      	; 0xc8e <__pack_f+0x40>
     c86:	ee 24       	eor	r14, r14
     c88:	ff 24       	eor	r15, r15
     c8a:	87 01       	movw	r16, r14
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__pack_f+0x4a>
     c8e:	e1 14       	cp	r14, r1
     c90:	f1 04       	cpc	r15, r1
     c92:	01 05       	cpc	r16, r1
     c94:	11 05       	cpc	r17, r1
     c96:	19 f4       	brne	.+6      	; 0xc9e <__pack_f+0x50>
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	96 c0       	rjmp	.+300    	; 0xdca <__pack_f+0x17c>
     c9e:	62 81       	ldd	r22, Z+2	; 0x02
     ca0:	73 81       	ldd	r23, Z+3	; 0x03
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	62 38       	cpi	r22, 0x82	; 130
     ca6:	79 07       	cpc	r23, r25
     ca8:	0c f0       	brlt	.+2      	; 0xcac <__pack_f+0x5e>
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <__pack_f+0x114>
     cac:	22 e8       	ldi	r18, 0x82	; 130
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	26 1b       	sub	r18, r22
     cb2:	37 0b       	sbc	r19, r23
     cb4:	2a 31       	cpi	r18, 0x1A	; 26
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f0       	brlt	.+10     	; 0xcc4 <__pack_f+0x76>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	2a c0       	rjmp	.+84     	; 0xd18 <__pack_f+0xca>
     cc4:	b8 01       	movw	r22, r16
     cc6:	a7 01       	movw	r20, r14
     cc8:	02 2e       	mov	r0, r18
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__pack_f+0x86>
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	57 95       	ror	r21
     cd2:	47 95       	ror	r20
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__pack_f+0x7e>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x9c>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	2a 95       	dec	r18
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__pack_f+0x94>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	a1 09       	sbc	r26, r1
     cf2:	b1 09       	sbc	r27, r1
     cf4:	8e 21       	and	r24, r14
     cf6:	9f 21       	and	r25, r15
     cf8:	a0 23       	and	r26, r16
     cfa:	b1 23       	and	r27, r17
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	21 f0       	breq	.+8      	; 0xd0c <__pack_f+0xbe>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	9a 01       	movw	r18, r20
     d0e:	ab 01       	movw	r20, r22
     d10:	28 2b       	or	r18, r24
     d12:	39 2b       	or	r19, r25
     d14:	4a 2b       	or	r20, r26
     d16:	5b 2b       	or	r21, r27
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	a0 70       	andi	r26, 0x00	; 0
     d22:	b0 70       	andi	r27, 0x00	; 0
     d24:	80 34       	cpi	r24, 0x40	; 64
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__pack_f+0xee>
     d2e:	27 ff       	sbrs	r18, 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__pack_f+0xf6>
     d32:	20 5c       	subi	r18, 0xC0	; 192
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	4f 4f       	sbci	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0xf6>
     d3c:	21 5c       	subi	r18, 0xC1	; 193
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	4f 4f       	sbci	r20, 0xFF	; 255
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	3a 07       	cpc	r19, r26
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	4a 07       	cpc	r20, r26
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	5a 07       	cpc	r21, r26
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__pack_f+0x10e>
     d58:	e1 e0       	ldi	r30, 0x01	; 1
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	79 01       	movw	r14, r18
     d5e:	8a 01       	movw	r16, r20
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__pack_f+0x162>
     d62:	60 38       	cpi	r22, 0x80	; 128
     d64:	71 05       	cpc	r23, r1
     d66:	64 f5       	brge	.+88     	; 0xdc0 <__pack_f+0x172>
     d68:	fb 01       	movw	r30, r22
     d6a:	e1 58       	subi	r30, 0x81	; 129
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	d8 01       	movw	r26, r16
     d70:	c7 01       	movw	r24, r14
     d72:	8f 77       	andi	r24, 0x7F	; 127
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	a0 70       	andi	r26, 0x00	; 0
     d78:	b0 70       	andi	r27, 0x00	; 0
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	91 05       	cpc	r25, r1
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	39 f4       	brne	.+14     	; 0xd92 <__pack_f+0x144>
     d84:	e7 fe       	sbrs	r14, 7
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <__pack_f+0x154>
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__pack_f+0x14c>
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 0e       	add	r14, r24
     d9c:	f9 1e       	adc	r15, r25
     d9e:	0a 1f       	adc	r16, r26
     da0:	1b 1f       	adc	r17, r27
     da2:	17 ff       	sbrs	r17, 7
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__pack_f+0x162>
     da6:	16 95       	lsr	r17
     da8:	07 95       	ror	r16
     daa:	f7 94       	ror	r15
     dac:	e7 94       	ror	r14
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	16 95       	lsr	r17
     db4:	07 95       	ror	r16
     db6:	f7 94       	ror	r15
     db8:	e7 94       	ror	r14
     dba:	8a 95       	dec	r24
     dbc:	d1 f7       	brne	.-12     	; 0xdb2 <__pack_f+0x164>
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__pack_f+0x17c>
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	87 01       	movw	r16, r14
     dc6:	ef ef       	ldi	r30, 0xFF	; 255
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	6e 2f       	mov	r22, r30
     dcc:	67 95       	ror	r22
     dce:	66 27       	eor	r22, r22
     dd0:	67 95       	ror	r22
     dd2:	90 2f       	mov	r25, r16
     dd4:	9f 77       	andi	r25, 0x7F	; 127
     dd6:	d7 94       	ror	r13
     dd8:	dd 24       	eor	r13, r13
     dda:	d7 94       	ror	r13
     ddc:	8e 2f       	mov	r24, r30
     dde:	86 95       	lsr	r24
     de0:	49 2f       	mov	r20, r25
     de2:	46 2b       	or	r20, r22
     de4:	58 2f       	mov	r21, r24
     de6:	5d 29       	or	r21, r13
     de8:	b7 01       	movw	r22, r14
     dea:	ca 01       	movw	r24, r20
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	08 95       	ret

00000df8 <__unpack_f>:
     df8:	fc 01       	movw	r30, r24
     dfa:	db 01       	movw	r26, r22
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	22 81       	ldd	r18, Z+2	; 0x02
     e02:	62 2f       	mov	r22, r18
     e04:	6f 77       	andi	r22, 0x7F	; 127
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	22 1f       	adc	r18, r18
     e0a:	22 27       	eor	r18, r18
     e0c:	22 1f       	adc	r18, r18
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	89 2f       	mov	r24, r25
     e12:	88 0f       	add	r24, r24
     e14:	82 2b       	or	r24, r18
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	99 1f       	adc	r25, r25
     e1c:	99 27       	eor	r25, r25
     e1e:	99 1f       	adc	r25, r25
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	21 15       	cp	r18, r1
     e28:	31 05       	cpc	r19, r1
     e2a:	a9 f5       	brne	.+106    	; 0xe96 <__unpack_f+0x9e>
     e2c:	41 15       	cp	r20, r1
     e2e:	51 05       	cpc	r21, r1
     e30:	61 05       	cpc	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	11 f4       	brne	.+4      	; 0xe3a <__unpack_f+0x42>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <__unpack_f+0xb0>
     e3a:	82 e8       	ldi	r24, 0x82	; 130
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	9a 01       	movw	r18, r20
     e48:	ab 01       	movw	r20, r22
     e4a:	67 e0       	ldi	r22, 0x07	; 7
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	6a 95       	dec	r22
     e56:	d1 f7       	brne	.-12     	; 0xe4c <__unpack_f+0x54>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8c 93       	st	X, r24
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__unpack_f+0x80>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	12 97       	sbiw	r26, 0x02	; 2
     e78:	20 30       	cpi	r18, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	38 07       	cpc	r19, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	48 07       	cpc	r20, r24
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	58 07       	cpc	r21, r24
     e86:	58 f3       	brcs	.-42     	; 0xe5e <__unpack_f+0x66>
     e88:	14 96       	adiw	r26, 0x04	; 4
     e8a:	2d 93       	st	X+, r18
     e8c:	3d 93       	st	X+, r19
     e8e:	4d 93       	st	X+, r20
     e90:	5c 93       	st	X, r21
     e92:	17 97       	sbiw	r26, 0x07	; 7
     e94:	08 95       	ret
     e96:	2f 3f       	cpi	r18, 0xFF	; 255
     e98:	31 05       	cpc	r19, r1
     e9a:	79 f4       	brne	.+30     	; 0xeba <__unpack_f+0xc2>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	19 f4       	brne	.+6      	; 0xeac <__unpack_f+0xb4>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	8c 93       	st	X, r24
     eaa:	08 95       	ret
     eac:	64 ff       	sbrs	r22, 4
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__unpack_f+0xbe>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <__unpack_f+0xe2>
     eb6:	1c 92       	st	X, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <__unpack_f+0xe2>
     eba:	2f 57       	subi	r18, 0x7F	; 127
     ebc:	30 40       	sbci	r19, 0x00	; 0
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	3c 93       	st	X, r19
     ec2:	2e 93       	st	-X, r18
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	8c 93       	st	X, r24
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	44 0f       	add	r20, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	d1 f7       	brne	.-12     	; 0xecc <__unpack_f+0xd4>
     ed8:	70 64       	ori	r23, 0x40	; 64
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	4d 93       	st	X+, r20
     ede:	5d 93       	st	X+, r21
     ee0:	6d 93       	st	X+, r22
     ee2:	7c 93       	st	X, r23
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	08 95       	ret

00000ee8 <__fpcmp_parts_f>:
     ee8:	1f 93       	push	r17
     eea:	dc 01       	movw	r26, r24
     eec:	fb 01       	movw	r30, r22
     eee:	9c 91       	ld	r25, X
     ef0:	92 30       	cpi	r25, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__fpcmp_parts_f+0xe>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <__fpcmp_parts_f+0x9c>
     ef6:	80 81       	ld	r24, Z
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	08 f4       	brcc	.+2      	; 0xefe <__fpcmp_parts_f+0x16>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__fpcmp_parts_f+0x9c>
     efe:	94 30       	cpi	r25, 0x04	; 4
     f00:	51 f4       	brne	.+20     	; 0xf16 <__fpcmp_parts_f+0x2e>
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	1c 91       	ld	r17, X
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	99 f5       	brne	.+102    	; 0xf70 <__fpcmp_parts_f+0x88>
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	68 2f       	mov	r22, r24
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	61 1b       	sub	r22, r17
     f12:	71 09       	sbc	r23, r1
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <__fpcmp_parts_f+0xac>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f0       	breq	.+8      	; 0xf22 <__fpcmp_parts_f+0x3a>
     f1a:	92 30       	cpi	r25, 0x02	; 2
     f1c:	31 f4       	brne	.+12     	; 0xf2a <__fpcmp_parts_f+0x42>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	b9 f1       	breq	.+110    	; 0xf90 <__fpcmp_parts_f+0xa8>
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	89 f1       	breq	.+98     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f28:	2d c0       	rjmp	.+90     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	1c 91       	ld	r17, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	f1 f0       	breq	.+60     	; 0xf70 <__fpcmp_parts_f+0x88>
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	18 17       	cp	r17, r24
     f38:	d9 f4       	brne	.+54     	; 0xf70 <__fpcmp_parts_f+0x88>
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	94 f0       	brlt	.+36     	; 0xf70 <__fpcmp_parts_f+0x88>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	bc f0       	brlt	.+46     	; 0xf80 <__fpcmp_parts_f+0x98>
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8d 91       	ld	r24, X+
     f56:	9d 91       	ld	r25, X+
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	24 81       	ldd	r18, Z+4	; 0x04
     f60:	35 81       	ldd	r19, Z+5	; 0x05
     f62:	46 81       	ldd	r20, Z+6	; 0x06
     f64:	57 81       	ldd	r21, Z+7	; 0x07
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	4a 07       	cpc	r20, r26
     f6c:	5b 07       	cpc	r21, r27
     f6e:	18 f4       	brcc	.+6      	; 0xf76 <__fpcmp_parts_f+0x8e>
     f70:	11 23       	and	r17, r17
     f72:	41 f0       	breq	.+16     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	a4 07       	cpc	r26, r20
     f7c:	b5 07       	cpc	r27, r21
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <__fpcmp_parts_f+0xa8>
     f80:	11 23       	and	r17, r17
     f82:	19 f0       	breq	.+6      	; 0xf8a <__fpcmp_parts_f+0xa2>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <__fpcmp_parts_f+0xac>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__fpcmp_parts_f+0xac>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	cb 01       	movw	r24, r22
     f96:	1f 91       	pop	r17
     f98:	08 95       	ret

00000f9a <LCD_Init>:
 * 4. function set for 8 or 4 bit mode
 * 5. Display control
 * 6. Clear display
 * 7. Entry mode set
 */
void LCD_Init() {
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	c2 56       	subi	r28, 0x62	; 98
     fa8:	d0 40       	sbci	r29, 0x00	; 0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_CTRL_PORT, LCD_RS, PIN_OUTPUT);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_CTRL_PORT, LCD_E, PIN_OUTPUT);
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	62 e0       	ldi	r22, 0x02	; 2
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
     fc8:	fe 01       	movw	r30, r28
     fca:	e1 5a       	subi	r30, 0xA1	; 161
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 ea       	ldi	r26, 0xA0	; 160
     fd4:	b1 e4       	ldi	r27, 0x41	; 65
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	8e 01       	movw	r16, r28
     fe0:	05 5a       	subi	r16, 0xA5	; 165
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	e1 5a       	subi	r30, 0xA1	; 161
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	55 e4       	ldi	r21, 0x45	; 69
     ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	f8 01       	movw	r30, r16
    1004:	80 83       	st	Z, r24
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	a2 83       	std	Z+2, r26	; 0x02
    100a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100c:	fe 01       	movw	r30, r28
    100e:	e5 5a       	subi	r30, 0xA5	; 165
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	44 f4       	brge	.+16     	; 0x103a <LCD_Init+0xa0>
		__ticks = 1;
    102a:	fe 01       	movw	r30, r28
    102c:	e7 5a       	subi	r30, 0xA7	; 167
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
    1038:	64 c0       	rjmp	.+200    	; 0x1102 <LCD_Init+0x168>
	else if (__tmp > 65535)
    103a:	fe 01       	movw	r30, r28
    103c:	e5 5a       	subi	r30, 0xA5	; 165
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	0c f0       	brlt	.+2      	; 0x105a <LCD_Init+0xc0>
    1058:	43 c0       	rjmp	.+134    	; 0x10e0 <LCD_Init+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105a:	fe 01       	movw	r30, r28
    105c:	e1 5a       	subi	r30, 0xA1	; 161
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8e 01       	movw	r16, r28
    107a:	07 5a       	subi	r16, 0xA7	; 167
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	f8 01       	movw	r30, r16
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
    1090:	1f c0       	rjmp	.+62     	; 0x10d0 <LCD_Init+0x136>
    1092:	fe 01       	movw	r30, r28
    1094:	e9 5a       	subi	r30, 0xA9	; 169
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 e9       	ldi	r24, 0x90	; 144
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10a0:	fe 01       	movw	r30, r28
    10a2:	e9 5a       	subi	r30, 0xA9	; 169
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <LCD_Init+0x110>
    10ae:	fe 01       	movw	r30, r28
    10b0:	e9 5a       	subi	r30, 0xA9	; 169
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b8:	de 01       	movw	r26, r28
    10ba:	a7 5a       	subi	r26, 0xA7	; 167
    10bc:	bf 4f       	sbci	r27, 0xFF	; 255
    10be:	fe 01       	movw	r30, r28
    10c0:	e7 5a       	subi	r30, 0xA7	; 167
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	11 96       	adiw	r26, 0x01	; 1
    10cc:	9c 93       	st	X, r25
    10ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	fe 01       	movw	r30, r28
    10d2:	e7 5a       	subi	r30, 0xA7	; 167
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	d1 f6       	brne	.-76     	; 0x1092 <LCD_Init+0xf8>
    10de:	27 c0       	rjmp	.+78     	; 0x112e <LCD_Init+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	8e 01       	movw	r16, r28
    10e2:	07 5a       	subi	r16, 0xA7	; 167
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	e5 5a       	subi	r30, 0xA5	; 165
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	de 01       	movw	r26, r28
    1104:	ab 5a       	subi	r26, 0xAB	; 171
    1106:	bf 4f       	sbci	r27, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	e7 5a       	subi	r30, 0xA7	; 167
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	8d 93       	st	X+, r24
    1114:	9c 93       	st	X, r25
    1116:	fe 01       	movw	r30, r28
    1118:	eb 5a       	subi	r30, 0xAB	; 171
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <LCD_Init+0x186>
    1124:	fe 01       	movw	r30, r28
    1126:	eb 5a       	subi	r30, 0xAB	; 171
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24

	_delay_ms(20);
#if (LCD_Mode == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
#elif (LCD_Mode == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_D4_PIN, PIN_OUTPUT);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	63 e0       	ldi	r22, 0x03	; 3
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_D5_PIN, PIN_OUTPUT);
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	64 e0       	ldi	r22, 0x04	; 4
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_D6_PIN, PIN_OUTPUT);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	65 e0       	ldi	r22, 0x05	; 5
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_D7_PIN, PIN_OUTPUT);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	66 e0       	ldi	r22, 0x06	; 6
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
    1156:	fe 01       	movw	r30, r28
    1158:	ef 5a       	subi	r30, 0xAF	; 175
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 ef       	ldi	r26, 0xF0	; 240
    1162:	b1 e4       	ldi	r27, 0x41	; 65
    1164:	80 83       	st	Z, r24
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	a2 83       	std	Z+2, r26	; 0x02
    116a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116c:	8e 01       	movw	r16, r28
    116e:	03 5b       	subi	r16, 0xB3	; 179
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	fe 01       	movw	r30, r28
    1174:	ef 5a       	subi	r30, 0xAF	; 175
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	4a e7       	ldi	r20, 0x7A	; 122
    1186:	55 e4       	ldi	r21, 0x45	; 69
    1188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	f8 01       	movw	r30, r16
    1192:	80 83       	st	Z, r24
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	a2 83       	std	Z+2, r26	; 0x02
    1198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    119a:	fe 01       	movw	r30, r28
    119c:	e3 5b       	subi	r30, 0xB3	; 179
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	44 f4       	brge	.+16     	; 0x11c8 <LCD_Init+0x22e>
		__ticks = 1;
    11b8:	fe 01       	movw	r30, r28
    11ba:	e5 5b       	subi	r30, 0xB5	; 181
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	64 c0       	rjmp	.+200    	; 0x1290 <LCD_Init+0x2f6>
	else if (__tmp > 65535)
    11c8:	fe 01       	movw	r30, r28
    11ca:	e3 5b       	subi	r30, 0xB3	; 179
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	0c f0       	brlt	.+2      	; 0x11e8 <LCD_Init+0x24e>
    11e6:	43 c0       	rjmp	.+134    	; 0x126e <LCD_Init+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e8:	fe 01       	movw	r30, r28
    11ea:	ef 5a       	subi	r30, 0xAF	; 175
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8e 01       	movw	r16, r28
    1208:	05 5b       	subi	r16, 0xB5	; 181
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	f8 01       	movw	r30, r16
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
    121e:	1f c0       	rjmp	.+62     	; 0x125e <LCD_Init+0x2c4>
    1220:	fe 01       	movw	r30, r28
    1222:	e7 5b       	subi	r30, 0xB7	; 183
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 e9       	ldi	r24, 0x90	; 144
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    122e:	fe 01       	movw	r30, r28
    1230:	e7 5b       	subi	r30, 0xB7	; 183
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <LCD_Init+0x29e>
    123c:	fe 01       	movw	r30, r28
    123e:	e7 5b       	subi	r30, 0xB7	; 183
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1246:	de 01       	movw	r26, r28
    1248:	a5 5b       	subi	r26, 0xB5	; 181
    124a:	bf 4f       	sbci	r27, 0xFF	; 255
    124c:	fe 01       	movw	r30, r28
    124e:	e5 5b       	subi	r30, 0xB5	; 181
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125e:	fe 01       	movw	r30, r28
    1260:	e5 5b       	subi	r30, 0xB5	; 181
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	d1 f6       	brne	.-76     	; 0x1220 <LCD_Init+0x286>
    126c:	27 c0       	rjmp	.+78     	; 0x12bc <LCD_Init+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	8e 01       	movw	r16, r28
    1270:	05 5b       	subi	r16, 0xB5	; 181
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	fe 01       	movw	r30, r28
    1276:	e3 5b       	subi	r30, 0xB3	; 179
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	f8 01       	movw	r30, r16
    128c:	91 83       	std	Z+1, r25	; 0x01
    128e:	80 83       	st	Z, r24
    1290:	de 01       	movw	r26, r28
    1292:	a9 5b       	subi	r26, 0xB9	; 185
    1294:	bf 4f       	sbci	r27, 0xFF	; 255
    1296:	fe 01       	movw	r30, r28
    1298:	e5 5b       	subi	r30, 0xB5	; 181
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	8d 93       	st	X+, r24
    12a2:	9c 93       	st	X, r25
    12a4:	fe 01       	movw	r30, r28
    12a6:	e9 5b       	subi	r30, 0xB9	; 185
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <LCD_Init+0x314>
    12b2:	fe 01       	movw	r30, r28
    12b4:	e9 5b       	subi	r30, 0xB9	; 185
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_sendCommand(0x01);
	_delay_ms(2);
	LCD_sendCommand(0x06);
#elif (LCD_Mode == 4)
	LCD_sendCommand(0x33);
    12bc:	83 e3       	ldi	r24, 0x33	; 51
    12be:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
    12c2:	fe 01       	movw	r30, r28
    12c4:	ed 5b       	subi	r30, 0xBD	; 189
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 e8       	ldi	r26, 0x80	; 128
    12ce:	bf e3       	ldi	r27, 0x3F	; 63
    12d0:	80 83       	st	Z, r24
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	a2 83       	std	Z+2, r26	; 0x02
    12d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	8e 01       	movw	r16, r28
    12da:	01 5c       	subi	r16, 0xC1	; 193
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	fe 01       	movw	r30, r28
    12e0:	ed 5b       	subi	r30, 0xBD	; 189
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a e7       	ldi	r20, 0x7A	; 122
    12f2:	55 e4       	ldi	r21, 0x45	; 69
    12f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	f8 01       	movw	r30, r16
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	a2 83       	std	Z+2, r26	; 0x02
    1304:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1306:	fe 01       	movw	r30, r28
    1308:	ff 96       	adiw	r30, 0x3f	; 63
    130a:	60 81       	ld	r22, Z
    130c:	71 81       	ldd	r23, Z+1	; 0x01
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e8       	ldi	r20, 0x80	; 128
    1318:	5f e3       	ldi	r21, 0x3F	; 63
    131a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <LCD_Init+0x392>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9e af       	std	Y+62, r25	; 0x3e
    1328:	8d af       	std	Y+61, r24	; 0x3d
    132a:	46 c0       	rjmp	.+140    	; 0x13b8 <LCD_Init+0x41e>
	else if (__tmp > 65535)
    132c:	fe 01       	movw	r30, r28
    132e:	ff 96       	adiw	r30, 0x3f	; 63
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	64 f5       	brge	.+88     	; 0x13a0 <LCD_Init+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	fe 01       	movw	r30, r28
    134a:	ed 5b       	subi	r30, 0xBD	; 189
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	9e af       	std	Y+62, r25	; 0x3e
    1374:	8d af       	std	Y+61, r24	; 0x3d
    1376:	0f c0       	rjmp	.+30     	; 0x1396 <LCD_Init+0x3fc>
    1378:	80 e9       	ldi	r24, 0x90	; 144
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	9c af       	std	Y+60, r25	; 0x3c
    137e:	8b af       	std	Y+59, r24	; 0x3b
    1380:	8b ad       	ldd	r24, Y+59	; 0x3b
    1382:	9c ad       	ldd	r25, Y+60	; 0x3c
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <LCD_Init+0x3ea>
    1388:	9c af       	std	Y+60, r25	; 0x3c
    138a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138c:	8d ad       	ldd	r24, Y+61	; 0x3d
    138e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	9e af       	std	Y+62, r25	; 0x3e
    1394:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1396:	8d ad       	ldd	r24, Y+61	; 0x3d
    1398:	9e ad       	ldd	r25, Y+62	; 0x3e
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	69 f7       	brne	.-38     	; 0x1378 <LCD_Init+0x3de>
    139e:	16 c0       	rjmp	.+44     	; 0x13cc <LCD_Init+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a0:	fe 01       	movw	r30, r28
    13a2:	ff 96       	adiw	r30, 0x3f	; 63
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e af       	std	Y+62, r25	; 0x3e
    13b6:	8d af       	std	Y+61, r24	; 0x3d
    13b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    13bc:	9a af       	std	Y+58, r25	; 0x3a
    13be:	89 af       	std	Y+57, r24	; 0x39
    13c0:	89 ad       	ldd	r24, Y+57	; 0x39
    13c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <LCD_Init+0x42a>
    13c8:	9a af       	std	Y+58, r25	; 0x3a
    13ca:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_sendCommand(0x32);
    13cc:	82 e3       	ldi	r24, 0x32	; 50
    13ce:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e8       	ldi	r26, 0x80	; 128
    13d8:	bf e3       	ldi	r27, 0x3F	; 63
    13da:	8d ab       	std	Y+53, r24	; 0x35
    13dc:	9e ab       	std	Y+54, r25	; 0x36
    13de:	af ab       	std	Y+55, r26	; 0x37
    13e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	6d a9       	ldd	r22, Y+53	; 0x35
    13e4:	7e a9       	ldd	r23, Y+54	; 0x36
    13e6:	8f a9       	ldd	r24, Y+55	; 0x37
    13e8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a e7       	ldi	r20, 0x7A	; 122
    13f0:	55 e4       	ldi	r21, 0x45	; 69
    13f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	89 ab       	std	Y+49, r24	; 0x31
    13fc:	9a ab       	std	Y+50, r25	; 0x32
    13fe:	ab ab       	std	Y+51, r26	; 0x33
    1400:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1402:	69 a9       	ldd	r22, Y+49	; 0x31
    1404:	7a a9       	ldd	r23, Y+50	; 0x32
    1406:	8b a9       	ldd	r24, Y+51	; 0x33
    1408:	9c a9       	ldd	r25, Y+52	; 0x34
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <LCD_Init+0x48a>
		__ticks = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	98 ab       	std	Y+48, r25	; 0x30
    1420:	8f a7       	std	Y+47, r24	; 0x2f
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <LCD_Init+0x508>
	else if (__tmp > 65535)
    1424:	69 a9       	ldd	r22, Y+49	; 0x31
    1426:	7a a9       	ldd	r23, Y+50	; 0x32
    1428:	8b a9       	ldd	r24, Y+51	; 0x33
    142a:	9c a9       	ldd	r25, Y+52	; 0x34
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	57 e4       	ldi	r21, 0x47	; 71
    1434:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <LCD_Init+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	6d a9       	ldd	r22, Y+53	; 0x35
    143e:	7e a9       	ldd	r23, Y+54	; 0x36
    1440:	8f a9       	ldd	r24, Y+55	; 0x37
    1442:	98 ad       	ldd	r25, Y+56	; 0x38
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	98 ab       	std	Y+48, r25	; 0x30
    1462:	8f a7       	std	Y+47, r24	; 0x2f
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <LCD_Init+0x4ea>
    1466:	80 e9       	ldi	r24, 0x90	; 144
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	9e a7       	std	Y+46, r25	; 0x2e
    146c:	8d a7       	std	Y+45, r24	; 0x2d
    146e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1470:	9e a5       	ldd	r25, Y+46	; 0x2e
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_Init+0x4d8>
    1476:	9e a7       	std	Y+46, r25	; 0x2e
    1478:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	8f a5       	ldd	r24, Y+47	; 0x2f
    147c:	98 a9       	ldd	r25, Y+48	; 0x30
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	98 ab       	std	Y+48, r25	; 0x30
    1482:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	8f a5       	ldd	r24, Y+47	; 0x2f
    1486:	98 a9       	ldd	r25, Y+48	; 0x30
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <LCD_Init+0x4cc>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <LCD_Init+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	69 a9       	ldd	r22, Y+49	; 0x31
    1490:	7a a9       	ldd	r23, Y+50	; 0x32
    1492:	8b a9       	ldd	r24, Y+51	; 0x33
    1494:	9c a9       	ldd	r25, Y+52	; 0x34
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	98 ab       	std	Y+48, r25	; 0x30
    14a0:	8f a7       	std	Y+47, r24	; 0x2f
    14a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a4:	98 a9       	ldd	r25, Y+48	; 0x30
    14a6:	9c a7       	std	Y+44, r25	; 0x2c
    14a8:	8b a7       	std	Y+43, r24	; 0x2b
    14aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <LCD_Init+0x514>
    14b2:	9c a7       	std	Y+44, r25	; 0x2c
    14b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_sendCommand(0x28);
    14b6:	88 e2       	ldi	r24, 0x28	; 40
    14b8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a0 e8       	ldi	r26, 0x80	; 128
    14c2:	bf e3       	ldi	r27, 0x3F	; 63
    14c4:	8f a3       	std	Y+39, r24	; 0x27
    14c6:	98 a7       	std	Y+40, r25	; 0x28
    14c8:	a9 a7       	std	Y+41, r26	; 0x29
    14ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	6f a1       	ldd	r22, Y+39	; 0x27
    14ce:	78 a5       	ldd	r23, Y+40	; 0x28
    14d0:	89 a5       	ldd	r24, Y+41	; 0x29
    14d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a e7       	ldi	r20, 0x7A	; 122
    14da:	55 e4       	ldi	r21, 0x45	; 69
    14dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8b a3       	std	Y+35, r24	; 0x23
    14e6:	9c a3       	std	Y+36, r25	; 0x24
    14e8:	ad a3       	std	Y+37, r26	; 0x25
    14ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14ec:	6b a1       	ldd	r22, Y+35	; 0x23
    14ee:	7c a1       	ldd	r23, Y+36	; 0x24
    14f0:	8d a1       	ldd	r24, Y+37	; 0x25
    14f2:	9e a1       	ldd	r25, Y+38	; 0x26
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e8       	ldi	r20, 0x80	; 128
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1500:	88 23       	and	r24, r24
    1502:	2c f4       	brge	.+10     	; 0x150e <LCD_Init+0x574>
		__ticks = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9a a3       	std	Y+34, r25	; 0x22
    150a:	89 a3       	std	Y+33, r24	; 0x21
    150c:	3f c0       	rjmp	.+126    	; 0x158c <LCD_Init+0x5f2>
	else if (__tmp > 65535)
    150e:	6b a1       	ldd	r22, Y+35	; 0x23
    1510:	7c a1       	ldd	r23, Y+36	; 0x24
    1512:	8d a1       	ldd	r24, Y+37	; 0x25
    1514:	9e a1       	ldd	r25, Y+38	; 0x26
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	4c f5       	brge	.+82     	; 0x1578 <LCD_Init+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	6f a1       	ldd	r22, Y+39	; 0x27
    1528:	78 a5       	ldd	r23, Y+40	; 0x28
    152a:	89 a5       	ldd	r24, Y+41	; 0x29
    152c:	9a a5       	ldd	r25, Y+42	; 0x2a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9a a3       	std	Y+34, r25	; 0x22
    154c:	89 a3       	std	Y+33, r24	; 0x21
    154e:	0f c0       	rjmp	.+30     	; 0x156e <LCD_Init+0x5d4>
    1550:	80 e9       	ldi	r24, 0x90	; 144
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	98 a3       	std	Y+32, r25	; 0x20
    1556:	8f 8f       	std	Y+31, r24	; 0x1f
    1558:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155a:	98 a1       	ldd	r25, Y+32	; 0x20
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCD_Init+0x5c2>
    1560:	98 a3       	std	Y+32, r25	; 0x20
    1562:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9a a3       	std	Y+34, r25	; 0x22
    156c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156e:	89 a1       	ldd	r24, Y+33	; 0x21
    1570:	9a a1       	ldd	r25, Y+34	; 0x22
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	69 f7       	brne	.-38     	; 0x1550 <LCD_Init+0x5b6>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <LCD_Init+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1578:	6b a1       	ldd	r22, Y+35	; 0x23
    157a:	7c a1       	ldd	r23, Y+36	; 0x24
    157c:	8d a1       	ldd	r24, Y+37	; 0x25
    157e:	9e a1       	ldd	r25, Y+38	; 0x26
    1580:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9a a3       	std	Y+34, r25	; 0x22
    158a:	89 a3       	std	Y+33, r24	; 0x21
    158c:	89 a1       	ldd	r24, Y+33	; 0x21
    158e:	9a a1       	ldd	r25, Y+34	; 0x22
    1590:	9e 8f       	std	Y+30, r25	; 0x1e
    1592:	8d 8f       	std	Y+29, r24	; 0x1d
    1594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1596:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <LCD_Init+0x5fe>
    159c:	9e 8f       	std	Y+30, r25	; 0x1e
    159e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_sendCommand(0x0C);
    15a0:	8c e0       	ldi	r24, 0x0C	; 12
    15a2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e8       	ldi	r26, 0x80	; 128
    15ac:	bf e3       	ldi	r27, 0x3F	; 63
    15ae:	89 8f       	std	Y+25, r24	; 0x19
    15b0:	9a 8f       	std	Y+26, r25	; 0x1a
    15b2:	ab 8f       	std	Y+27, r26	; 0x1b
    15b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	69 8d       	ldd	r22, Y+25	; 0x19
    15b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a e7       	ldi	r20, 0x7A	; 122
    15c4:	55 e4       	ldi	r21, 0x45	; 69
    15c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8d 8b       	std	Y+21, r24	; 0x15
    15d0:	9e 8b       	std	Y+22, r25	; 0x16
    15d2:	af 8b       	std	Y+23, r26	; 0x17
    15d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15d6:	6d 89       	ldd	r22, Y+21	; 0x15
    15d8:	7e 89       	ldd	r23, Y+22	; 0x16
    15da:	8f 89       	ldd	r24, Y+23	; 0x17
    15dc:	98 8d       	ldd	r25, Y+24	; 0x18
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <LCD_Init+0x65e>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <LCD_Init+0x6dc>
	else if (__tmp > 65535)
    15f8:	6d 89       	ldd	r22, Y+21	; 0x15
    15fa:	7e 89       	ldd	r23, Y+22	; 0x16
    15fc:	8f 89       	ldd	r24, Y+23	; 0x17
    15fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <LCD_Init+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	69 8d       	ldd	r22, Y+25	; 0x19
    1612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9c 8b       	std	Y+20, r25	; 0x14
    1636:	8b 8b       	std	Y+19, r24	; 0x13
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <LCD_Init+0x6be>
    163a:	80 e9       	ldi	r24, 0x90	; 144
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	9a 8b       	std	Y+18, r25	; 0x12
    1640:	89 8b       	std	Y+17, r24	; 0x11
    1642:	89 89       	ldd	r24, Y+17	; 0x11
    1644:	9a 89       	ldd	r25, Y+18	; 0x12
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_Init+0x6ac>
    164a:	9a 8b       	std	Y+18, r25	; 0x12
    164c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	8b 89       	ldd	r24, Y+19	; 0x13
    165a:	9c 89       	ldd	r25, Y+20	; 0x14
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f7       	brne	.-38     	; 0x163a <LCD_Init+0x6a0>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <LCD_Init+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6d 89       	ldd	r22, Y+21	; 0x15
    1664:	7e 89       	ldd	r23, Y+22	; 0x16
    1666:	8f 89       	ldd	r24, Y+23	; 0x17
    1668:	98 8d       	ldd	r25, Y+24	; 0x18
    166a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9c 8b       	std	Y+20, r25	; 0x14
    1674:	8b 8b       	std	Y+19, r24	; 0x13
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	9c 89       	ldd	r25, Y+20	; 0x14
    167a:	98 8b       	std	Y+16, r25	; 0x10
    167c:	8f 87       	std	Y+15, r24	; 0x0f
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	98 89       	ldd	r25, Y+16	; 0x10
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <LCD_Init+0x6e8>
    1686:	98 8b       	std	Y+16, r25	; 0x10
    1688:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_sendCommand(0x01);
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e4       	ldi	r27, 0x40	; 64
    1698:	8b 87       	std	Y+11, r24	; 0x0b
    169a:	9c 87       	std	Y+12, r25	; 0x0c
    169c:	ad 87       	std	Y+13, r26	; 0x0d
    169e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a e7       	ldi	r20, 0x7A	; 122
    16ae:	55 e4       	ldi	r21, 0x45	; 69
    16b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8f 83       	std	Y+7, r24	; 0x07
    16ba:	98 87       	std	Y+8, r25	; 0x08
    16bc:	a9 87       	std	Y+9, r26	; 0x09
    16be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <LCD_Init+0x748>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <LCD_Init+0x7c6>
	else if (__tmp > 65535)
    16e2:	6f 81       	ldd	r22, Y+7	; 0x07
    16e4:	78 85       	ldd	r23, Y+8	; 0x08
    16e6:	89 85       	ldd	r24, Y+9	; 0x09
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <LCD_Init+0x7b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1700:	9e 85       	ldd	r25, Y+14	; 0x0e
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <LCD_Init+0x7a8>
    1724:	80 e9       	ldi	r24, 0x90	; 144
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <LCD_Init+0x796>
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <LCD_Init+0x78a>
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <LCD_Init+0x7da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_Init+0x7d2>
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(0x06);
    1774:	86 e0       	ldi	r24, 0x06	; 6
    1776:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
#endif
}
    177a:	ce 59       	subi	r28, 0x9E	; 158
    177c:	df 4f       	sbci	r29, 0xFF	; 255
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret

00001792 <LCD_sendCommand>:
 * Clear RS pin
 * Set enable pin
 * send command
 * clear enable pin
 */
void LCD_sendCommand(uint8 Instruction) {
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	c5 55       	subi	r28, 0x55	; 85
    17a0:	d0 40       	sbci	r29, 0x00	; 0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	fe 01       	movw	r30, r28
    17ae:	eb 5a       	subi	r30, 0xAB	; 171
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 83       	st	Z, r24

	GPIO_writePin(LCD_CTRL_PORT, LCD_RS, LOGIC_LOW);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    17be:	fe 01       	movw	r30, r28
    17c0:	ef 5a       	subi	r30, 0xAF	; 175
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e8       	ldi	r26, 0x80	; 128
    17ca:	bf e3       	ldi	r27, 0x3F	; 63
    17cc:	80 83       	st	Z, r24
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	a2 83       	std	Z+2, r26	; 0x02
    17d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	8e 01       	movw	r16, r28
    17d6:	03 5b       	subi	r16, 0xB3	; 179
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	ef 5a       	subi	r30, 0xAF	; 175
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a e7       	ldi	r20, 0x7A	; 122
    17ee:	55 e4       	ldi	r21, 0x45	; 69
    17f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	f8 01       	movw	r30, r16
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1802:	fe 01       	movw	r30, r28
    1804:	e3 5b       	subi	r30, 0xB3	; 179
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	44 f4       	brge	.+16     	; 0x1830 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1820:	fe 01       	movw	r30, r28
    1822:	e5 5b       	subi	r30, 0xB5	; 181
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	64 c0       	rjmp	.+200    	; 0x18f8 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1830:	fe 01       	movw	r30, r28
    1832:	e3 5b       	subi	r30, 0xB3	; 179
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	3f ef       	ldi	r19, 0xFF	; 255
    1842:	4f e7       	ldi	r20, 0x7F	; 127
    1844:	57 e4       	ldi	r21, 0x47	; 71
    1846:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    184a:	18 16       	cp	r1, r24
    184c:	0c f0       	brlt	.+2      	; 0x1850 <LCD_sendCommand+0xbe>
    184e:	43 c0       	rjmp	.+134    	; 0x18d6 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1850:	fe 01       	movw	r30, r28
    1852:	ef 5a       	subi	r30, 0xAF	; 175
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	8e 01       	movw	r16, r28
    1870:	05 5b       	subi	r16, 0xB5	; 181
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	f8 01       	movw	r30, r16
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
    1886:	1f c0       	rjmp	.+62     	; 0x18c6 <LCD_sendCommand+0x134>
    1888:	fe 01       	movw	r30, r28
    188a:	e7 5b       	subi	r30, 0xB7	; 183
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 e9       	ldi	r24, 0x90	; 144
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5b       	subi	r30, 0xB7	; 183
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_sendCommand+0x10e>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e7 5b       	subi	r30, 0xB7	; 183
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	de 01       	movw	r26, r28
    18b0:	a5 5b       	subi	r26, 0xB5	; 181
    18b2:	bf 4f       	sbci	r27, 0xFF	; 255
    18b4:	fe 01       	movw	r30, r28
    18b6:	e5 5b       	subi	r30, 0xB5	; 181
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	9c 93       	st	X, r25
    18c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	fe 01       	movw	r30, r28
    18c8:	e5 5b       	subi	r30, 0xB5	; 181
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	d1 f6       	brne	.-76     	; 0x1888 <LCD_sendCommand+0xf6>
    18d4:	27 c0       	rjmp	.+78     	; 0x1924 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	8e 01       	movw	r16, r28
    18d8:	05 5b       	subi	r16, 0xB5	; 181
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	fe 01       	movw	r30, r28
    18de:	e3 5b       	subi	r30, 0xB3	; 179
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	de 01       	movw	r26, r28
    18fa:	a9 5b       	subi	r26, 0xB9	; 185
    18fc:	bf 4f       	sbci	r27, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	e5 5b       	subi	r30, 0xB5	; 181
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	8d 93       	st	X+, r24
    190a:	9c 93       	st	X, r25
    190c:	fe 01       	movw	r30, r28
    190e:	e9 5b       	subi	r30, 0xB9	; 185
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_sendCommand+0x184>
    191a:	fe 01       	movw	r30, r28
    191c:	e9 5b       	subi	r30, 0xB9	; 185
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_Mode==4)
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH); /* Enable LCD E=1 */
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	62 e0       	ldi	r22, 0x02	; 2
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5b       	subi	r30, 0xBD	; 189
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a0 e8       	ldi	r26, 0x80	; 128
    193a:	bf e3       	ldi	r27, 0x3F	; 63
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	8e 01       	movw	r16, r28
    1946:	01 5c       	subi	r16, 0xC1	; 193
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	ed 5b       	subi	r30, 0xBD	; 189
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	55 e4       	ldi	r21, 0x45	; 69
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	f8 01       	movw	r30, r16
    196a:	80 83       	st	Z, r24
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	a2 83       	std	Z+2, r26	; 0x02
    1970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1972:	fe 01       	movw	r30, r28
    1974:	ff 96       	adiw	r30, 0x3f	; 63
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <LCD_sendCommand+0x206>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9e af       	std	Y+62, r25	; 0x3e
    1994:	8d af       	std	Y+61, r24	; 0x3d
    1996:	46 c0       	rjmp	.+140    	; 0x1a24 <LCD_sendCommand+0x292>
	else if (__tmp > 65535)
    1998:	fe 01       	movw	r30, r28
    199a:	ff 96       	adiw	r30, 0x3f	; 63
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	64 f5       	brge	.+88     	; 0x1a0c <LCD_sendCommand+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	fe 01       	movw	r30, r28
    19b6:	ed 5b       	subi	r30, 0xBD	; 189
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e af       	std	Y+62, r25	; 0x3e
    19e0:	8d af       	std	Y+61, r24	; 0x3d
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_sendCommand+0x270>
    19e4:	80 e9       	ldi	r24, 0x90	; 144
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	9c af       	std	Y+60, r25	; 0x3c
    19ea:	8b af       	std	Y+59, r24	; 0x3b
    19ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    19ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_sendCommand+0x25e>
    19f4:	9c af       	std	Y+60, r25	; 0x3c
    19f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9e af       	std	Y+62, r25	; 0x3e
    1a00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_sendCommand+0x252>
    1a0a:	16 c0       	rjmp	.+44     	; 0x1a38 <LCD_sendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ff 96       	adiw	r30, 0x3f	; 63
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9e af       	std	Y+62, r25	; 0x3e
    1a22:	8d af       	std	Y+61, r24	; 0x3d
    1a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a28:	9a af       	std	Y+58, r25	; 0x3a
    1a2a:	89 af       	std	Y+57, r24	; 0x39
    1a2c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_sendCommand+0x29e>
    1a34:	9a af       	std	Y+58, r25	; 0x3a
    1a36:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePin(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Instruction, 4));
    1a38:	fe 01       	movw	r30, r28
    1a3a:	eb 5a       	subi	r30, 0xAB	; 171
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	80 71       	andi	r24, 0x10	; 16
    1a46:	90 70       	andi	r25, 0x00	; 0
    1a48:	95 95       	asr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	95 95       	asr	r25
    1a4e:	87 95       	ror	r24
    1a50:	95 95       	asr	r25
    1a52:	87 95       	ror	r24
    1a54:	95 95       	asr	r25
    1a56:	87 95       	ror	r24
    1a58:	98 2f       	mov	r25, r24
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	63 e0       	ldi	r22, 0x03	; 3
    1a5e:	49 2f       	mov	r20, r25
    1a60:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Instruction, 5));
    1a64:	fe 01       	movw	r30, r28
    1a66:	eb 5a       	subi	r30, 0xAB	; 171
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	80 72       	andi	r24, 0x20	; 32
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	95 95       	asr	r25
    1a76:	87 95       	ror	r24
    1a78:	95 95       	asr	r25
    1a7a:	87 95       	ror	r24
    1a7c:	95 95       	asr	r25
    1a7e:	87 95       	ror	r24
    1a80:	95 95       	asr	r25
    1a82:	87 95       	ror	r24
    1a84:	95 95       	asr	r25
    1a86:	87 95       	ror	r24
    1a88:	98 2f       	mov	r25, r24
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	64 e0       	ldi	r22, 0x04	; 4
    1a8e:	49 2f       	mov	r20, r25
    1a90:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Instruction, 6));
    1a94:	fe 01       	movw	r30, r28
    1a96:	eb 5a       	subi	r30, 0xAB	; 171
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	80 74       	andi	r24, 0x40	; 64
    1aa2:	90 70       	andi	r25, 0x00	; 0
    1aa4:	08 2e       	mov	r0, r24
    1aa6:	89 2f       	mov	r24, r25
    1aa8:	00 0c       	add	r0, r0
    1aaa:	88 1f       	adc	r24, r24
    1aac:	99 0b       	sbc	r25, r25
    1aae:	00 0c       	add	r0, r0
    1ab0:	88 1f       	adc	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	65 e0       	ldi	r22, 0x05	; 5
    1aba:	49 2f       	mov	r20, r25
    1abc:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Instruction, 7));
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	eb 5a       	subi	r30, 0xAB	; 171
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	98 2f       	mov	r25, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	99 27       	eor	r25, r25
    1ace:	99 1f       	adc	r25, r25
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	49 2f       	mov	r20, r25
    1ad6:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a0 e8       	ldi	r26, 0x80	; 128
    1ae0:	bf e3       	ldi	r27, 0x3F	; 63
    1ae2:	8d ab       	std	Y+53, r24	; 0x35
    1ae4:	9e ab       	std	Y+54, r25	; 0x36
    1ae6:	af ab       	std	Y+55, r26	; 0x37
    1ae8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	6d a9       	ldd	r22, Y+53	; 0x35
    1aec:	7e a9       	ldd	r23, Y+54	; 0x36
    1aee:	8f a9       	ldd	r24, Y+55	; 0x37
    1af0:	98 ad       	ldd	r25, Y+56	; 0x38
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	55 e4       	ldi	r21, 0x45	; 69
    1afa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	89 ab       	std	Y+49, r24	; 0x31
    1b04:	9a ab       	std	Y+50, r25	; 0x32
    1b06:	ab ab       	std	Y+51, r26	; 0x33
    1b08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <LCD_sendCommand+0x39a>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <LCD_sendCommand+0x418>
	else if (__tmp > 65535)
    1b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b30:	8b a9       	ldd	r24, Y+51	; 0x33
    1b32:	9c a9       	ldd	r25, Y+52	; 0x34
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <LCD_sendCommand+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	6d a9       	ldd	r22, Y+53	; 0x35
    1b46:	7e a9       	ldd	r23, Y+54	; 0x36
    1b48:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <LCD_sendCommand+0x3fa>
    1b6e:	80 e9       	ldi	r24, 0x90	; 144
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	9e a7       	std	Y+46, r25	; 0x2e
    1b74:	8d a7       	std	Y+45, r24	; 0x2d
    1b76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x3e8>
    1b7e:	9e a7       	std	Y+46, r25	; 0x2e
    1b80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b84:	98 a9       	ldd	r25, Y+48	; 0x30
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	98 ab       	std	Y+48, r25	; 0x30
    1b8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <LCD_sendCommand+0x3dc>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <LCD_sendCommand+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	69 a9       	ldd	r22, Y+49	; 0x31
    1b98:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	98 ab       	std	Y+48, r25	; 0x30
    1ba8:	8f a7       	std	Y+47, r24	; 0x2f
    1baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bac:	98 a9       	ldd	r25, Y+48	; 0x30
    1bae:	9c a7       	std	Y+44, r25	; 0x2c
    1bb0:	8b a7       	std	Y+43, r24	; 0x2b
    1bb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_sendCommand+0x424>
    1bba:	9c a7       	std	Y+44, r25	; 0x2c
    1bbc:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e8       	ldi	r26, 0x80	; 128
    1bce:	bf e3       	ldi	r27, 0x3F	; 63
    1bd0:	8f a3       	std	Y+39, r24	; 0x27
    1bd2:	98 a7       	std	Y+40, r25	; 0x28
    1bd4:	a9 a7       	std	Y+41, r26	; 0x29
    1bd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bda:	78 a5       	ldd	r23, Y+40	; 0x28
    1bdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a e7       	ldi	r20, 0x7A	; 122
    1be6:	55 e4       	ldi	r21, 0x45	; 69
    1be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8b a3       	std	Y+35, r24	; 0x23
    1bf2:	9c a3       	std	Y+36, r25	; 0x24
    1bf4:	ad a3       	std	Y+37, r26	; 0x25
    1bf6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <LCD_sendCommand+0x488>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <LCD_sendCommand+0x506>
	else if (__tmp > 65535)
    1c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <LCD_sendCommand+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	6f a1       	ldd	r22, Y+39	; 0x27
    1c34:	78 a5       	ldd	r23, Y+40	; 0x28
    1c36:	89 a5       	ldd	r24, Y+41	; 0x29
    1c38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <LCD_sendCommand+0x4e8>
    1c5c:	80 e9       	ldi	r24, 0x90	; 144
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	98 a3       	std	Y+32, r25	; 0x20
    1c62:	8f 8f       	std	Y+31, r24	; 0x1f
    1c64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c66:	98 a1       	ldd	r25, Y+32	; 0x20
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_sendCommand+0x4d6>
    1c6c:	98 a3       	std	Y+32, r25	; 0x20
    1c6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	89 a1       	ldd	r24, Y+33	; 0x21
    1c72:	9a a1       	ldd	r25, Y+34	; 0x22
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9a a3       	std	Y+34, r25	; 0x22
    1c78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <LCD_sendCommand+0x4ca>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <LCD_sendCommand+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	6b a1       	ldd	r22, Y+35	; 0x23
    1c86:	7c a1       	ldd	r23, Y+36	; 0x24
    1c88:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9a a3       	std	Y+34, r25	; 0x22
    1c96:	89 a3       	std	Y+33, r24	; 0x21
    1c98:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_sendCommand+0x512>
    1ca8:	9e 8f       	std	Y+30, r25	; 0x1e
    1caa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH); /* Enable LCD E=1 */
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    1cc0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc2:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	55 e4       	ldi	r21, 0x45	; 69
    1cd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8d 8b       	std	Y+21, r24	; 0x15
    1ce0:	9e 8b       	std	Y+22, r25	; 0x16
    1ce2:	af 8b       	std	Y+23, r26	; 0x17
    1ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_sendCommand+0x576>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 8b       	std	Y+20, r25	; 0x14
    1d04:	8b 8b       	std	Y+19, r24	; 0x13
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_sendCommand+0x5f4>
	else if (__tmp > 65535)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_sendCommand+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_sendCommand+0x5d6>
    1d4a:	80 e9       	ldi	r24, 0x90	; 144
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	9a 8b       	std	Y+18, r25	; 0x12
    1d50:	89 8b       	std	Y+17, r24	; 0x11
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_sendCommand+0x5c4>
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_sendCommand+0x5b8>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_sendCommand+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	98 89       	ldd	r25, Y+16	; 0x10
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_sendCommand+0x600>
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Instruction, 0));
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	eb 5a       	subi	r30, 0xAB	; 171
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 81       	ld	r24, Z
    1da2:	98 2f       	mov	r25, r24
    1da4:	91 70       	andi	r25, 0x01	; 1
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	63 e0       	ldi	r22, 0x03	; 3
    1daa:	49 2f       	mov	r20, r25
    1dac:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Instruction, 1));
    1db0:	fe 01       	movw	r30, r28
    1db2:	eb 5a       	subi	r30, 0xAB	; 171
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	82 70       	andi	r24, 0x02	; 2
    1dbe:	90 70       	andi	r25, 0x00	; 0
    1dc0:	95 95       	asr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	64 e0       	ldi	r22, 0x04	; 4
    1dca:	49 2f       	mov	r20, r25
    1dcc:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Instruction, 2));
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	eb 5a       	subi	r30, 0xAB	; 171
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	84 70       	andi	r24, 0x04	; 4
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	95 95       	asr	r25
    1de2:	87 95       	ror	r24
    1de4:	95 95       	asr	r25
    1de6:	87 95       	ror	r24
    1de8:	98 2f       	mov	r25, r24
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	49 2f       	mov	r20, r25
    1df0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Instruction, 3));
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 5a       	subi	r30, 0xAB	; 171
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	88 70       	andi	r24, 0x08	; 8
    1e02:	90 70       	andi	r25, 0x00	; 0
    1e04:	95 95       	asr	r25
    1e06:	87 95       	ror	r24
    1e08:	95 95       	asr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	95 95       	asr	r25
    1e0e:	87 95       	ror	r24
    1e10:	98 2f       	mov	r25, r24
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	66 e0       	ldi	r22, 0x06	; 6
    1e16:	49 2f       	mov	r20, r25
    1e18:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e8       	ldi	r26, 0x80	; 128
    1e22:	bf e3       	ldi	r27, 0x3F	; 63
    1e24:	8b 87       	std	Y+11, r24	; 0x0b
    1e26:	9c 87       	std	Y+12, r25	; 0x0c
    1e28:	ad 87       	std	Y+13, r26	; 0x0d
    1e2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a e7       	ldi	r20, 0x7A	; 122
    1e3a:	55 e4       	ldi	r21, 0x45	; 69
    1e3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8f 83       	std	Y+7, r24	; 0x07
    1e46:	98 87       	std	Y+8, r25	; 0x08
    1e48:	a9 87       	std	Y+9, r26	; 0x09
    1e4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <LCD_sendCommand+0x6dc>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <LCD_sendCommand+0x75a>
	else if (__tmp > 65535)
    1e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e70:	78 85       	ldd	r23, Y+8	; 0x08
    1e72:	89 85       	ldd	r24, Y+9	; 0x09
    1e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <LCD_sendCommand+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <LCD_sendCommand+0x73c>
    1eb0:	80 e9       	ldi	r24, 0x90	; 144
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_sendCommand+0x72a>
    1ec0:	9c 83       	std	Y+4, r25	; 0x04
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <LCD_sendCommand+0x71e>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <LCD_sendCommand+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_sendCommand+0x766>
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	62 e0       	ldi	r22, 0x02	; 2
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
#endif
}
    1f0a:	cb 5a       	subi	r28, 0xAB	; 171
    1f0c:	df 4f       	sbci	r29, 0xFF	; 255
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <LCD_displayCharacter>:
 * 1. Set RS pin
 * 2. Set enable pin
 * 3. send data
 * 4. clear enable pin
 */
void LCD_displayCharacter(uint8 data) {
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	c5 55       	subi	r28, 0x55	; 85
    1f30:	d0 40       	sbci	r29, 0x00	; 0
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	eb 5a       	subi	r30, 0xAB	; 171
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 83       	st	Z, r24

	GPIO_writePin(LCD_CTRL_PORT, LCD_RS, LOGIC_HIGH);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ef 5a       	subi	r30, 0xAF	; 175
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e8       	ldi	r26, 0x80	; 128
    1f5a:	bf e3       	ldi	r27, 0x3F	; 63
    1f5c:	80 83       	st	Z, r24
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	a2 83       	std	Z+2, r26	; 0x02
    1f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	8e 01       	movw	r16, r28
    1f66:	03 5b       	subi	r16, 0xB3	; 179
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ef 5a       	subi	r30, 0xAF	; 175
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	55 e4       	ldi	r21, 0x45	; 69
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	f8 01       	movw	r30, r16
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f92:	fe 01       	movw	r30, r28
    1f94:	e3 5b       	subi	r30, 0xB3	; 179
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	44 f4       	brge	.+16     	; 0x1fc0 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e5 5b       	subi	r30, 0xB5	; 181
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	64 c0       	rjmp	.+200    	; 0x2088 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e3 5b       	subi	r30, 0xB3	; 179
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <LCD_displayCharacter+0xbe>
    1fde:	43 c0       	rjmp	.+134    	; 0x2066 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	ef 5a       	subi	r30, 0xAF	; 175
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8e 01       	movw	r16, r28
    2000:	05 5b       	subi	r16, 0xB5	; 181
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	1f c0       	rjmp	.+62     	; 0x2056 <LCD_displayCharacter+0x134>
    2018:	fe 01       	movw	r30, r28
    201a:	e7 5b       	subi	r30, 0xB7	; 183
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 e9       	ldi	r24, 0x90	; 144
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	fe 01       	movw	r30, r28
    2028:	e7 5b       	subi	r30, 0xB7	; 183
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_displayCharacter+0x10e>
    2034:	fe 01       	movw	r30, r28
    2036:	e7 5b       	subi	r30, 0xB7	; 183
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	de 01       	movw	r26, r28
    2040:	a5 5b       	subi	r26, 0xB5	; 181
    2042:	bf 4f       	sbci	r27, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	e5 5b       	subi	r30, 0xB5	; 181
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	9c 93       	st	X, r25
    2054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	fe 01       	movw	r30, r28
    2058:	e5 5b       	subi	r30, 0xB5	; 181
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	d1 f6       	brne	.-76     	; 0x2018 <LCD_displayCharacter+0xf6>
    2064:	27 c0       	rjmp	.+78     	; 0x20b4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	8e 01       	movw	r16, r28
    2068:	05 5b       	subi	r16, 0xB5	; 181
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	e3 5b       	subi	r30, 0xB3	; 179
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	de 01       	movw	r26, r28
    208a:	a9 5b       	subi	r26, 0xB9	; 185
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e5 5b       	subi	r30, 0xB5	; 181
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	8d 93       	st	X+, r24
    209a:	9c 93       	st	X, r25
    209c:	fe 01       	movw	r30, r28
    209e:	e9 5b       	subi	r30, 0xB9	; 185
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_displayCharacter+0x184>
    20aa:	fe 01       	movw	r30, r28
    20ac:	e9 5b       	subi	r30, 0xB9	; 185
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_Mode==4)
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH); /* Enable LCD E=1 */
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    20be:	fe 01       	movw	r30, r28
    20c0:	ed 5b       	subi	r30, 0xBD	; 189
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e8       	ldi	r26, 0x80	; 128
    20ca:	bf e3       	ldi	r27, 0x3F	; 63
    20cc:	80 83       	st	Z, r24
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	a2 83       	std	Z+2, r26	; 0x02
    20d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	8e 01       	movw	r16, r28
    20d6:	01 5c       	subi	r16, 0xC1	; 193
    20d8:	1f 4f       	sbci	r17, 0xFF	; 255
    20da:	fe 01       	movw	r30, r28
    20dc:	ed 5b       	subi	r30, 0xBD	; 189
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a e7       	ldi	r20, 0x7A	; 122
    20ee:	55 e4       	ldi	r21, 0x45	; 69
    20f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	f8 01       	movw	r30, r16
    20fa:	80 83       	st	Z, r24
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	a2 83       	std	Z+2, r26	; 0x02
    2100:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2102:	fe 01       	movw	r30, r28
    2104:	ff 96       	adiw	r30, 0x3f	; 63
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <LCD_displayCharacter+0x206>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9e af       	std	Y+62, r25	; 0x3e
    2124:	8d af       	std	Y+61, r24	; 0x3d
    2126:	46 c0       	rjmp	.+140    	; 0x21b4 <LCD_displayCharacter+0x292>
	else if (__tmp > 65535)
    2128:	fe 01       	movw	r30, r28
    212a:	ff 96       	adiw	r30, 0x3f	; 63
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	64 f5       	brge	.+88     	; 0x219c <LCD_displayCharacter+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	fe 01       	movw	r30, r28
    2146:	ed 5b       	subi	r30, 0xBD	; 189
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e af       	std	Y+62, r25	; 0x3e
    2170:	8d af       	std	Y+61, r24	; 0x3d
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <LCD_displayCharacter+0x270>
    2174:	80 e9       	ldi	r24, 0x90	; 144
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	9c af       	std	Y+60, r25	; 0x3c
    217a:	8b af       	std	Y+59, r24	; 0x3b
    217c:	8b ad       	ldd	r24, Y+59	; 0x3b
    217e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_displayCharacter+0x25e>
    2184:	9c af       	std	Y+60, r25	; 0x3c
    2186:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	8d ad       	ldd	r24, Y+61	; 0x3d
    218a:	9e ad       	ldd	r25, Y+62	; 0x3e
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9e af       	std	Y+62, r25	; 0x3e
    2190:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	8d ad       	ldd	r24, Y+61	; 0x3d
    2194:	9e ad       	ldd	r25, Y+62	; 0x3e
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <LCD_displayCharacter+0x252>
    219a:	16 c0       	rjmp	.+44     	; 0x21c8 <LCD_displayCharacter+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	fe 01       	movw	r30, r28
    219e:	ff 96       	adiw	r30, 0x3f	; 63
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9e af       	std	Y+62, r25	; 0x3e
    21b2:	8d af       	std	Y+61, r24	; 0x3d
    21b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    21b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    21b8:	9a af       	std	Y+58, r25	; 0x3a
    21ba:	89 af       	std	Y+57, r24	; 0x39
    21bc:	89 ad       	ldd	r24, Y+57	; 0x39
    21be:	9a ad       	ldd	r25, Y+58	; 0x3a
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_displayCharacter+0x29e>
    21c4:	9a af       	std	Y+58, r25	; 0x3a
    21c6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePin(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(data, 4));
    21c8:	fe 01       	movw	r30, r28
    21ca:	eb 5a       	subi	r30, 0xAB	; 171
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	80 71       	andi	r24, 0x10	; 16
    21d6:	90 70       	andi	r25, 0x00	; 0
    21d8:	95 95       	asr	r25
    21da:	87 95       	ror	r24
    21dc:	95 95       	asr	r25
    21de:	87 95       	ror	r24
    21e0:	95 95       	asr	r25
    21e2:	87 95       	ror	r24
    21e4:	95 95       	asr	r25
    21e6:	87 95       	ror	r24
    21e8:	98 2f       	mov	r25, r24
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	63 e0       	ldi	r22, 0x03	; 3
    21ee:	49 2f       	mov	r20, r25
    21f0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(data, 5));
    21f4:	fe 01       	movw	r30, r28
    21f6:	eb 5a       	subi	r30, 0xAB	; 171
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	80 72       	andi	r24, 0x20	; 32
    2202:	90 70       	andi	r25, 0x00	; 0
    2204:	95 95       	asr	r25
    2206:	87 95       	ror	r24
    2208:	95 95       	asr	r25
    220a:	87 95       	ror	r24
    220c:	95 95       	asr	r25
    220e:	87 95       	ror	r24
    2210:	95 95       	asr	r25
    2212:	87 95       	ror	r24
    2214:	95 95       	asr	r25
    2216:	87 95       	ror	r24
    2218:	98 2f       	mov	r25, r24
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	64 e0       	ldi	r22, 0x04	; 4
    221e:	49 2f       	mov	r20, r25
    2220:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(data, 6));
    2224:	fe 01       	movw	r30, r28
    2226:	eb 5a       	subi	r30, 0xAB	; 171
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	80 74       	andi	r24, 0x40	; 64
    2232:	90 70       	andi	r25, 0x00	; 0
    2234:	08 2e       	mov	r0, r24
    2236:	89 2f       	mov	r24, r25
    2238:	00 0c       	add	r0, r0
    223a:	88 1f       	adc	r24, r24
    223c:	99 0b       	sbc	r25, r25
    223e:	00 0c       	add	r0, r0
    2240:	88 1f       	adc	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	98 2f       	mov	r25, r24
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	65 e0       	ldi	r22, 0x05	; 5
    224a:	49 2f       	mov	r20, r25
    224c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(data, 7));
    2250:	fe 01       	movw	r30, r28
    2252:	eb 5a       	subi	r30, 0xAB	; 171
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	98 2f       	mov	r25, r24
    225a:	99 1f       	adc	r25, r25
    225c:	99 27       	eor	r25, r25
    225e:	99 1f       	adc	r25, r25
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	66 e0       	ldi	r22, 0x06	; 6
    2264:	49 2f       	mov	r20, r25
    2266:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e8       	ldi	r26, 0x80	; 128
    2270:	bf e3       	ldi	r27, 0x3F	; 63
    2272:	8d ab       	std	Y+53, r24	; 0x35
    2274:	9e ab       	std	Y+54, r25	; 0x36
    2276:	af ab       	std	Y+55, r26	; 0x37
    2278:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6d a9       	ldd	r22, Y+53	; 0x35
    227c:	7e a9       	ldd	r23, Y+54	; 0x36
    227e:	8f a9       	ldd	r24, Y+55	; 0x37
    2280:	98 ad       	ldd	r25, Y+56	; 0x38
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	55 e4       	ldi	r21, 0x45	; 69
    228a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	89 ab       	std	Y+49, r24	; 0x31
    2294:	9a ab       	std	Y+50, r25	; 0x32
    2296:	ab ab       	std	Y+51, r26	; 0x33
    2298:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    229a:	69 a9       	ldd	r22, Y+49	; 0x31
    229c:	7a a9       	ldd	r23, Y+50	; 0x32
    229e:	8b a9       	ldd	r24, Y+51	; 0x33
    22a0:	9c a9       	ldd	r25, Y+52	; 0x34
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_displayCharacter+0x39a>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	98 ab       	std	Y+48, r25	; 0x30
    22b8:	8f a7       	std	Y+47, r24	; 0x2f
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_displayCharacter+0x418>
	else if (__tmp > 65535)
    22bc:	69 a9       	ldd	r22, Y+49	; 0x31
    22be:	7a a9       	ldd	r23, Y+50	; 0x32
    22c0:	8b a9       	ldd	r24, Y+51	; 0x33
    22c2:	9c a9       	ldd	r25, Y+52	; 0x34
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_displayCharacter+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6d a9       	ldd	r22, Y+53	; 0x35
    22d6:	7e a9       	ldd	r23, Y+54	; 0x36
    22d8:	8f a9       	ldd	r24, Y+55	; 0x37
    22da:	98 ad       	ldd	r25, Y+56	; 0x38
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	98 ab       	std	Y+48, r25	; 0x30
    22fa:	8f a7       	std	Y+47, r24	; 0x2f
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_displayCharacter+0x3fa>
    22fe:	80 e9       	ldi	r24, 0x90	; 144
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	9e a7       	std	Y+46, r25	; 0x2e
    2304:	8d a7       	std	Y+45, r24	; 0x2d
    2306:	8d a5       	ldd	r24, Y+45	; 0x2d
    2308:	9e a5       	ldd	r25, Y+46	; 0x2e
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_displayCharacter+0x3e8>
    230e:	9e a7       	std	Y+46, r25	; 0x2e
    2310:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	8f a5       	ldd	r24, Y+47	; 0x2f
    2314:	98 a9       	ldd	r25, Y+48	; 0x30
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	98 ab       	std	Y+48, r25	; 0x30
    231a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	8f a5       	ldd	r24, Y+47	; 0x2f
    231e:	98 a9       	ldd	r25, Y+48	; 0x30
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_displayCharacter+0x3dc>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_displayCharacter+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	69 a9       	ldd	r22, Y+49	; 0x31
    2328:	7a a9       	ldd	r23, Y+50	; 0x32
    232a:	8b a9       	ldd	r24, Y+51	; 0x33
    232c:	9c a9       	ldd	r25, Y+52	; 0x34
    232e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	98 ab       	std	Y+48, r25	; 0x30
    2338:	8f a7       	std	Y+47, r24	; 0x2f
    233a:	8f a5       	ldd	r24, Y+47	; 0x2f
    233c:	98 a9       	ldd	r25, Y+48	; 0x30
    233e:	9c a7       	std	Y+44, r25	; 0x2c
    2340:	8b a7       	std	Y+43, r24	; 0x2b
    2342:	8b a5       	ldd	r24, Y+43	; 0x2b
    2344:	9c a5       	ldd	r25, Y+44	; 0x2c
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_displayCharacter+0x424>
    234a:	9c a7       	std	Y+44, r25	; 0x2c
    234c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	62 e0       	ldi	r22, 0x02	; 2
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e8       	ldi	r26, 0x80	; 128
    235e:	bf e3       	ldi	r27, 0x3F	; 63
    2360:	8f a3       	std	Y+39, r24	; 0x27
    2362:	98 a7       	std	Y+40, r25	; 0x28
    2364:	a9 a7       	std	Y+41, r26	; 0x29
    2366:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6f a1       	ldd	r22, Y+39	; 0x27
    236a:	78 a5       	ldd	r23, Y+40	; 0x28
    236c:	89 a5       	ldd	r24, Y+41	; 0x29
    236e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a e7       	ldi	r20, 0x7A	; 122
    2376:	55 e4       	ldi	r21, 0x45	; 69
    2378:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8b a3       	std	Y+35, r24	; 0x23
    2382:	9c a3       	std	Y+36, r25	; 0x24
    2384:	ad a3       	std	Y+37, r26	; 0x25
    2386:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2388:	6b a1       	ldd	r22, Y+35	; 0x23
    238a:	7c a1       	ldd	r23, Y+36	; 0x24
    238c:	8d a1       	ldd	r24, Y+37	; 0x25
    238e:	9e a1       	ldd	r25, Y+38	; 0x26
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <LCD_displayCharacter+0x488>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9a a3       	std	Y+34, r25	; 0x22
    23a6:	89 a3       	std	Y+33, r24	; 0x21
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <LCD_displayCharacter+0x506>
	else if (__tmp > 65535)
    23aa:	6b a1       	ldd	r22, Y+35	; 0x23
    23ac:	7c a1       	ldd	r23, Y+36	; 0x24
    23ae:	8d a1       	ldd	r24, Y+37	; 0x25
    23b0:	9e a1       	ldd	r25, Y+38	; 0x26
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <LCD_displayCharacter+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6f a1       	ldd	r22, Y+39	; 0x27
    23c4:	78 a5       	ldd	r23, Y+40	; 0x28
    23c6:	89 a5       	ldd	r24, Y+41	; 0x29
    23c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9a a3       	std	Y+34, r25	; 0x22
    23e8:	89 a3       	std	Y+33, r24	; 0x21
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <LCD_displayCharacter+0x4e8>
    23ec:	80 e9       	ldi	r24, 0x90	; 144
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	98 a3       	std	Y+32, r25	; 0x20
    23f2:	8f 8f       	std	Y+31, r24	; 0x1f
    23f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f6:	98 a1       	ldd	r25, Y+32	; 0x20
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_displayCharacter+0x4d6>
    23fc:	98 a3       	std	Y+32, r25	; 0x20
    23fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	89 a1       	ldd	r24, Y+33	; 0x21
    2402:	9a a1       	ldd	r25, Y+34	; 0x22
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9a a3       	std	Y+34, r25	; 0x22
    2408:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	89 a1       	ldd	r24, Y+33	; 0x21
    240c:	9a a1       	ldd	r25, Y+34	; 0x22
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <LCD_displayCharacter+0x4ca>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <LCD_displayCharacter+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6b a1       	ldd	r22, Y+35	; 0x23
    2416:	7c a1       	ldd	r23, Y+36	; 0x24
    2418:	8d a1       	ldd	r24, Y+37	; 0x25
    241a:	9e a1       	ldd	r25, Y+38	; 0x26
    241c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9a a3       	std	Y+34, r25	; 0x22
    2426:	89 a3       	std	Y+33, r24	; 0x21
    2428:	89 a1       	ldd	r24, Y+33	; 0x21
    242a:	9a a1       	ldd	r25, Y+34	; 0x22
    242c:	9e 8f       	std	Y+30, r25	; 0x1e
    242e:	8d 8f       	std	Y+29, r24	; 0x1d
    2430:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2432:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_displayCharacter+0x512>
    2438:	9e 8f       	std	Y+30, r25	; 0x1e
    243a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH); /* Enable LCD E=1 */
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	62 e0       	ldi	r22, 0x02	; 2
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	a0 e8       	ldi	r26, 0x80	; 128
    244c:	bf e3       	ldi	r27, 0x3F	; 63
    244e:	89 8f       	std	Y+25, r24	; 0x19
    2450:	9a 8f       	std	Y+26, r25	; 0x1a
    2452:	ab 8f       	std	Y+27, r26	; 0x1b
    2454:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2456:	69 8d       	ldd	r22, Y+25	; 0x19
    2458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a e7       	ldi	r20, 0x7A	; 122
    2464:	55 e4       	ldi	r21, 0x45	; 69
    2466:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	8d 8b       	std	Y+21, r24	; 0x15
    2470:	9e 8b       	std	Y+22, r25	; 0x16
    2472:	af 8b       	std	Y+23, r26	; 0x17
    2474:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e8       	ldi	r20, 0x80	; 128
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    248a:	88 23       	and	r24, r24
    248c:	2c f4       	brge	.+10     	; 0x2498 <LCD_displayCharacter+0x576>
		__ticks = 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9c 8b       	std	Y+20, r25	; 0x14
    2494:	8b 8b       	std	Y+19, r24	; 0x13
    2496:	3f c0       	rjmp	.+126    	; 0x2516 <LCD_displayCharacter+0x5f4>
	else if (__tmp > 65535)
    2498:	6d 89       	ldd	r22, Y+21	; 0x15
    249a:	7e 89       	ldd	r23, Y+22	; 0x16
    249c:	8f 89       	ldd	r24, Y+23	; 0x17
    249e:	98 8d       	ldd	r25, Y+24	; 0x18
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	4c f5       	brge	.+82     	; 0x2502 <LCD_displayCharacter+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b0:	69 8d       	ldd	r22, Y+25	; 0x19
    24b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e2       	ldi	r20, 0x20	; 32
    24be:	51 e4       	ldi	r21, 0x41	; 65
    24c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	0f c0       	rjmp	.+30     	; 0x24f8 <LCD_displayCharacter+0x5d6>
    24da:	80 e9       	ldi	r24, 0x90	; 144
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	9a 8b       	std	Y+18, r25	; 0x12
    24e0:	89 8b       	std	Y+17, r24	; 0x11
    24e2:	89 89       	ldd	r24, Y+17	; 0x11
    24e4:	9a 89       	ldd	r25, Y+18	; 0x12
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_displayCharacter+0x5c4>
    24ea:	9a 8b       	std	Y+18, r25	; 0x12
    24ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	8b 89       	ldd	r24, Y+19	; 0x13
    24f0:	9c 89       	ldd	r25, Y+20	; 0x14
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	9c 8b       	std	Y+20, r25	; 0x14
    24f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f8:	8b 89       	ldd	r24, Y+19	; 0x13
    24fa:	9c 89       	ldd	r25, Y+20	; 0x14
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	69 f7       	brne	.-38     	; 0x24da <LCD_displayCharacter+0x5b8>
    2500:	14 c0       	rjmp	.+40     	; 0x252a <LCD_displayCharacter+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	6d 89       	ldd	r22, Y+21	; 0x15
    2504:	7e 89       	ldd	r23, Y+22	; 0x16
    2506:	8f 89       	ldd	r24, Y+23	; 0x17
    2508:	98 8d       	ldd	r25, Y+24	; 0x18
    250a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
    2516:	8b 89       	ldd	r24, Y+19	; 0x13
    2518:	9c 89       	ldd	r25, Y+20	; 0x14
    251a:	98 8b       	std	Y+16, r25	; 0x10
    251c:	8f 87       	std	Y+15, r24	; 0x0f
    251e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2520:	98 89       	ldd	r25, Y+16	; 0x10
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_displayCharacter+0x600>
    2526:	98 8b       	std	Y+16, r25	; 0x10
    2528:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(data, 0));
    252a:	fe 01       	movw	r30, r28
    252c:	eb 5a       	subi	r30, 0xAB	; 171
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	98 2f       	mov	r25, r24
    2534:	91 70       	andi	r25, 0x01	; 1
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	63 e0       	ldi	r22, 0x03	; 3
    253a:	49 2f       	mov	r20, r25
    253c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(data, 1));
    2540:	fe 01       	movw	r30, r28
    2542:	eb 5a       	subi	r30, 0xAB	; 171
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	82 70       	andi	r24, 0x02	; 2
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	95 95       	asr	r25
    2552:	87 95       	ror	r24
    2554:	98 2f       	mov	r25, r24
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	64 e0       	ldi	r22, 0x04	; 4
    255a:	49 2f       	mov	r20, r25
    255c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(data, 2));
    2560:	fe 01       	movw	r30, r28
    2562:	eb 5a       	subi	r30, 0xAB	; 171
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	84 70       	andi	r24, 0x04	; 4
    256e:	90 70       	andi	r25, 0x00	; 0
    2570:	95 95       	asr	r25
    2572:	87 95       	ror	r24
    2574:	95 95       	asr	r25
    2576:	87 95       	ror	r24
    2578:	98 2f       	mov	r25, r24
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	65 e0       	ldi	r22, 0x05	; 5
    257e:	49 2f       	mov	r20, r25
    2580:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(data, 3));
    2584:	fe 01       	movw	r30, r28
    2586:	eb 5a       	subi	r30, 0xAB	; 171
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	88 70       	andi	r24, 0x08	; 8
    2592:	90 70       	andi	r25, 0x00	; 0
    2594:	95 95       	asr	r25
    2596:	87 95       	ror	r24
    2598:	95 95       	asr	r25
    259a:	87 95       	ror	r24
    259c:	95 95       	asr	r25
    259e:	87 95       	ror	r24
    25a0:	98 2f       	mov	r25, r24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	66 e0       	ldi	r22, 0x06	; 6
    25a6:	49 2f       	mov	r20, r25
    25a8:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e8       	ldi	r26, 0x80	; 128
    25b2:	bf e3       	ldi	r27, 0x3F	; 63
    25b4:	8b 87       	std	Y+11, r24	; 0x0b
    25b6:	9c 87       	std	Y+12, r25	; 0x0c
    25b8:	ad 87       	std	Y+13, r26	; 0x0d
    25ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25be:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a e7       	ldi	r20, 0x7A	; 122
    25ca:	55 e4       	ldi	r21, 0x45	; 69
    25cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8f 83       	std	Y+7, r24	; 0x07
    25d6:	98 87       	std	Y+8, r25	; 0x08
    25d8:	a9 87       	std	Y+9, r26	; 0x09
    25da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <LCD_displayCharacter+0x6dc>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <LCD_displayCharacter+0x75a>
	else if (__tmp > 65535)
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2612:	18 16       	cp	r1, r24
    2614:	4c f5       	brge	.+82     	; 0x2668 <LCD_displayCharacter+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	6b 85       	ldd	r22, Y+11	; 0x0b
    2618:	7c 85       	ldd	r23, Y+12	; 0x0c
    261a:	8d 85       	ldd	r24, Y+13	; 0x0d
    261c:	9e 85       	ldd	r25, Y+14	; 0x0e
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	0f c0       	rjmp	.+30     	; 0x265e <LCD_displayCharacter+0x73c>
    2640:	80 e9       	ldi	r24, 0x90	; 144
    2642:	91 e0       	ldi	r25, 0x01	; 1
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <LCD_displayCharacter+0x72a>
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f7       	brne	.-38     	; 0x2640 <LCD_displayCharacter+0x71e>
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <LCD_displayCharacter+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_displayCharacter+0x766>
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	62 e0       	ldi	r22, 0x02	; 2
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
#endif
}
    269a:	cb 5a       	subi	r28, 0xAB	; 171
    269c:	df 4f       	sbci	r29, 0xFF	; 255
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	08 95       	ret

000026b2 <LCD_displayString>:
 * Description:
 * Printing string on the LCD
 * Loop on the string
 * print each character with diplayCharacter function
 */
void LCD_displayString(uint8 *data) {
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <LCD_displayString+0x6>
    26b8:	0f 92       	push	r0
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	9b 83       	std	Y+3, r25	; 0x03
    26c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; *(data + i) != '\0'; i++) {
    26c2:	19 82       	std	Y+1, r1	; 0x01
    26c4:	0e c0       	rjmp	.+28     	; 0x26e2 <LCD_displayString+0x30>
		LCD_displayCharacter(*(data + i));
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	9b 81       	ldd	r25, Y+3	; 0x03
    26d0:	fc 01       	movw	r30, r24
    26d2:	e2 0f       	add	r30, r18
    26d4:	f3 1f       	adc	r31, r19
    26d6:	80 81       	ld	r24, Z
    26d8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
 * Loop on the string
 * print each character with diplayCharacter function
 */
void LCD_displayString(uint8 *data) {
	uint8 i;
	for (i = 0; *(data + i) != '\0'; i++) {
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	fc 01       	movw	r30, r24
    26ee:	e2 0f       	add	r30, r18
    26f0:	f3 1f       	adc	r31, r19
    26f2:	80 81       	ld	r24, Z
    26f4:	88 23       	and	r24, r24
    26f6:	39 f7       	brne	.-50     	; 0x26c6 <LCD_displayString+0x14>
		LCD_displayCharacter(*(data + i));
	}
}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <LCD_ClearDisplay>:

void LCD_ClearDisplay() {
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
}
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <LCD_SetCursor>:

void LCD_SetCursor(uint8 row, uint8 col) {
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	00 d0       	rcall	.+0      	; 0x271e <LCD_SetCursor+0x6>
    271e:	00 d0       	rcall	.+0      	; 0x2720 <LCD_SetCursor+0x8>
    2720:	0f 92       	push	r0
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	8a 83       	std	Y+2, r24	; 0x02
    2728:	6b 83       	std	Y+3, r22	; 0x03

	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	3d 83       	std	Y+5, r19	; 0x05
    2732:	2c 83       	std	Y+4, r18	; 0x04
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	9d 81       	ldd	r25, Y+5	; 0x05
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	91 05       	cpc	r25, r1
    273c:	c1 f0       	breq	.+48     	; 0x276e <LCD_SetCursor+0x56>
    273e:	2c 81       	ldd	r18, Y+4	; 0x04
    2740:	3d 81       	ldd	r19, Y+5	; 0x05
    2742:	22 30       	cpi	r18, 0x02	; 2
    2744:	31 05       	cpc	r19, r1
    2746:	2c f4       	brge	.+10     	; 0x2752 <LCD_SetCursor+0x3a>
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9d 81       	ldd	r25, Y+5	; 0x05
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	61 f0       	breq	.+24     	; 0x2768 <LCD_SetCursor+0x50>
    2750:	19 c0       	rjmp	.+50     	; 0x2784 <LCD_SetCursor+0x6c>
    2752:	2c 81       	ldd	r18, Y+4	; 0x04
    2754:	3d 81       	ldd	r19, Y+5	; 0x05
    2756:	22 30       	cpi	r18, 0x02	; 2
    2758:	31 05       	cpc	r19, r1
    275a:	69 f0       	breq	.+26     	; 0x2776 <LCD_SetCursor+0x5e>
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	83 30       	cpi	r24, 0x03	; 3
    2762:	91 05       	cpc	r25, r1
    2764:	61 f0       	breq	.+24     	; 0x277e <LCD_SetCursor+0x66>
    2766:	0e c0       	rjmp	.+28     	; 0x2784 <LCD_SetCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	0b c0       	rjmp	.+22     	; 0x2784 <LCD_SetCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	80 5c       	subi	r24, 0xC0	; 192
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <LCD_SetCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	80 5f       	subi	r24, 0xF0	; 240
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <LCD_SetCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	80 5b       	subi	r24, 0xB0	; 176
    2782:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | 0x80);
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	80 68       	ori	r24, 0x80	; 128
    2788:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <LCD_PrintNum>:

void LCD_PrintNum(sint32 num) {
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	2a 97       	sbiw	r28, 0x0a	; 10
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	6f 83       	std	Y+7, r22	; 0x07
    27b2:	78 87       	std	Y+8, r23	; 0x08
    27b4:	89 87       	std	Y+9, r24	; 0x09
    27b6:	9a 87       	std	Y+10, r25	; 0x0a
	if (num < 0) {
    27b8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ba:	98 85       	ldd	r25, Y+8	; 0x08
    27bc:	a9 85       	ldd	r26, Y+9	; 0x09
    27be:	ba 85       	ldd	r27, Y+10	; 0x0a
    27c0:	bb 23       	and	r27, r27
    27c2:	94 f4       	brge	.+36     	; 0x27e8 <LCD_PrintNum+0x4c>
		LCD_displayCharacter('-');
    27c4:	8d e2       	ldi	r24, 0x2D	; 45
    27c6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
		num = -num;
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	98 85       	ldd	r25, Y+8	; 0x08
    27ce:	a9 85       	ldd	r26, Y+9	; 0x09
    27d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    27d2:	b0 95       	com	r27
    27d4:	a0 95       	com	r26
    27d6:	90 95       	com	r25
    27d8:	81 95       	neg	r24
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	af 4f       	sbci	r26, 0xFF	; 255
    27de:	bf 4f       	sbci	r27, 0xFF	; 255
    27e0:	8f 83       	std	Y+7, r24	; 0x07
    27e2:	98 87       	std	Y+8, r25	; 0x08
    27e4:	a9 87       	std	Y+9, r26	; 0x09
    27e6:	ba 87       	std	Y+10, r27	; 0x0a
	}
	if ((num * 100) % 100 != 0) {
    27e8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ea:	98 85       	ldd	r25, Y+8	; 0x08
    27ec:	a9 85       	ldd	r26, Y+9	; 0x09
    27ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    27f0:	24 e6       	ldi	r18, 0x64	; 100
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <__mulsi3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	24 e6       	ldi	r18, 0x64	; 100
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	a1 05       	cpc	r26, r1
    281c:	b1 05       	cpc	r27, r1
    281e:	41 f1       	breq	.+80     	; 0x2870 <LCD_PrintNum+0xd4>
		LCD_PrintNum((sint32) num);
    2820:	8f 81       	ldd	r24, Y+7	; 0x07
    2822:	98 85       	ldd	r25, Y+8	; 0x08
    2824:	a9 85       	ldd	r26, Y+9	; 0x09
    2826:	ba 85       	ldd	r27, Y+10	; 0x0a
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_PrintNum>
		LCD_displayCharacter('.');
    2830:	8e e2       	ldi	r24, 0x2E	; 46
    2832:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
		LCD_PrintNum((num * 100) % 100);
    2836:	8f 81       	ldd	r24, Y+7	; 0x07
    2838:	98 85       	ldd	r25, Y+8	; 0x08
    283a:	a9 85       	ldd	r26, Y+9	; 0x09
    283c:	ba 85       	ldd	r27, Y+10	; 0x0a
    283e:	24 e6       	ldi	r18, 0x64	; 100
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <__mulsi3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	24 e6       	ldi	r18, 0x64	; 100
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_PrintNum>
    286e:	89 c0       	rjmp	.+274    	; 0x2982 <LCD_PrintNum+0x1e6>
	} else {
		sint32 num1 = num;
    2870:	8f 81       	ldd	r24, Y+7	; 0x07
    2872:	98 85       	ldd	r25, Y+8	; 0x08
    2874:	a9 85       	ldd	r26, Y+9	; 0x09
    2876:	ba 85       	ldd	r27, Y+10	; 0x0a
    2878:	8b 83       	std	Y+3, r24	; 0x03
    287a:	9c 83       	std	Y+4, r25	; 0x04
    287c:	ad 83       	std	Y+5, r26	; 0x05
    287e:	be 83       	std	Y+6, r27	; 0x06
		uint16 L_u8Counter = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	89 83       	std	Y+1, r24	; 0x01
		if (num < 10)
    2888:	8f 81       	ldd	r24, Y+7	; 0x07
    288a:	98 85       	ldd	r25, Y+8	; 0x08
    288c:	a9 85       	ldd	r26, Y+9	; 0x09
    288e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2890:	8a 30       	cpi	r24, 0x0A	; 10
    2892:	91 05       	cpc	r25, r1
    2894:	a1 05       	cpc	r26, r1
    2896:	b1 05       	cpc	r27, r1
    2898:	2c f5       	brge	.+74     	; 0x28e4 <LCD_PrintNum+0x148>
			LCD_displayCharacter(num + '0');
    289a:	8f 81       	ldd	r24, Y+7	; 0x07
    289c:	80 5d       	subi	r24, 0xD0	; 208
    289e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    28a2:	6f c0       	rjmp	.+222    	; 0x2982 <LCD_PrintNum+0x1e6>
		else {
			while (num >= 10) {
				num /= 10;
    28a4:	8f 81       	ldd	r24, Y+7	; 0x07
    28a6:	98 85       	ldd	r25, Y+8	; 0x08
    28a8:	a9 85       	ldd	r26, Y+9	; 0x09
    28aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    28ac:	2a e0       	ldi	r18, 0x0A	; 10
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    28bc:	da 01       	movw	r26, r20
    28be:	c9 01       	movw	r24, r18
    28c0:	8f 83       	std	Y+7, r24	; 0x07
    28c2:	98 87       	std	Y+8, r25	; 0x08
    28c4:	a9 87       	std	Y+9, r26	; 0x09
    28c6:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter *= 10;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	9c 01       	movw	r18, r24
    28ce:	22 0f       	add	r18, r18
    28d0:	33 1f       	adc	r19, r19
    28d2:	c9 01       	movw	r24, r18
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	82 0f       	add	r24, r18
    28de:	93 1f       	adc	r25, r19
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
		sint32 num1 = num;
		uint16 L_u8Counter = 1;
		if (num < 10)
			LCD_displayCharacter(num + '0');
		else {
			while (num >= 10) {
    28e4:	8f 81       	ldd	r24, Y+7	; 0x07
    28e6:	98 85       	ldd	r25, Y+8	; 0x08
    28e8:	a9 85       	ldd	r26, Y+9	; 0x09
    28ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    28ec:	8a 30       	cpi	r24, 0x0A	; 10
    28ee:	91 05       	cpc	r25, r1
    28f0:	a1 05       	cpc	r26, r1
    28f2:	b1 05       	cpc	r27, r1
    28f4:	bc f6       	brge	.-82     	; 0x28a4 <LCD_PrintNum+0x108>
    28f6:	40 c0       	rjmp	.+128    	; 0x2978 <LCD_PrintNum+0x1dc>
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
				num = num1;
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	ad 81       	ldd	r26, Y+5	; 0x05
    28fe:	be 81       	ldd	r27, Y+6	; 0x06
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	98 87       	std	Y+8, r25	; 0x08
    2904:	a9 87       	std	Y+9, r26	; 0x09
    2906:	ba 87       	std	Y+10, r27	; 0x0a
				num1 = num % L_u8Counter;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	9c 01       	movw	r18, r24
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	8f 81       	ldd	r24, Y+7	; 0x07
    2914:	98 85       	ldd	r25, Y+8	; 0x08
    2916:	a9 85       	ldd	r26, Y+9	; 0x09
    2918:	ba 85       	ldd	r27, Y+10	; 0x0a
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8b 83       	std	Y+3, r24	; 0x03
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	ad 83       	std	Y+5, r26	; 0x05
    292c:	be 83       	std	Y+6, r27	; 0x06
				num /= L_u8Counter;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	9c 01       	movw	r18, r24
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	8f 81       	ldd	r24, Y+7	; 0x07
    293a:	98 85       	ldd	r25, Y+8	; 0x08
    293c:	a9 85       	ldd	r26, Y+9	; 0x09
    293e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2948:	da 01       	movw	r26, r20
    294a:	c9 01       	movw	r24, r18
    294c:	8f 83       	std	Y+7, r24	; 0x07
    294e:	98 87       	std	Y+8, r25	; 0x08
    2950:	a9 87       	std	Y+9, r26	; 0x09
    2952:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter /= 10;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	2a e0       	ldi	r18, 0x0A	; 10
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	b9 01       	movw	r22, r18
    295e:	0e 94 9d 2a 	call	0x553a	; 0x553a <__udivmodhi4>
    2962:	cb 01       	movw	r24, r22
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
				LCD_PrintNum(num);
    2968:	8f 81       	ldd	r24, Y+7	; 0x07
    296a:	98 85       	ldd	r25, Y+8	; 0x08
    296c:	a9 85       	ldd	r26, Y+9	; 0x09
    296e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_PrintNum>
		else {
			while (num >= 10) {
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	09 f0       	breq	.+2      	; 0x2982 <LCD_PrintNum+0x1e6>
    2980:	bb cf       	rjmp	.-138    	; 0x28f8 <LCD_PrintNum+0x15c>
				LCD_PrintNum(num);
			}

		}
	}
}
    2982:	2a 96       	adiw	r28, 0x0a	; 10
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <LCD_PrintNumF>:

void LCD_PrintNumF(float32 num) {
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	2a 97       	sbiw	r28, 0x0a	; 10
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	6f 83       	std	Y+7, r22	; 0x07
    29b2:	78 87       	std	Y+8, r23	; 0x08
    29b4:	89 87       	std	Y+9, r24	; 0x09
    29b6:	9a 87       	std	Y+10, r25	; 0x0a
	if (num < 0) {
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	64 f4       	brge	.+24     	; 0x29e8 <LCD_PrintNumF+0x54>
		LCD_displayCharacter('-');
    29d0:	8d e2       	ldi	r24, 0x2D	; 45
    29d2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
		num = -num;
    29d6:	8f 81       	ldd	r24, Y+7	; 0x07
    29d8:	98 85       	ldd	r25, Y+8	; 0x08
    29da:	a9 85       	ldd	r26, Y+9	; 0x09
    29dc:	ba 85       	ldd	r27, Y+10	; 0x0a
    29de:	b0 58       	subi	r27, 0x80	; 128
    29e0:	8f 83       	std	Y+7, r24	; 0x07
    29e2:	98 87       	std	Y+8, r25	; 0x08
    29e4:	a9 87       	std	Y+9, r26	; 0x09
    29e6:	ba 87       	std	Y+10, r27	; 0x0a
	}
	if ((sint32)(num * 100) % 100 != 0) {
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	48 ec       	ldi	r20, 0xC8	; 200
    29f6:	52 e4       	ldi	r21, 0x42	; 66
    29f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	24 e6       	ldi	r18, 0x64	; 100
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	a1 05       	cpc	r26, r1
    2a24:	b1 05       	cpc	r27, r1
    2a26:	e1 f1       	breq	.+120    	; 0x2aa0 <LCD_PrintNumF+0x10c>
		LCD_PrintNumF((sint32) num);
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_PrintNumF>
		LCD_displayCharacter('.');
    2a4c:	8e e2       	ldi	r24, 0x2E	; 46
    2a4e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
		LCD_PrintNumF((sint32)(num * 100) % 100);
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	48 ec       	ldi	r20, 0xC8	; 200
    2a60:	52 e4       	ldi	r21, 0x42	; 66
    2a62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	24 e6       	ldi	r18, 0x64	; 100
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_PrintNumF>
    2a9e:	af c0       	rjmp	.+350    	; 0x2bfe <LCD_PrintNumF+0x26a>
	} else {
		float32 num1 = num;
    2aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa2:	98 85       	ldd	r25, Y+8	; 0x08
    2aa4:	a9 85       	ldd	r26, Y+9	; 0x09
    2aa6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2aa8:	8b 83       	std	Y+3, r24	; 0x03
    2aaa:	9c 83       	std	Y+4, r25	; 0x04
    2aac:	ad 83       	std	Y+5, r26	; 0x05
    2aae:	be 83       	std	Y+6, r27	; 0x06
		uint16 L_u8Counter = 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
		if (num < 10)
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	9c f5       	brge	.+102    	; 0x2b36 <LCD_PrintNumF+0x1a2>
			LCD_displayCharacter(num + '0');
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e4       	ldi	r20, 0x40	; 64
    2ade:	52 e4       	ldi	r21, 0x42	; 66
    2ae0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    2af8:	82 c0       	rjmp	.+260    	; 0x2bfe <LCD_PrintNumF+0x26a>
		else {
			while (num >= 10) {
				num /= 10;
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e2       	ldi	r20, 0x20	; 32
    2b08:	51 e4       	ldi	r21, 0x41	; 65
    2b0a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8f 83       	std	Y+7, r24	; 0x07
    2b14:	98 87       	std	Y+8, r25	; 0x08
    2b16:	a9 87       	std	Y+9, r26	; 0x09
    2b18:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter *= 10;
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	9c 01       	movw	r18, r24
    2b20:	22 0f       	add	r18, r18
    2b22:	33 1f       	adc	r19, r19
    2b24:	c9 01       	movw	r24, r18
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	82 0f       	add	r24, r18
    2b30:	93 1f       	adc	r25, r19
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
		float32 num1 = num;
		uint16 L_u8Counter = 1;
		if (num < 10)
			LCD_displayCharacter(num + '0');
		else {
			while (num >= 10) {
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	0e 94 4d 04 	call	0x89a	; 0x89a <__gesf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	b4 f6       	brge	.-84     	; 0x2afa <LCD_PrintNumF+0x166>
    2b4e:	52 c0       	rjmp	.+164    	; 0x2bf4 <LCD_PrintNumF+0x260>
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
				num = num1;
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	ad 81       	ldd	r26, Y+5	; 0x05
    2b56:	be 81       	ldd	r27, Y+6	; 0x06
    2b58:	8f 83       	std	Y+7, r24	; 0x07
    2b5a:	98 87       	std	Y+8, r25	; 0x08
    2b5c:	a9 87       	std	Y+9, r26	; 0x09
    2b5e:	ba 87       	std	Y+10, r27	; 0x0a
				num1 =(sint32) num % L_u8Counter;
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2b6c:	7b 01       	movw	r14, r22
    2b6e:	8c 01       	movw	r16, r24
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	9c 01       	movw	r18, r24
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <__divmodsi4>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8b 83       	std	Y+3, r24	; 0x03
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	ad 83       	std	Y+5, r26	; 0x05
    2b98:	be 83       	std	Y+6, r27	; 0x06
				num /= L_u8Counter;
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	cc 01       	movw	r24, r24
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    2bac:	9b 01       	movw	r18, r22
    2bae:	ac 01       	movw	r20, r24
    2bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb2:	78 85       	ldd	r23, Y+8	; 0x08
    2bb4:	89 85       	ldd	r24, Y+9	; 0x09
    2bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	8f 83       	std	Y+7, r24	; 0x07
    2bc2:	98 87       	std	Y+8, r25	; 0x08
    2bc4:	a9 87       	std	Y+9, r26	; 0x09
    2bc6:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter /= 10;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	2a e0       	ldi	r18, 0x0A	; 10
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	b9 01       	movw	r22, r18
    2bd2:	0e 94 9d 2a 	call	0x553a	; 0x553a <__udivmodhi4>
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	89 83       	std	Y+1, r24	; 0x01
				LCD_PrintNum(num);
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_PrintNum>
		else {
			while (num >= 10) {
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <LCD_PrintNumF+0x26a>
    2bfc:	a9 cf       	rjmp	.-174    	; 0x2b50 <LCD_PrintNumF+0x1bc>
				LCD_PrintNum(num);
			}

		}
	}
}
    2bfe:	2a 96       	adiw	r28, 0x0a	; 10
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	08 95       	ret

00002c18 <LCD_createCustomCharacter>:

void LCD_createCustomCharacter(uint8 customValue[],uint8 index){
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <LCD_createCustomCharacter+0x6>
    2c1e:	0f 92       	push	r0
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	6b 83       	std	Y+3, r22	; 0x03
	LCD_sendCommand(0x40 + index * 8);
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	08 96       	adiw	r24, 0x08	; 8
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
		for (index = 0; index < 8; index++) {
    2c42:	1b 82       	std	Y+3, r1	; 0x03
    2c44:	0e c0       	rjmp	.+28     	; 0x2c62 <LCD_createCustomCharacter+0x4a>
			LCD_displayCharacter(customValue[index]);
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	fc 01       	movw	r30, r24
    2c52:	e2 0f       	add	r30, r18
    2c54:	f3 1f       	adc	r31, r19
    2c56:	80 81       	ld	r24, Z
    2c58:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
	}
}

void LCD_createCustomCharacter(uint8 customValue[],uint8 index){
	LCD_sendCommand(0x40 + index * 8);
		for (index = 0; index < 8; index++) {
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	88 30       	cpi	r24, 0x08	; 8
    2c66:	78 f3       	brcs	.-34     	; 0x2c46 <LCD_createCustomCharacter+0x2e>
			LCD_displayCharacter(customValue[index]);
		}
		LCD_sendCommand(0x80);
    2c68:	80 e8       	ldi	r24, 0x80	; 128
    2c6a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCD_sendCommand>
}
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LCD_displayCustomCharacter>:
void LCD_displayCustomCharacter(uint8 index){
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	89 83       	std	Y+1, r24	; 0x01
	if (index < 8) {
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	88 30       	cpi	r24, 0x08	; 8
    2c8a:	18 f4       	brcc	.+6      	; 0x2c92 <LCD_displayCustomCharacter+0x18>
		LCD_displayCharacter(index);
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
		}
}
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void) {
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	60 97       	sbiw	r28, 0x10	; 16
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	64 e0       	ldi	r22, 0x04	; 4
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	65 e0       	ldi	r22, 0x05	; 5
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	66 e0       	ldi	r22, 0x06	; 6
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	67 e0       	ldi	r22, 0x07	; 7
    2cd0:	40 e0       	ldi	r20, 0x00	; 0
    2cd2:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    2cd6:	83 e0       	ldi	r24, 0x03	; 3
    2cd8:	62 e0       	ldi	r22, 0x02	; 2
    2cda:	40 e0       	ldi	r20, 0x00	; 0
    2cdc:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	63 e0       	ldi	r22, 0x03	; 3
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	64 e0       	ldi	r22, 0x04	; 4
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	65 e0       	ldi	r22, 0x05	; 5
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) {
    2cfe:	1f 86       	std	Y+15, r1	; 0x0f
    2d00:	bd c0       	rjmp	.+378    	; 0x2e7c <KEYPAD_getPressedKey+0x1e2>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d04:	98 2f       	mov	r25, r24
    2d06:	9c 5f       	subi	r25, 0xFC	; 252
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	69 2f       	mov	r22, r25
    2d0c:	41 e0       	ldi	r20, 0x01	; 1
    2d0e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d14:	98 2f       	mov	r25, r24
    2d16:	9c 5f       	subi	r25, 0xFC	; 252
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	69 2f       	mov	r22, r25
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);
			for (col = 0; col < KEYPAD_NUM_COLS; col++) {
    2d22:	18 8a       	std	Y+16, r1	; 0x10
    2d24:	2b c0       	rjmp	.+86     	; 0x2d7c <KEYPAD_getPressedKey+0xe2>
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2d26:	88 89       	ldd	r24, Y+16	; 0x10
    2d28:	98 2f       	mov	r25, r24
    2d2a:	9e 5f       	subi	r25, 0xFE	; 254
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	69 2f       	mov	r22, r25
    2d30:	0e 94 c0 19 	call	0x3380	; 0x3380 <GPIO_readPin>
    2d34:	88 23       	and	r24, r24
    2d36:	f9 f4       	brne	.+62     	; 0x2d76 <KEYPAD_getPressedKey+0xdc>
				KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED) {
					while ((GPIO_readPin(KEYPAD_COL_PORT_ID,
    2d38:	88 89       	ldd	r24, Y+16	; 0x10
    2d3a:	98 2f       	mov	r25, r24
    2d3c:	9e 5f       	subi	r25, 0xFE	; 254
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	69 2f       	mov	r22, r25
    2d42:	0e 94 c0 19 	call	0x3380	; 0x3380 <GPIO_readPin>
    2d46:	88 23       	and	r24, r24
    2d48:	b9 f3       	breq	.-18     	; 0x2d38 <KEYPAD_getPressedKey+0x9e>
	#endif
	#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row * KEYPAD_NUM_COLS) + col + 1);
	#else
					return KEYPAD_4x4_adjustKeyNumber(
    2d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	98 2f       	mov	r25, r24
    2d5a:	88 89       	ldd	r24, Y+16	; 0x10
    2d5c:	89 0f       	add	r24, r25
    2d5e:	8f 5f       	subi	r24, 0xFF	; 255
    2d60:	0e 94 43 17 	call	0x2e86	; 0x2e86 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    2d64:	60 96       	adiw	r28, 0x10	; 16
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);
			for (col = 0; col < KEYPAD_NUM_COLS; col++) {
    2d76:	88 89       	ldd	r24, Y+16	; 0x10
    2d78:	8f 5f       	subi	r24, 0xFF	; 255
    2d7a:	88 8b       	std	Y+16, r24	; 0x10
    2d7c:	88 89       	ldd	r24, Y+16	; 0x10
    2d7e:	84 30       	cpi	r24, 0x04	; 4
    2d80:	90 f2       	brcs	.-92     	; 0x2d26 <KEYPAD_getPressedKey+0x8c>
#endif
#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2d82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d84:	98 2f       	mov	r25, r24
    2d86:	9c 5f       	subi	r25, 0xFC	; 252
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	69 2f       	mov	r22, r25
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a0 ea       	ldi	r26, 0xA0	; 160
    2d98:	b0 e4       	ldi	r27, 0x40	; 64
    2d9a:	8b 87       	std	Y+11, r24	; 0x0b
    2d9c:	9c 87       	std	Y+12, r25	; 0x0c
    2d9e:	ad 87       	std	Y+13, r26	; 0x0d
    2da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a e7       	ldi	r20, 0x7A	; 122
    2db0:	55 e4       	ldi	r21, 0x45	; 69
    2db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8f 83       	std	Y+7, r24	; 0x07
    2dbc:	98 87       	std	Y+8, r25	; 0x08
    2dbe:	a9 87       	std	Y+9, r26	; 0x09
    2dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc4:	78 85       	ldd	r23, Y+8	; 0x08
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <KEYPAD_getPressedKey+0x14a>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <KEYPAD_getPressedKey+0x1c8>
	else if (__tmp > 65535)
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <KEYPAD_getPressedKey+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <KEYPAD_getPressedKey+0x1aa>
    2e26:	80 e9       	ldi	r24, 0x90	; 144
    2e28:	91 e0       	ldi	r25, 0x01	; 1
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	9c 81       	ldd	r25, Y+4	; 0x04
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <KEYPAD_getPressedKey+0x198>
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <KEYPAD_getPressedKey+0x18c>
    2e4c:	14 c0       	rjmp	.+40     	; 0x2e76 <KEYPAD_getPressedKey+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e50:	78 85       	ldd	r23, Y+8	; 0x08
    2e52:	89 85       	ldd	r24, Y+9	; 0x09
    2e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <KEYPAD_getPressedKey+0x1d4>
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) {
    2e76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e78:	8f 5f       	subi	r24, 0xFF	; 255
    2e7a:	8f 87       	std	Y+15, r24	; 0x0f
    2e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7e:	84 30       	cpi	r24, 0x04	; 4
    2e80:	08 f4       	brcc	.+2      	; 0x2e84 <KEYPAD_getPressedKey+0x1ea>
    2e82:	3f cf       	rjmp	.-386    	; 0x2d02 <KEYPAD_getPressedKey+0x68>
    2e84:	3c cf       	rjmp	.-392    	; 0x2cfe <KEYPAD_getPressedKey+0x64>

00002e86 <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <KEYPAD_4x4_adjustKeyNumber+0x6>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0x8>
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2e94:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number) {
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	28 2f       	mov	r18, r24
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	3c 83       	std	Y+4, r19	; 0x04
    2e9e:	2b 83       	std	Y+3, r18	; 0x03
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	88 30       	cpi	r24, 0x08	; 8
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <KEYPAD_4x4_adjustKeyNumber+0x26>
    2eaa:	70 c0       	rjmp	.+224    	; 0x2f8c <KEYPAD_4x4_adjustKeyNumber+0x106>
    2eac:	2b 81       	ldd	r18, Y+3	; 0x03
    2eae:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb0:	29 30       	cpi	r18, 0x09	; 9
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	5c f5       	brge	.+86     	; 0x2f0c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	84 30       	cpi	r24, 0x04	; 4
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2ec0:	59 c0       	rjmp	.+178    	; 0x2f74 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec6:	25 30       	cpi	r18, 0x05	; 5
    2ec8:	31 05       	cpc	r19, r1
    2eca:	9c f4       	brge	.+38     	; 0x2ef2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	82 30       	cpi	r24, 0x02	; 2
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2ed6:	48 c0       	rjmp	.+144    	; 0x2f68 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eda:	3c 81       	ldd	r19, Y+4	; 0x04
    2edc:	23 30       	cpi	r18, 0x03	; 3
    2ede:	31 05       	cpc	r19, r1
    2ee0:	0c f0       	brlt	.+2      	; 0x2ee4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2ee2:	45 c0       	rjmp	.+138    	; 0x2f6e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	91 05       	cpc	r25, r1
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2eee:	39 c0       	rjmp	.+114    	; 0x2f62 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2ef0:	67 c0       	rjmp	.+206    	; 0x2fc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef6:	26 30       	cpi	r18, 0x06	; 6
    2ef8:	31 05       	cpc	r19, r1
    2efa:	09 f4       	brne	.+2      	; 0x2efe <KEYPAD_4x4_adjustKeyNumber+0x78>
    2efc:	41 c0       	rjmp	.+130    	; 0x2f80 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	87 30       	cpi	r24, 0x07	; 7
    2f04:	91 05       	cpc	r25, r1
    2f06:	0c f0       	brlt	.+2      	; 0x2f0a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2f08:	3e c0       	rjmp	.+124    	; 0x2f86 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2f0a:	37 c0       	rjmp	.+110    	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f10:	2c 30       	cpi	r18, 0x0C	; 12
    2f12:	31 05       	cpc	r19, r1
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2f16:	46 c0       	rjmp	.+140    	; 0x2fa4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	8d 30       	cpi	r24, 0x0D	; 13
    2f1e:	91 05       	cpc	r25, r1
    2f20:	5c f4       	brge	.+22     	; 0x2f38 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2f22:	2b 81       	ldd	r18, Y+3	; 0x03
    2f24:	3c 81       	ldd	r19, Y+4	; 0x04
    2f26:	2a 30       	cpi	r18, 0x0A	; 10
    2f28:	31 05       	cpc	r19, r1
    2f2a:	b1 f1       	breq	.+108    	; 0x2f98 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	8b 30       	cpi	r24, 0x0B	; 11
    2f32:	91 05       	cpc	r25, r1
    2f34:	a4 f5       	brge	.+104    	; 0x2f9e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2f36:	2d c0       	rjmp	.+90     	; 0x2f92 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2f38:	2b 81       	ldd	r18, Y+3	; 0x03
    2f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f3c:	2e 30       	cpi	r18, 0x0E	; 14
    2f3e:	31 05       	cpc	r19, r1
    2f40:	b9 f1       	breq	.+110    	; 0x2fb0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	8e 30       	cpi	r24, 0x0E	; 14
    2f48:	91 05       	cpc	r25, r1
    2f4a:	7c f1       	brlt	.+94     	; 0x2faa <KEYPAD_4x4_adjustKeyNumber+0x124>
    2f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f50:	2f 30       	cpi	r18, 0x0F	; 15
    2f52:	31 05       	cpc	r19, r1
    2f54:	79 f1       	breq	.+94     	; 0x2fb4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	80 31       	cpi	r24, 0x10	; 16
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	69 f1       	breq	.+90     	; 0x2fba <KEYPAD_4x4_adjustKeyNumber+0x134>
    2f60:	2f c0       	rjmp	.+94     	; 0x2fc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1:
		keypad_button = 7;
    2f62:	87 e0       	ldi	r24, 0x07	; 7
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	2e c0       	rjmp	.+92     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    2f68:	88 e0       	ldi	r24, 0x08	; 8
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	2b c0       	rjmp	.+86     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    2f6e:	89 e0       	ldi	r24, 0x09	; 9
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	28 c0       	rjmp	.+80     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '/'; // ASCII Code of %
    2f74:	8f e2       	ldi	r24, 0x2F	; 47
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	25 c0       	rjmp	.+74     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    2f7a:	84 e0       	ldi	r24, 0x04	; 4
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	22 c0       	rjmp	.+68     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    2f80:	85 e0       	ldi	r24, 0x05	; 5
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	1f c0       	rjmp	.+62     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    2f86:	86 e0       	ldi	r24, 0x06	; 6
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	1c c0       	rjmp	.+56     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*'; /* ASCII Code of '*' */
    2f8c:	8a e2       	ldi	r24, 0x2A	; 42
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	19 c0       	rjmp	.+50     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	16 c0       	rjmp	.+44     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2f98:	82 e0       	ldi	r24, 0x02	; 2
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	13 c0       	rjmp	.+38     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	10 c0       	rjmp	.+32     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-'; /* ASCII Code of '-' */
    2fa4:	8d e2       	ldi	r24, 0x2D	; 45
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	0d c0       	rjmp	.+26     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13; /* ASCII of Enter */
    2faa:	8d e0       	ldi	r24, 0x0D	; 13
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	0a c0       	rjmp	.+20     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2fb0:	19 82       	std	Y+1, r1	; 0x01
    2fb2:	08 c0       	rjmp	.+16     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '='; /* ASCII Code of '=' */
    2fb4:	8d e3       	ldi	r24, 0x3D	; 61
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    2fb8:	05 c0       	rjmp	.+10     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+'; /* ASCII Code of '+' */
    2fba:	8b e2       	ldi	r24, 0x2B	; 43
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirectionType direction) {
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <GPIO_setupPinDirection+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <GPIO_setupPinDirection+0x8>
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	6a 83       	std	Y+2, r22	; 0x02
    2fe6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	88 30       	cpi	r24, 0x08	; 8
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <GPIO_setupPinDirection+0x1c>
    2fee:	d5 c0       	rjmp	.+426    	; 0x319a <GPIO_setupPinDirection+0x1c6>
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	84 30       	cpi	r24, 0x04	; 4
    2ff4:	08 f0       	brcs	.+2      	; 0x2ff8 <GPIO_setupPinDirection+0x24>
    2ff6:	d1 c0       	rjmp	.+418    	; 0x319a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	3d 83       	std	Y+5, r19	; 0x05
    3000:	2c 83       	std	Y+4, r18	; 0x04
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	9d 81       	ldd	r25, Y+5	; 0x05
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	91 05       	cpc	r25, r1
    300a:	09 f4       	brne	.+2      	; 0x300e <GPIO_setupPinDirection+0x3a>
    300c:	43 c0       	rjmp	.+134    	; 0x3094 <GPIO_setupPinDirection+0xc0>
    300e:	2c 81       	ldd	r18, Y+4	; 0x04
    3010:	3d 81       	ldd	r19, Y+5	; 0x05
    3012:	22 30       	cpi	r18, 0x02	; 2
    3014:	31 05       	cpc	r19, r1
    3016:	2c f4       	brge	.+10     	; 0x3022 <GPIO_setupPinDirection+0x4e>
    3018:	8c 81       	ldd	r24, Y+4	; 0x04
    301a:	9d 81       	ldd	r25, Y+5	; 0x05
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	71 f0       	breq	.+28     	; 0x303c <GPIO_setupPinDirection+0x68>
    3020:	bc c0       	rjmp	.+376    	; 0x319a <GPIO_setupPinDirection+0x1c6>
    3022:	2c 81       	ldd	r18, Y+4	; 0x04
    3024:	3d 81       	ldd	r19, Y+5	; 0x05
    3026:	22 30       	cpi	r18, 0x02	; 2
    3028:	31 05       	cpc	r19, r1
    302a:	09 f4       	brne	.+2      	; 0x302e <GPIO_setupPinDirection+0x5a>
    302c:	5f c0       	rjmp	.+190    	; 0x30ec <GPIO_setupPinDirection+0x118>
    302e:	8c 81       	ldd	r24, Y+4	; 0x04
    3030:	9d 81       	ldd	r25, Y+5	; 0x05
    3032:	83 30       	cpi	r24, 0x03	; 3
    3034:	91 05       	cpc	r25, r1
    3036:	09 f4       	brne	.+2      	; 0x303a <GPIO_setupPinDirection+0x66>
    3038:	85 c0       	rjmp	.+266    	; 0x3144 <GPIO_setupPinDirection+0x170>
    303a:	af c0       	rjmp	.+350    	; 0x319a <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	81 30       	cpi	r24, 0x01	; 1
    3040:	a1 f4       	brne	.+40     	; 0x306a <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    3042:	aa e3       	ldi	r26, 0x3A	; 58
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	ea e3       	ldi	r30, 0x3A	; 58
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	48 2f       	mov	r20, r24
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	28 2f       	mov	r18, r24
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	02 2e       	mov	r0, r18
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <GPIO_setupPinDirection+0x8c>
    305c:	88 0f       	add	r24, r24
    305e:	99 1f       	adc	r25, r25
    3060:	0a 94       	dec	r0
    3062:	e2 f7       	brpl	.-8      	; 0x305c <GPIO_setupPinDirection+0x88>
    3064:	84 2b       	or	r24, r20
    3066:	8c 93       	st	X, r24
    3068:	98 c0       	rjmp	.+304    	; 0x319a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    306a:	aa e3       	ldi	r26, 0x3A	; 58
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	ea e3       	ldi	r30, 0x3A	; 58
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	48 2f       	mov	r20, r24
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	02 2e       	mov	r0, r18
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <GPIO_setupPinDirection+0xb4>
    3084:	88 0f       	add	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	0a 94       	dec	r0
    308a:	e2 f7       	brpl	.-8      	; 0x3084 <GPIO_setupPinDirection+0xb0>
    308c:	80 95       	com	r24
    308e:	84 23       	and	r24, r20
    3090:	8c 93       	st	X, r24
    3092:	83 c0       	rjmp	.+262    	; 0x319a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	81 30       	cpi	r24, 0x01	; 1
    3098:	a1 f4       	brne	.+40     	; 0x30c2 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    309a:	a7 e3       	ldi	r26, 0x37	; 55
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e7 e3       	ldi	r30, 0x37	; 55
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	48 2f       	mov	r20, r24
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 2e       	mov	r0, r18
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <GPIO_setupPinDirection+0xe4>
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	0a 94       	dec	r0
    30ba:	e2 f7       	brpl	.-8      	; 0x30b4 <GPIO_setupPinDirection+0xe0>
    30bc:	84 2b       	or	r24, r20
    30be:	8c 93       	st	X, r24
    30c0:	6c c0       	rjmp	.+216    	; 0x319a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    30c2:	a7 e3       	ldi	r26, 0x37	; 55
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e7 e3       	ldi	r30, 0x37	; 55
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	48 2f       	mov	r20, r24
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	02 2e       	mov	r0, r18
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <GPIO_setupPinDirection+0x10c>
    30dc:	88 0f       	add	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	0a 94       	dec	r0
    30e2:	e2 f7       	brpl	.-8      	; 0x30dc <GPIO_setupPinDirection+0x108>
    30e4:	80 95       	com	r24
    30e6:	84 23       	and	r24, r20
    30e8:	8c 93       	st	X, r24
    30ea:	57 c0       	rjmp	.+174    	; 0x319a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	81 30       	cpi	r24, 0x01	; 1
    30f0:	a1 f4       	brne	.+40     	; 0x311a <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    30f2:	a4 e3       	ldi	r26, 0x34	; 52
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e4 e3       	ldi	r30, 0x34	; 52
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	48 2f       	mov	r20, r24
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	02 2e       	mov	r0, r18
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <GPIO_setupPinDirection+0x13c>
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	0a 94       	dec	r0
    3112:	e2 f7       	brpl	.-8      	; 0x310c <GPIO_setupPinDirection+0x138>
    3114:	84 2b       	or	r24, r20
    3116:	8c 93       	st	X, r24
    3118:	40 c0       	rjmp	.+128    	; 0x319a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    311a:	a4 e3       	ldi	r26, 0x34	; 52
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e4 e3       	ldi	r30, 0x34	; 52
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	48 2f       	mov	r20, r24
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	02 2e       	mov	r0, r18
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <GPIO_setupPinDirection+0x164>
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	0a 94       	dec	r0
    313a:	e2 f7       	brpl	.-8      	; 0x3134 <GPIO_setupPinDirection+0x160>
    313c:	80 95       	com	r24
    313e:	84 23       	and	r24, r20
    3140:	8c 93       	st	X, r24
    3142:	2b c0       	rjmp	.+86     	; 0x319a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	a1 f4       	brne	.+40     	; 0x3172 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    314a:	a1 e3       	ldi	r26, 0x31	; 49
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e1 e3       	ldi	r30, 0x31	; 49
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	48 2f       	mov	r20, r24
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	02 2e       	mov	r0, r18
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <GPIO_setupPinDirection+0x194>
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	0a 94       	dec	r0
    316a:	e2 f7       	brpl	.-8      	; 0x3164 <GPIO_setupPinDirection+0x190>
    316c:	84 2b       	or	r24, r20
    316e:	8c 93       	st	X, r24
    3170:	14 c0       	rjmp	.+40     	; 0x319a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    3172:	a1 e3       	ldi	r26, 0x31	; 49
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e1 e3       	ldi	r30, 0x31	; 49
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	48 2f       	mov	r20, r24
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	02 2e       	mov	r0, r18
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <GPIO_setupPinDirection+0x1bc>
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	0a 94       	dec	r0
    3192:	e2 f7       	brpl	.-8      	; 0x318c <GPIO_setupPinDirection+0x1b8>
    3194:	80 95       	com	r24
    3196:	84 23       	and	r24, r20
    3198:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <GPIO_writePin+0x6>
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <GPIO_writePin+0x8>
    31b2:	0f 92       	push	r0
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	6a 83       	std	Y+2, r22	; 0x02
    31bc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	88 30       	cpi	r24, 0x08	; 8
    31c2:	08 f0       	brcs	.+2      	; 0x31c6 <GPIO_writePin+0x1c>
    31c4:	d5 c0       	rjmp	.+426    	; 0x3370 <GPIO_writePin+0x1c6>
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	84 30       	cpi	r24, 0x04	; 4
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <GPIO_writePin+0x24>
    31cc:	d1 c0       	rjmp	.+418    	; 0x3370 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* write the pin value as required */
		switch (port_num) {
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	3d 83       	std	Y+5, r19	; 0x05
    31d6:	2c 83       	std	Y+4, r18	; 0x04
    31d8:	8c 81       	ldd	r24, Y+4	; 0x04
    31da:	9d 81       	ldd	r25, Y+5	; 0x05
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	91 05       	cpc	r25, r1
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <GPIO_writePin+0x3a>
    31e2:	43 c0       	rjmp	.+134    	; 0x326a <GPIO_writePin+0xc0>
    31e4:	2c 81       	ldd	r18, Y+4	; 0x04
    31e6:	3d 81       	ldd	r19, Y+5	; 0x05
    31e8:	22 30       	cpi	r18, 0x02	; 2
    31ea:	31 05       	cpc	r19, r1
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <GPIO_writePin+0x4e>
    31ee:	8c 81       	ldd	r24, Y+4	; 0x04
    31f0:	9d 81       	ldd	r25, Y+5	; 0x05
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	71 f0       	breq	.+28     	; 0x3212 <GPIO_writePin+0x68>
    31f6:	bc c0       	rjmp	.+376    	; 0x3370 <GPIO_writePin+0x1c6>
    31f8:	2c 81       	ldd	r18, Y+4	; 0x04
    31fa:	3d 81       	ldd	r19, Y+5	; 0x05
    31fc:	22 30       	cpi	r18, 0x02	; 2
    31fe:	31 05       	cpc	r19, r1
    3200:	09 f4       	brne	.+2      	; 0x3204 <GPIO_writePin+0x5a>
    3202:	5f c0       	rjmp	.+190    	; 0x32c2 <GPIO_writePin+0x118>
    3204:	8c 81       	ldd	r24, Y+4	; 0x04
    3206:	9d 81       	ldd	r25, Y+5	; 0x05
    3208:	83 30       	cpi	r24, 0x03	; 3
    320a:	91 05       	cpc	r25, r1
    320c:	09 f4       	brne	.+2      	; 0x3210 <GPIO_writePin+0x66>
    320e:	85 c0       	rjmp	.+266    	; 0x331a <GPIO_writePin+0x170>
    3210:	af c0       	rjmp	.+350    	; 0x3370 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	a1 f4       	brne	.+40     	; 0x3240 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    3218:	ab e3       	ldi	r26, 0x3B	; 59
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	eb e3       	ldi	r30, 0x3B	; 59
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	48 2f       	mov	r20, r24
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	02 2e       	mov	r0, r18
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <GPIO_writePin+0x8c>
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	0a 94       	dec	r0
    3238:	e2 f7       	brpl	.-8      	; 0x3232 <GPIO_writePin+0x88>
    323a:	84 2b       	or	r24, r20
    323c:	8c 93       	st	X, r24
    323e:	98 c0       	rjmp	.+304    	; 0x3370 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    3240:	ab e3       	ldi	r26, 0x3B	; 59
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	eb e3       	ldi	r30, 0x3B	; 59
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	48 2f       	mov	r20, r24
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	02 2e       	mov	r0, r18
    3258:	02 c0       	rjmp	.+4      	; 0x325e <GPIO_writePin+0xb4>
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	0a 94       	dec	r0
    3260:	e2 f7       	brpl	.-8      	; 0x325a <GPIO_writePin+0xb0>
    3262:	80 95       	com	r24
    3264:	84 23       	and	r24, r20
    3266:	8c 93       	st	X, r24
    3268:	83 c0       	rjmp	.+262    	; 0x3370 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	81 30       	cpi	r24, 0x01	; 1
    326e:	a1 f4       	brne	.+40     	; 0x3298 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    3270:	a8 e3       	ldi	r26, 0x38	; 56
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e8 e3       	ldi	r30, 0x38	; 56
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	48 2f       	mov	r20, r24
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	02 2e       	mov	r0, r18
    3288:	02 c0       	rjmp	.+4      	; 0x328e <GPIO_writePin+0xe4>
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	0a 94       	dec	r0
    3290:	e2 f7       	brpl	.-8      	; 0x328a <GPIO_writePin+0xe0>
    3292:	84 2b       	or	r24, r20
    3294:	8c 93       	st	X, r24
    3296:	6c c0       	rjmp	.+216    	; 0x3370 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    3298:	a8 e3       	ldi	r26, 0x38	; 56
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e8 e3       	ldi	r30, 0x38	; 56
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	48 2f       	mov	r20, r24
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	02 2e       	mov	r0, r18
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <GPIO_writePin+0x10c>
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	0a 94       	dec	r0
    32b8:	e2 f7       	brpl	.-8      	; 0x32b2 <GPIO_writePin+0x108>
    32ba:	80 95       	com	r24
    32bc:	84 23       	and	r24, r20
    32be:	8c 93       	st	X, r24
    32c0:	57 c0       	rjmp	.+174    	; 0x3370 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	81 30       	cpi	r24, 0x01	; 1
    32c6:	a1 f4       	brne	.+40     	; 0x32f0 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    32c8:	a5 e3       	ldi	r26, 0x35	; 53
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	e5 e3       	ldi	r30, 0x35	; 53
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	48 2f       	mov	r20, r24
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	02 2e       	mov	r0, r18
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <GPIO_writePin+0x13c>
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	0a 94       	dec	r0
    32e8:	e2 f7       	brpl	.-8      	; 0x32e2 <GPIO_writePin+0x138>
    32ea:	84 2b       	or	r24, r20
    32ec:	8c 93       	st	X, r24
    32ee:	40 c0       	rjmp	.+128    	; 0x3370 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    32f0:	a5 e3       	ldi	r26, 0x35	; 53
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e5 e3       	ldi	r30, 0x35	; 53
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	48 2f       	mov	r20, r24
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	28 2f       	mov	r18, r24
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	02 2e       	mov	r0, r18
    3308:	02 c0       	rjmp	.+4      	; 0x330e <GPIO_writePin+0x164>
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	0a 94       	dec	r0
    3310:	e2 f7       	brpl	.-8      	; 0x330a <GPIO_writePin+0x160>
    3312:	80 95       	com	r24
    3314:	84 23       	and	r24, r20
    3316:	8c 93       	st	X, r24
    3318:	2b c0       	rjmp	.+86     	; 0x3370 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	81 30       	cpi	r24, 0x01	; 1
    331e:	a1 f4       	brne	.+40     	; 0x3348 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    3320:	a2 e3       	ldi	r26, 0x32	; 50
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e2 e3       	ldi	r30, 0x32	; 50
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	48 2f       	mov	r20, r24
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	02 2e       	mov	r0, r18
    3338:	02 c0       	rjmp	.+4      	; 0x333e <GPIO_writePin+0x194>
    333a:	88 0f       	add	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	0a 94       	dec	r0
    3340:	e2 f7       	brpl	.-8      	; 0x333a <GPIO_writePin+0x190>
    3342:	84 2b       	or	r24, r20
    3344:	8c 93       	st	X, r24
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    3348:	a2 e3       	ldi	r26, 0x32	; 50
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e2 e3       	ldi	r30, 0x32	; 50
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	48 2f       	mov	r20, r24
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	28 2f       	mov	r18, r24
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	02 2e       	mov	r0, r18
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <GPIO_writePin+0x1bc>
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	0a 94       	dec	r0
    3368:	e2 f7       	brpl	.-8      	; 0x3362 <GPIO_writePin+0x1b8>
    336a:	80 95       	com	r24
    336c:	84 23       	and	r24, r20
    336e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	00 d0       	rcall	.+0      	; 0x3386 <GPIO_readPin+0x6>
    3386:	00 d0       	rcall	.+0      	; 0x3388 <GPIO_readPin+0x8>
    3388:	0f 92       	push	r0
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	8a 83       	std	Y+2, r24	; 0x02
    3390:	6b 83       	std	Y+3, r22	; 0x03

	uint8 value = LOGIC_LOW;
    3392:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	88 30       	cpi	r24, 0x08	; 8
    3398:	08 f0       	brcs	.+2      	; 0x339c <GPIO_readPin+0x1c>
    339a:	84 c0       	rjmp	.+264    	; 0x34a4 <GPIO_readPin+0x124>
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	84 30       	cpi	r24, 0x04	; 4
    33a0:	08 f0       	brcs	.+2      	; 0x33a4 <GPIO_readPin+0x24>
    33a2:	80 c0       	rjmp	.+256    	; 0x34a4 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* read the pin value */
		switch (port_num) {
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	3d 83       	std	Y+5, r19	; 0x05
    33ac:	2c 83       	std	Y+4, r18	; 0x04
    33ae:	4c 81       	ldd	r20, Y+4	; 0x04
    33b0:	5d 81       	ldd	r21, Y+5	; 0x05
    33b2:	41 30       	cpi	r20, 0x01	; 1
    33b4:	51 05       	cpc	r21, r1
    33b6:	79 f1       	breq	.+94     	; 0x3416 <GPIO_readPin+0x96>
    33b8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ba:	9d 81       	ldd	r25, Y+5	; 0x05
    33bc:	82 30       	cpi	r24, 0x02	; 2
    33be:	91 05       	cpc	r25, r1
    33c0:	34 f4       	brge	.+12     	; 0x33ce <GPIO_readPin+0x4e>
    33c2:	2c 81       	ldd	r18, Y+4	; 0x04
    33c4:	3d 81       	ldd	r19, Y+5	; 0x05
    33c6:	21 15       	cp	r18, r1
    33c8:	31 05       	cpc	r19, r1
    33ca:	69 f0       	breq	.+26     	; 0x33e6 <GPIO_readPin+0x66>
    33cc:	6b c0       	rjmp	.+214    	; 0x34a4 <GPIO_readPin+0x124>
    33ce:	4c 81       	ldd	r20, Y+4	; 0x04
    33d0:	5d 81       	ldd	r21, Y+5	; 0x05
    33d2:	42 30       	cpi	r20, 0x02	; 2
    33d4:	51 05       	cpc	r21, r1
    33d6:	b9 f1       	breq	.+110    	; 0x3446 <GPIO_readPin+0xc6>
    33d8:	8c 81       	ldd	r24, Y+4	; 0x04
    33da:	9d 81       	ldd	r25, Y+5	; 0x05
    33dc:	83 30       	cpi	r24, 0x03	; 3
    33de:	91 05       	cpc	r25, r1
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <GPIO_readPin+0x64>
    33e2:	49 c0       	rjmp	.+146    	; 0x3476 <GPIO_readPin+0xf6>
    33e4:	5f c0       	rjmp	.+190    	; 0x34a4 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    33e6:	e9 e3       	ldi	r30, 0x39	; 57
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	88 2f       	mov	r24, r24
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	a9 01       	movw	r20, r18
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <GPIO_readPin+0x7e>
    33fa:	55 95       	asr	r21
    33fc:	47 95       	ror	r20
    33fe:	8a 95       	dec	r24
    3400:	e2 f7       	brpl	.-8      	; 0x33fa <GPIO_readPin+0x7a>
    3402:	ca 01       	movw	r24, r20
    3404:	81 70       	andi	r24, 0x01	; 1
    3406:	90 70       	andi	r25, 0x00	; 0
    3408:	88 23       	and	r24, r24
    340a:	19 f0       	breq	.+6      	; 0x3412 <GPIO_readPin+0x92>
				value = LOGIC_HIGH;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	49 c0       	rjmp	.+146    	; 0x34a4 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    3412:	19 82       	std	Y+1, r1	; 0x01
    3414:	47 c0       	rjmp	.+142    	; 0x34a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    3416:	e6 e3       	ldi	r30, 0x36	; 54
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	8b 81       	ldd	r24, Y+3	; 0x03
    3422:	88 2f       	mov	r24, r24
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	a9 01       	movw	r20, r18
    3428:	02 c0       	rjmp	.+4      	; 0x342e <GPIO_readPin+0xae>
    342a:	55 95       	asr	r21
    342c:	47 95       	ror	r20
    342e:	8a 95       	dec	r24
    3430:	e2 f7       	brpl	.-8      	; 0x342a <GPIO_readPin+0xaa>
    3432:	ca 01       	movw	r24, r20
    3434:	81 70       	andi	r24, 0x01	; 1
    3436:	90 70       	andi	r25, 0x00	; 0
    3438:	88 23       	and	r24, r24
    343a:	19 f0       	breq	.+6      	; 0x3442 <GPIO_readPin+0xc2>
				value = LOGIC_HIGH;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	31 c0       	rjmp	.+98     	; 0x34a4 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    3442:	19 82       	std	Y+1, r1	; 0x01
    3444:	2f c0       	rjmp	.+94     	; 0x34a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    3446:	e3 e3       	ldi	r30, 0x33	; 51
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	28 2f       	mov	r18, r24
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	88 2f       	mov	r24, r24
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	a9 01       	movw	r20, r18
    3458:	02 c0       	rjmp	.+4      	; 0x345e <GPIO_readPin+0xde>
    345a:	55 95       	asr	r21
    345c:	47 95       	ror	r20
    345e:	8a 95       	dec	r24
    3460:	e2 f7       	brpl	.-8      	; 0x345a <GPIO_readPin+0xda>
    3462:	ca 01       	movw	r24, r20
    3464:	81 70       	andi	r24, 0x01	; 1
    3466:	90 70       	andi	r25, 0x00	; 0
    3468:	88 23       	and	r24, r24
    346a:	19 f0       	breq	.+6      	; 0x3472 <GPIO_readPin+0xf2>
				value = LOGIC_HIGH;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	89 83       	std	Y+1, r24	; 0x01
    3470:	19 c0       	rjmp	.+50     	; 0x34a4 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    3472:	19 82       	std	Y+1, r1	; 0x01
    3474:	17 c0       	rjmp	.+46     	; 0x34a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    3476:	e0 e3       	ldi	r30, 0x30	; 48
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	a9 01       	movw	r20, r18
    3488:	02 c0       	rjmp	.+4      	; 0x348e <GPIO_readPin+0x10e>
    348a:	55 95       	asr	r21
    348c:	47 95       	ror	r20
    348e:	8a 95       	dec	r24
    3490:	e2 f7       	brpl	.-8      	; 0x348a <GPIO_readPin+0x10a>
    3492:	ca 01       	movw	r24, r20
    3494:	81 70       	andi	r24, 0x01	; 1
    3496:	90 70       	andi	r25, 0x00	; 0
    3498:	88 23       	and	r24, r24
    349a:	19 f0       	breq	.+6      	; 0x34a2 <GPIO_readPin+0x122>
				value = LOGIC_HIGH;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	01 c0       	rjmp	.+2      	; 0x34a4 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    34a2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <GPIO_setupPortDirection+0x6>
    34bc:	00 d0       	rcall	.+0      	; 0x34be <GPIO_setupPortDirection+0x8>
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	84 30       	cpi	r24, 0x04	; 4
    34ca:	90 f5       	brcc	.+100    	; 0x3530 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	28 2f       	mov	r18, r24
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	3c 83       	std	Y+4, r19	; 0x04
    34d4:	2b 83       	std	Y+3, r18	; 0x03
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	9c 81       	ldd	r25, Y+4	; 0x04
    34da:	81 30       	cpi	r24, 0x01	; 1
    34dc:	91 05       	cpc	r25, r1
    34de:	d1 f0       	breq	.+52     	; 0x3514 <GPIO_setupPortDirection+0x5e>
    34e0:	2b 81       	ldd	r18, Y+3	; 0x03
    34e2:	3c 81       	ldd	r19, Y+4	; 0x04
    34e4:	22 30       	cpi	r18, 0x02	; 2
    34e6:	31 05       	cpc	r19, r1
    34e8:	2c f4       	brge	.+10     	; 0x34f4 <GPIO_setupPortDirection+0x3e>
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	9c 81       	ldd	r25, Y+4	; 0x04
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	61 f0       	breq	.+24     	; 0x350a <GPIO_setupPortDirection+0x54>
    34f2:	1e c0       	rjmp	.+60     	; 0x3530 <GPIO_setupPortDirection+0x7a>
    34f4:	2b 81       	ldd	r18, Y+3	; 0x03
    34f6:	3c 81       	ldd	r19, Y+4	; 0x04
    34f8:	22 30       	cpi	r18, 0x02	; 2
    34fa:	31 05       	cpc	r19, r1
    34fc:	81 f0       	breq	.+32     	; 0x351e <GPIO_setupPortDirection+0x68>
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
    3502:	83 30       	cpi	r24, 0x03	; 3
    3504:	91 05       	cpc	r25, r1
    3506:	81 f0       	breq	.+32     	; 0x3528 <GPIO_setupPortDirection+0x72>
    3508:	13 c0       	rjmp	.+38     	; 0x3530 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    350a:	ea e3       	ldi	r30, 0x3A	; 58
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	80 83       	st	Z, r24
    3512:	0e c0       	rjmp	.+28     	; 0x3530 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    3514:	e7 e3       	ldi	r30, 0x37	; 55
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	80 83       	st	Z, r24
    351c:	09 c0       	rjmp	.+18     	; 0x3530 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    351e:	e4 e3       	ldi	r30, 0x34	; 52
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	80 83       	st	Z, r24
    3526:	04 c0       	rjmp	.+8      	; 0x3530 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    3528:	e1 e3       	ldi	r30, 0x31	; 49
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	8a 81       	ldd	r24, Y+2	; 0x02
    352e:	80 83       	st	Z, r24
			break;
		}
	}
}
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	00 d0       	rcall	.+0      	; 0x3544 <GPIO_writePort+0x6>
    3544:	00 d0       	rcall	.+0      	; 0x3546 <GPIO_writePort+0x8>
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	84 30       	cpi	r24, 0x04	; 4
    3552:	90 f5       	brcc	.+100    	; 0x35b8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* write the port direction as required */
		switch (port_num) {
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	28 2f       	mov	r18, r24
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	3c 83       	std	Y+4, r19	; 0x04
    355c:	2b 83       	std	Y+3, r18	; 0x03
    355e:	8b 81       	ldd	r24, Y+3	; 0x03
    3560:	9c 81       	ldd	r25, Y+4	; 0x04
    3562:	81 30       	cpi	r24, 0x01	; 1
    3564:	91 05       	cpc	r25, r1
    3566:	d1 f0       	breq	.+52     	; 0x359c <GPIO_writePort+0x5e>
    3568:	2b 81       	ldd	r18, Y+3	; 0x03
    356a:	3c 81       	ldd	r19, Y+4	; 0x04
    356c:	22 30       	cpi	r18, 0x02	; 2
    356e:	31 05       	cpc	r19, r1
    3570:	2c f4       	brge	.+10     	; 0x357c <GPIO_writePort+0x3e>
    3572:	8b 81       	ldd	r24, Y+3	; 0x03
    3574:	9c 81       	ldd	r25, Y+4	; 0x04
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	61 f0       	breq	.+24     	; 0x3592 <GPIO_writePort+0x54>
    357a:	1e c0       	rjmp	.+60     	; 0x35b8 <GPIO_writePort+0x7a>
    357c:	2b 81       	ldd	r18, Y+3	; 0x03
    357e:	3c 81       	ldd	r19, Y+4	; 0x04
    3580:	22 30       	cpi	r18, 0x02	; 2
    3582:	31 05       	cpc	r19, r1
    3584:	81 f0       	breq	.+32     	; 0x35a6 <GPIO_writePort+0x68>
    3586:	8b 81       	ldd	r24, Y+3	; 0x03
    3588:	9c 81       	ldd	r25, Y+4	; 0x04
    358a:	83 30       	cpi	r24, 0x03	; 3
    358c:	91 05       	cpc	r25, r1
    358e:	81 f0       	breq	.+32     	; 0x35b0 <GPIO_writePort+0x72>
    3590:	13 c0       	rjmp	.+38     	; 0x35b8 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    3592:	eb e3       	ldi	r30, 0x3B	; 59
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	80 83       	st	Z, r24
    359a:	0e c0       	rjmp	.+28     	; 0x35b8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    359c:	e8 e3       	ldi	r30, 0x38	; 56
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	80 83       	st	Z, r24
    35a4:	09 c0       	rjmp	.+18     	; 0x35b8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    35a6:	e5 e3       	ldi	r30, 0x35	; 53
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	80 83       	st	Z, r24
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    35b0:	e2 e3       	ldi	r30, 0x32	; 50
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	80 83       	st	Z, r24
			break;
		}
	}

}
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	00 d0       	rcall	.+0      	; 0x35cc <GPIO_readPort+0x6>
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <GPIO_readPort+0x8>
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    35d4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	84 30       	cpi	r24, 0x04	; 4
    35da:	90 f5       	brcc	.+100    	; 0x3640 <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* read the port value as required */
		switch (port_num) {
    35dc:	8a 81       	ldd	r24, Y+2	; 0x02
    35de:	28 2f       	mov	r18, r24
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	3c 83       	std	Y+4, r19	; 0x04
    35e4:	2b 83       	std	Y+3, r18	; 0x03
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	81 30       	cpi	r24, 0x01	; 1
    35ec:	91 05       	cpc	r25, r1
    35ee:	d1 f0       	breq	.+52     	; 0x3624 <GPIO_readPort+0x5e>
    35f0:	2b 81       	ldd	r18, Y+3	; 0x03
    35f2:	3c 81       	ldd	r19, Y+4	; 0x04
    35f4:	22 30       	cpi	r18, 0x02	; 2
    35f6:	31 05       	cpc	r19, r1
    35f8:	2c f4       	brge	.+10     	; 0x3604 <GPIO_readPort+0x3e>
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	61 f0       	breq	.+24     	; 0x361a <GPIO_readPort+0x54>
    3602:	1e c0       	rjmp	.+60     	; 0x3640 <GPIO_readPort+0x7a>
    3604:	2b 81       	ldd	r18, Y+3	; 0x03
    3606:	3c 81       	ldd	r19, Y+4	; 0x04
    3608:	22 30       	cpi	r18, 0x02	; 2
    360a:	31 05       	cpc	r19, r1
    360c:	81 f0       	breq	.+32     	; 0x362e <GPIO_readPort+0x68>
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	83 30       	cpi	r24, 0x03	; 3
    3614:	91 05       	cpc	r25, r1
    3616:	81 f0       	breq	.+32     	; 0x3638 <GPIO_readPort+0x72>
    3618:	13 c0       	rjmp	.+38     	; 0x3640 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    361a:	e9 e3       	ldi	r30, 0x39	; 57
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	80 81       	ld	r24, Z
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	0e c0       	rjmp	.+28     	; 0x3640 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    3624:	e6 e3       	ldi	r30, 0x36	; 54
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	89 83       	std	Y+1, r24	; 0x01
    362c:	09 c0       	rjmp	.+18     	; 0x3640 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    362e:	e3 e3       	ldi	r30, 0x33	; 51
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	89 83       	std	Y+1, r24	; 0x01
    3636:	04 c0       	rjmp	.+8      	; 0x3640 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3638:	e0 e3       	ldi	r30, 0x30	; 48
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    3640:	89 81       	ldd	r24, Y+1	; 0x01

}
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <calculate>:
/*
 * Description:
 * function to make a basic operation "/,*,+,-" on two numbers and returns the result
 */
static float32 calculate(float32 firstNumber, uint8 operand,
		float32 secondNumber) {
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	2f 97       	sbiw	r28, 0x0f	; 15
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	6d 83       	std	Y+5, r22	; 0x05
    366a:	7e 83       	std	Y+6, r23	; 0x06
    366c:	8f 83       	std	Y+7, r24	; 0x07
    366e:	98 87       	std	Y+8, r25	; 0x08
    3670:	49 87       	std	Y+9, r20	; 0x09
    3672:	0a 87       	std	Y+10, r16	; 0x0a
    3674:	1b 87       	std	Y+11, r17	; 0x0b
    3676:	2c 87       	std	Y+12, r18	; 0x0c
    3678:	3d 87       	std	Y+13, r19	; 0x0d
	float32 result;
	switch (operand) {
    367a:	89 85       	ldd	r24, Y+9	; 0x09
    367c:	28 2f       	mov	r18, r24
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	3f 87       	std	Y+15, r19	; 0x0f
    3682:	2e 87       	std	Y+14, r18	; 0x0e
    3684:	8e 85       	ldd	r24, Y+14	; 0x0e
    3686:	9f 85       	ldd	r25, Y+15	; 0x0f
    3688:	8b 32       	cpi	r24, 0x2B	; 43
    368a:	91 05       	cpc	r25, r1
    368c:	b1 f0       	breq	.+44     	; 0x36ba <calculate+0x6a>
    368e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3690:	3f 85       	ldd	r19, Y+15	; 0x0f
    3692:	2c 32       	cpi	r18, 0x2C	; 44
    3694:	31 05       	cpc	r19, r1
    3696:	34 f4       	brge	.+12     	; 0x36a4 <calculate+0x54>
    3698:	8e 85       	ldd	r24, Y+14	; 0x0e
    369a:	9f 85       	ldd	r25, Y+15	; 0x0f
    369c:	8a 32       	cpi	r24, 0x2A	; 42
    369e:	91 05       	cpc	r25, r1
    36a0:	e9 f0       	breq	.+58     	; 0x36dc <calculate+0x8c>
    36a2:	4f c0       	rjmp	.+158    	; 0x3742 <calculate+0xf2>
    36a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    36a6:	3f 85       	ldd	r19, Y+15	; 0x0f
    36a8:	2d 32       	cpi	r18, 0x2D	; 45
    36aa:	31 05       	cpc	r19, r1
    36ac:	41 f1       	breq	.+80     	; 0x36fe <calculate+0xae>
    36ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    36b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    36b2:	8f 32       	cpi	r24, 0x2F	; 47
    36b4:	91 05       	cpc	r25, r1
    36b6:	a1 f1       	breq	.+104    	; 0x3720 <calculate+0xd0>
    36b8:	44 c0       	rjmp	.+136    	; 0x3742 <calculate+0xf2>
	case '+':
		result = firstNumber + secondNumber;
    36ba:	6d 81       	ldd	r22, Y+5	; 0x05
    36bc:	7e 81       	ldd	r23, Y+6	; 0x06
    36be:	8f 81       	ldd	r24, Y+7	; 0x07
    36c0:	98 85       	ldd	r25, Y+8	; 0x08
    36c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    36c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    36c6:	4c 85       	ldd	r20, Y+12	; 0x0c
    36c8:	5d 85       	ldd	r21, Y+13	; 0x0d
    36ca:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	89 83       	std	Y+1, r24	; 0x01
    36d4:	9a 83       	std	Y+2, r25	; 0x02
    36d6:	ab 83       	std	Y+3, r26	; 0x03
    36d8:	bc 83       	std	Y+4, r27	; 0x04
    36da:	3b c0       	rjmp	.+118    	; 0x3752 <calculate+0x102>
		break;
	case '*':
		result = firstNumber * secondNumber;
    36dc:	6d 81       	ldd	r22, Y+5	; 0x05
    36de:	7e 81       	ldd	r23, Y+6	; 0x06
    36e0:	8f 81       	ldd	r24, Y+7	; 0x07
    36e2:	98 85       	ldd	r25, Y+8	; 0x08
    36e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    36e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    36e8:	4c 85       	ldd	r20, Y+12	; 0x0c
    36ea:	5d 85       	ldd	r21, Y+13	; 0x0d
    36ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	ab 83       	std	Y+3, r26	; 0x03
    36fa:	bc 83       	std	Y+4, r27	; 0x04
    36fc:	2a c0       	rjmp	.+84     	; 0x3752 <calculate+0x102>
		break;
	case '-':
		result = firstNumber - secondNumber;
    36fe:	6d 81       	ldd	r22, Y+5	; 0x05
    3700:	7e 81       	ldd	r23, Y+6	; 0x06
    3702:	8f 81       	ldd	r24, Y+7	; 0x07
    3704:	98 85       	ldd	r25, Y+8	; 0x08
    3706:	2a 85       	ldd	r18, Y+10	; 0x0a
    3708:	3b 85       	ldd	r19, Y+11	; 0x0b
    370a:	4c 85       	ldd	r20, Y+12	; 0x0c
    370c:	5d 85       	ldd	r21, Y+13	; 0x0d
    370e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	ab 83       	std	Y+3, r26	; 0x03
    371c:	bc 83       	std	Y+4, r27	; 0x04
    371e:	19 c0       	rjmp	.+50     	; 0x3752 <calculate+0x102>
		break;
	case '/':
		result = firstNumber / secondNumber;
    3720:	6d 81       	ldd	r22, Y+5	; 0x05
    3722:	7e 81       	ldd	r23, Y+6	; 0x06
    3724:	8f 81       	ldd	r24, Y+7	; 0x07
    3726:	98 85       	ldd	r25, Y+8	; 0x08
    3728:	2a 85       	ldd	r18, Y+10	; 0x0a
    372a:	3b 85       	ldd	r19, Y+11	; 0x0b
    372c:	4c 85       	ldd	r20, Y+12	; 0x0c
    372e:	5d 85       	ldd	r21, Y+13	; 0x0d
    3730:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	ab 83       	std	Y+3, r26	; 0x03
    373e:	bc 83       	std	Y+4, r27	; 0x04
    3740:	08 c0       	rjmp	.+16     	; 0x3752 <calculate+0x102>
		break;
	default:
		result = 'E';
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	aa e8       	ldi	r26, 0x8A	; 138
    3748:	b2 e4       	ldi	r27, 0x42	; 66
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	9a 83       	std	Y+2, r25	; 0x02
    374e:	ab 83       	std	Y+3, r26	; 0x03
    3750:	bc 83       	std	Y+4, r27	; 0x04
	}
	return result;
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	9a 81       	ldd	r25, Y+2	; 0x02
    3756:	ab 81       	ldd	r26, Y+3	; 0x03
    3758:	bc 81       	ldd	r27, Y+4	; 0x04
}
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	2f 96       	adiw	r28, 0x0f	; 15
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	08 95       	ret

00003774 <errorBuzzer>:

static void errorBuzzer() {
    3774:	0f 93       	push	r16
    3776:	1f 93       	push	r17
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	c2 56       	subi	r28, 0x62	; 98
    3782:	d0 40       	sbci	r29, 0x00	; 0
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	65 e0       	ldi	r22, 0x05	; 5
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3798:	fe 01       	movw	r30, r28
    379a:	e1 5a       	subi	r30, 0xA1	; 161
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	a8 e4       	ldi	r26, 0x48	; 72
    37a4:	b2 e4       	ldi	r27, 0x42	; 66
    37a6:	80 83       	st	Z, r24
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	a2 83       	std	Z+2, r26	; 0x02
    37ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ae:	8e 01       	movw	r16, r28
    37b0:	05 5a       	subi	r16, 0xA5	; 165
    37b2:	1f 4f       	sbci	r17, 0xFF	; 255
    37b4:	fe 01       	movw	r30, r28
    37b6:	e1 5a       	subi	r30, 0xA1	; 161
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	60 81       	ld	r22, Z
    37bc:	71 81       	ldd	r23, Z+1	; 0x01
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a e7       	ldi	r20, 0x7A	; 122
    37c8:	55 e4       	ldi	r21, 0x45	; 69
    37ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	f8 01       	movw	r30, r16
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37dc:	fe 01       	movw	r30, r28
    37de:	e5 5a       	subi	r30, 0xA5	; 165
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	60 81       	ld	r22, Z
    37e4:	71 81       	ldd	r23, Z+1	; 0x01
    37e6:	82 81       	ldd	r24, Z+2	; 0x02
    37e8:	93 81       	ldd	r25, Z+3	; 0x03
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	44 f4       	brge	.+16     	; 0x380a <errorBuzzer+0x96>
		__ticks = 1;
    37fa:	fe 01       	movw	r30, r28
    37fc:	e7 5a       	subi	r30, 0xA7	; 167
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	80 83       	st	Z, r24
    3808:	64 c0       	rjmp	.+200    	; 0x38d2 <errorBuzzer+0x15e>
	else if (__tmp > 65535)
    380a:	fe 01       	movw	r30, r28
    380c:	e5 5a       	subi	r30, 0xA5	; 165
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	3f ef       	ldi	r19, 0xFF	; 255
    381c:	4f e7       	ldi	r20, 0x7F	; 127
    381e:	57 e4       	ldi	r21, 0x47	; 71
    3820:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3824:	18 16       	cp	r1, r24
    3826:	0c f0       	brlt	.+2      	; 0x382a <errorBuzzer+0xb6>
    3828:	43 c0       	rjmp	.+134    	; 0x38b0 <errorBuzzer+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    382a:	fe 01       	movw	r30, r28
    382c:	e1 5a       	subi	r30, 0xA1	; 161
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	8e 01       	movw	r16, r28
    384a:	07 5a       	subi	r16, 0xA7	; 167
    384c:	1f 4f       	sbci	r17, 0xFF	; 255
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	f8 01       	movw	r30, r16
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	80 83       	st	Z, r24
    3860:	1f c0       	rjmp	.+62     	; 0x38a0 <errorBuzzer+0x12c>
    3862:	fe 01       	movw	r30, r28
    3864:	e9 5a       	subi	r30, 0xA9	; 169
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 e9       	ldi	r24, 0x90	; 144
    386a:	91 e0       	ldi	r25, 0x01	; 1
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
    3870:	fe 01       	movw	r30, r28
    3872:	e9 5a       	subi	r30, 0xA9	; 169
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	91 81       	ldd	r25, Z+1	; 0x01
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <errorBuzzer+0x106>
    387e:	fe 01       	movw	r30, r28
    3880:	e9 5a       	subi	r30, 0xA9	; 169
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3888:	de 01       	movw	r26, r28
    388a:	a7 5a       	subi	r26, 0xA7	; 167
    388c:	bf 4f       	sbci	r27, 0xFF	; 255
    388e:	fe 01       	movw	r30, r28
    3890:	e7 5a       	subi	r30, 0xA7	; 167
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	11 96       	adiw	r26, 0x01	; 1
    389c:	9c 93       	st	X, r25
    389e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a0:	fe 01       	movw	r30, r28
    38a2:	e7 5a       	subi	r30, 0xA7	; 167
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	80 81       	ld	r24, Z
    38a8:	91 81       	ldd	r25, Z+1	; 0x01
    38aa:	00 97       	sbiw	r24, 0x00	; 0
    38ac:	d1 f6       	brne	.-76     	; 0x3862 <errorBuzzer+0xee>
    38ae:	27 c0       	rjmp	.+78     	; 0x38fe <errorBuzzer+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b0:	8e 01       	movw	r16, r28
    38b2:	07 5a       	subi	r16, 0xA7	; 167
    38b4:	1f 4f       	sbci	r17, 0xFF	; 255
    38b6:	fe 01       	movw	r30, r28
    38b8:	e5 5a       	subi	r30, 0xA5	; 165
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	60 81       	ld	r22, Z
    38be:	71 81       	ldd	r23, Z+1	; 0x01
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	93 81       	ldd	r25, Z+3	; 0x03
    38c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	f8 01       	movw	r30, r16
    38ce:	91 83       	std	Z+1, r25	; 0x01
    38d0:	80 83       	st	Z, r24
    38d2:	de 01       	movw	r26, r28
    38d4:	ab 5a       	subi	r26, 0xAB	; 171
    38d6:	bf 4f       	sbci	r27, 0xFF	; 255
    38d8:	fe 01       	movw	r30, r28
    38da:	e7 5a       	subi	r30, 0xA7	; 167
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	80 81       	ld	r24, Z
    38e0:	91 81       	ldd	r25, Z+1	; 0x01
    38e2:	8d 93       	st	X+, r24
    38e4:	9c 93       	st	X, r25
    38e6:	fe 01       	movw	r30, r28
    38e8:	eb 5a       	subi	r30, 0xAB	; 171
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <errorBuzzer+0x17c>
    38f4:	fe 01       	movw	r30, r28
    38f6:	eb 5a       	subi	r30, 0xAB	; 171
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	80 83       	st	Z, r24
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	65 e0       	ldi	r22, 0x05	; 5
    3902:	40 e0       	ldi	r20, 0x00	; 0
    3904:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3908:	fe 01       	movw	r30, r28
    390a:	ef 5a       	subi	r30, 0xAF	; 175
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	a8 e4       	ldi	r26, 0x48	; 72
    3914:	b2 e4       	ldi	r27, 0x42	; 66
    3916:	80 83       	st	Z, r24
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	a2 83       	std	Z+2, r26	; 0x02
    391c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391e:	8e 01       	movw	r16, r28
    3920:	03 5b       	subi	r16, 0xB3	; 179
    3922:	1f 4f       	sbci	r17, 0xFF	; 255
    3924:	fe 01       	movw	r30, r28
    3926:	ef 5a       	subi	r30, 0xAF	; 175
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	55 e4       	ldi	r21, 0x45	; 69
    393a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	f8 01       	movw	r30, r16
    3944:	80 83       	st	Z, r24
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	a2 83       	std	Z+2, r26	; 0x02
    394a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    394c:	fe 01       	movw	r30, r28
    394e:	e3 5b       	subi	r30, 0xB3	; 179
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	60 81       	ld	r22, Z
    3954:	71 81       	ldd	r23, Z+1	; 0x01
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	44 f4       	brge	.+16     	; 0x397a <errorBuzzer+0x206>
		__ticks = 1;
    396a:	fe 01       	movw	r30, r28
    396c:	e5 5b       	subi	r30, 0xB5	; 181
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	91 83       	std	Z+1, r25	; 0x01
    3976:	80 83       	st	Z, r24
    3978:	64 c0       	rjmp	.+200    	; 0x3a42 <errorBuzzer+0x2ce>
	else if (__tmp > 65535)
    397a:	fe 01       	movw	r30, r28
    397c:	e3 5b       	subi	r30, 0xB3	; 179
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	3f ef       	ldi	r19, 0xFF	; 255
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	57 e4       	ldi	r21, 0x47	; 71
    3990:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3994:	18 16       	cp	r1, r24
    3996:	0c f0       	brlt	.+2      	; 0x399a <errorBuzzer+0x226>
    3998:	43 c0       	rjmp	.+134    	; 0x3a20 <errorBuzzer+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399a:	fe 01       	movw	r30, r28
    399c:	ef 5a       	subi	r30, 0xAF	; 175
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	60 81       	ld	r22, Z
    39a2:	71 81       	ldd	r23, Z+1	; 0x01
    39a4:	82 81       	ldd	r24, Z+2	; 0x02
    39a6:	93 81       	ldd	r25, Z+3	; 0x03
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e2       	ldi	r20, 0x20	; 32
    39ae:	51 e4       	ldi	r21, 0x41	; 65
    39b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	8e 01       	movw	r16, r28
    39ba:	05 5b       	subi	r16, 0xB5	; 181
    39bc:	1f 4f       	sbci	r17, 0xFF	; 255
    39be:	bc 01       	movw	r22, r24
    39c0:	cd 01       	movw	r24, r26
    39c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	f8 01       	movw	r30, r16
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
    39d0:	1f c0       	rjmp	.+62     	; 0x3a10 <errorBuzzer+0x29c>
    39d2:	fe 01       	movw	r30, r28
    39d4:	e7 5b       	subi	r30, 0xB7	; 183
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 e9       	ldi	r24, 0x90	; 144
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
    39e0:	fe 01       	movw	r30, r28
    39e2:	e7 5b       	subi	r30, 0xB7	; 183
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	80 81       	ld	r24, Z
    39e8:	91 81       	ldd	r25, Z+1	; 0x01
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <errorBuzzer+0x276>
    39ee:	fe 01       	movw	r30, r28
    39f0:	e7 5b       	subi	r30, 0xB7	; 183
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f8:	de 01       	movw	r26, r28
    39fa:	a5 5b       	subi	r26, 0xB5	; 181
    39fc:	bf 4f       	sbci	r27, 0xFF	; 255
    39fe:	fe 01       	movw	r30, r28
    3a00:	e5 5b       	subi	r30, 0xB5	; 181
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	80 81       	ld	r24, Z
    3a06:	91 81       	ldd	r25, Z+1	; 0x01
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	11 96       	adiw	r26, 0x01	; 1
    3a0c:	9c 93       	st	X, r25
    3a0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a10:	fe 01       	movw	r30, r28
    3a12:	e5 5b       	subi	r30, 0xB5	; 181
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	91 81       	ldd	r25, Z+1	; 0x01
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	d1 f6       	brne	.-76     	; 0x39d2 <errorBuzzer+0x25e>
    3a1e:	27 c0       	rjmp	.+78     	; 0x3a6e <errorBuzzer+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a20:	8e 01       	movw	r16, r28
    3a22:	05 5b       	subi	r16, 0xB5	; 181
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	fe 01       	movw	r30, r28
    3a28:	e3 5b       	subi	r30, 0xB3	; 179
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	60 81       	ld	r22, Z
    3a2e:	71 81       	ldd	r23, Z+1	; 0x01
    3a30:	82 81       	ldd	r24, Z+2	; 0x02
    3a32:	93 81       	ldd	r25, Z+3	; 0x03
    3a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	de 01       	movw	r26, r28
    3a44:	a9 5b       	subi	r26, 0xB9	; 185
    3a46:	bf 4f       	sbci	r27, 0xFF	; 255
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e5 5b       	subi	r30, 0xB5	; 181
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	8d 93       	st	X+, r24
    3a54:	9c 93       	st	X, r25
    3a56:	fe 01       	movw	r30, r28
    3a58:	e9 5b       	subi	r30, 0xB9	; 185
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <errorBuzzer+0x2ec>
    3a64:	fe 01       	movw	r30, r28
    3a66:	e9 5b       	subi	r30, 0xB9	; 185
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
    3a6e:	82 e0       	ldi	r24, 0x02	; 2
    3a70:	65 e0       	ldi	r22, 0x05	; 5
    3a72:	41 e0       	ldi	r20, 0x01	; 1
    3a74:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3a78:	fe 01       	movw	r30, r28
    3a7a:	ed 5b       	subi	r30, 0xBD	; 189
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	a8 e4       	ldi	r26, 0x48	; 72
    3a84:	b2 e4       	ldi	r27, 0x42	; 66
    3a86:	80 83       	st	Z, r24
    3a88:	91 83       	std	Z+1, r25	; 0x01
    3a8a:	a2 83       	std	Z+2, r26	; 0x02
    3a8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8e:	8e 01       	movw	r16, r28
    3a90:	01 5c       	subi	r16, 0xC1	; 193
    3a92:	1f 4f       	sbci	r17, 0xFF	; 255
    3a94:	fe 01       	movw	r30, r28
    3a96:	ed 5b       	subi	r30, 0xBD	; 189
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	60 81       	ld	r22, Z
    3a9c:	71 81       	ldd	r23, Z+1	; 0x01
    3a9e:	82 81       	ldd	r24, Z+2	; 0x02
    3aa0:	93 81       	ldd	r25, Z+3	; 0x03
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	4a e7       	ldi	r20, 0x7A	; 122
    3aa8:	55 e4       	ldi	r21, 0x45	; 69
    3aaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	f8 01       	movw	r30, r16
    3ab4:	80 83       	st	Z, r24
    3ab6:	91 83       	std	Z+1, r25	; 0x01
    3ab8:	a2 83       	std	Z+2, r26	; 0x02
    3aba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3abc:	fe 01       	movw	r30, r28
    3abe:	ff 96       	adiw	r30, 0x3f	; 63
    3ac0:	60 81       	ld	r22, Z
    3ac2:	71 81       	ldd	r23, Z+1	; 0x01
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	40 e8       	ldi	r20, 0x80	; 128
    3ace:	5f e3       	ldi	r21, 0x3F	; 63
    3ad0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3ad4:	88 23       	and	r24, r24
    3ad6:	2c f4       	brge	.+10     	; 0x3ae2 <errorBuzzer+0x36e>
		__ticks = 1;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	9e af       	std	Y+62, r25	; 0x3e
    3ade:	8d af       	std	Y+61, r24	; 0x3d
    3ae0:	46 c0       	rjmp	.+140    	; 0x3b6e <errorBuzzer+0x3fa>
	else if (__tmp > 65535)
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	ff 96       	adiw	r30, 0x3f	; 63
    3ae6:	60 81       	ld	r22, Z
    3ae8:	71 81       	ldd	r23, Z+1	; 0x01
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	3f ef       	ldi	r19, 0xFF	; 255
    3af2:	4f e7       	ldi	r20, 0x7F	; 127
    3af4:	57 e4       	ldi	r21, 0x47	; 71
    3af6:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3afa:	18 16       	cp	r1, r24
    3afc:	64 f5       	brge	.+88     	; 0x3b56 <errorBuzzer+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afe:	fe 01       	movw	r30, r28
    3b00:	ed 5b       	subi	r30, 0xBD	; 189
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	60 81       	ld	r22, Z
    3b06:	71 81       	ldd	r23, Z+1	; 0x01
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e2       	ldi	r20, 0x20	; 32
    3b12:	51 e4       	ldi	r21, 0x41	; 65
    3b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	9e af       	std	Y+62, r25	; 0x3e
    3b2a:	8d af       	std	Y+61, r24	; 0x3d
    3b2c:	0f c0       	rjmp	.+30     	; 0x3b4c <errorBuzzer+0x3d8>
    3b2e:	80 e9       	ldi	r24, 0x90	; 144
    3b30:	91 e0       	ldi	r25, 0x01	; 1
    3b32:	9c af       	std	Y+60, r25	; 0x3c
    3b34:	8b af       	std	Y+59, r24	; 0x3b
    3b36:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b38:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <errorBuzzer+0x3c6>
    3b3e:	9c af       	std	Y+60, r25	; 0x3c
    3b40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b42:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b44:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	9e af       	std	Y+62, r25	; 0x3e
    3b4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	69 f7       	brne	.-38     	; 0x3b2e <errorBuzzer+0x3ba>
    3b54:	16 c0       	rjmp	.+44     	; 0x3b82 <errorBuzzer+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b56:	fe 01       	movw	r30, r28
    3b58:	ff 96       	adiw	r30, 0x3f	; 63
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	93 81       	ldd	r25, Z+3	; 0x03
    3b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	9e af       	std	Y+62, r25	; 0x3e
    3b6c:	8d af       	std	Y+61, r24	; 0x3d
    3b6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b70:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b72:	9a af       	std	Y+58, r25	; 0x3a
    3b74:	89 af       	std	Y+57, r24	; 0x39
    3b76:	89 ad       	ldd	r24, Y+57	; 0x39
    3b78:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <errorBuzzer+0x406>
    3b7e:	9a af       	std	Y+58, r25	; 0x3a
    3b80:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	65 e0       	ldi	r22, 0x05	; 5
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	a8 e4       	ldi	r26, 0x48	; 72
    3b92:	b2 e4       	ldi	r27, 0x42	; 66
    3b94:	8d ab       	std	Y+53, r24	; 0x35
    3b96:	9e ab       	std	Y+54, r25	; 0x36
    3b98:	af ab       	std	Y+55, r26	; 0x37
    3b9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3ba0:	8f a9       	ldd	r24, Y+55	; 0x37
    3ba2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	4a e7       	ldi	r20, 0x7A	; 122
    3baa:	55 e4       	ldi	r21, 0x45	; 69
    3bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	89 ab       	std	Y+49, r24	; 0x31
    3bb6:	9a ab       	std	Y+50, r25	; 0x32
    3bb8:	ab ab       	std	Y+51, r26	; 0x33
    3bba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bbc:	69 a9       	ldd	r22, Y+49	; 0x31
    3bbe:	7a a9       	ldd	r23, Y+50	; 0x32
    3bc0:	8b a9       	ldd	r24, Y+51	; 0x33
    3bc2:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e8       	ldi	r20, 0x80	; 128
    3bca:	5f e3       	ldi	r21, 0x3F	; 63
    3bcc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3bd0:	88 23       	and	r24, r24
    3bd2:	2c f4       	brge	.+10     	; 0x3bde <errorBuzzer+0x46a>
		__ticks = 1;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	98 ab       	std	Y+48, r25	; 0x30
    3bda:	8f a7       	std	Y+47, r24	; 0x2f
    3bdc:	3f c0       	rjmp	.+126    	; 0x3c5c <errorBuzzer+0x4e8>
	else if (__tmp > 65535)
    3bde:	69 a9       	ldd	r22, Y+49	; 0x31
    3be0:	7a a9       	ldd	r23, Y+50	; 0x32
    3be2:	8b a9       	ldd	r24, Y+51	; 0x33
    3be4:	9c a9       	ldd	r25, Y+52	; 0x34
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	3f ef       	ldi	r19, 0xFF	; 255
    3bea:	4f e7       	ldi	r20, 0x7F	; 127
    3bec:	57 e4       	ldi	r21, 0x47	; 71
    3bee:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3bf2:	18 16       	cp	r1, r24
    3bf4:	4c f5       	brge	.+82     	; 0x3c48 <errorBuzzer+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf6:	6d a9       	ldd	r22, Y+53	; 0x35
    3bf8:	7e a9       	ldd	r23, Y+54	; 0x36
    3bfa:	8f a9       	ldd	r24, Y+55	; 0x37
    3bfc:	98 ad       	ldd	r25, Y+56	; 0x38
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e2       	ldi	r20, 0x20	; 32
    3c04:	51 e4       	ldi	r21, 0x41	; 65
    3c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	98 ab       	std	Y+48, r25	; 0x30
    3c1c:	8f a7       	std	Y+47, r24	; 0x2f
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <errorBuzzer+0x4ca>
    3c20:	80 e9       	ldi	r24, 0x90	; 144
    3c22:	91 e0       	ldi	r25, 0x01	; 1
    3c24:	9e a7       	std	Y+46, r25	; 0x2e
    3c26:	8d a7       	std	Y+45, r24	; 0x2d
    3c28:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <errorBuzzer+0x4b8>
    3c30:	9e a7       	std	Y+46, r25	; 0x2e
    3c32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c36:	98 a9       	ldd	r25, Y+48	; 0x30
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	98 ab       	std	Y+48, r25	; 0x30
    3c3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c40:	98 a9       	ldd	r25, Y+48	; 0x30
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	69 f7       	brne	.-38     	; 0x3c20 <errorBuzzer+0x4ac>
    3c46:	14 c0       	rjmp	.+40     	; 0x3c70 <errorBuzzer+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c48:	69 a9       	ldd	r22, Y+49	; 0x31
    3c4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	98 ab       	std	Y+48, r25	; 0x30
    3c5a:	8f a7       	std	Y+47, r24	; 0x2f
    3c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c60:	9c a7       	std	Y+44, r25	; 0x2c
    3c62:	8b a7       	std	Y+43, r24	; 0x2b
    3c64:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c66:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <errorBuzzer+0x4f4>
    3c6c:	9c a7       	std	Y+44, r25	; 0x2c
    3c6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	65 e0       	ldi	r22, 0x05	; 5
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a8 e4       	ldi	r26, 0x48	; 72
    3c80:	b2 e4       	ldi	r27, 0x42	; 66
    3c82:	8f a3       	std	Y+39, r24	; 0x27
    3c84:	98 a7       	std	Y+40, r25	; 0x28
    3c86:	a9 a7       	std	Y+41, r26	; 0x29
    3c88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	4a e7       	ldi	r20, 0x7A	; 122
    3c98:	55 e4       	ldi	r21, 0x45	; 69
    3c9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	8b a3       	std	Y+35, r24	; 0x23
    3ca4:	9c a3       	std	Y+36, r25	; 0x24
    3ca6:	ad a3       	std	Y+37, r26	; 0x25
    3ca8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3caa:	6b a1       	ldd	r22, Y+35	; 0x23
    3cac:	7c a1       	ldd	r23, Y+36	; 0x24
    3cae:	8d a1       	ldd	r24, Y+37	; 0x25
    3cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	40 e8       	ldi	r20, 0x80	; 128
    3cb8:	5f e3       	ldi	r21, 0x3F	; 63
    3cba:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3cbe:	88 23       	and	r24, r24
    3cc0:	2c f4       	brge	.+10     	; 0x3ccc <errorBuzzer+0x558>
		__ticks = 1;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	9a a3       	std	Y+34, r25	; 0x22
    3cc8:	89 a3       	std	Y+33, r24	; 0x21
    3cca:	3f c0       	rjmp	.+126    	; 0x3d4a <errorBuzzer+0x5d6>
	else if (__tmp > 65535)
    3ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    3cce:	7c a1       	ldd	r23, Y+36	; 0x24
    3cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	3f ef       	ldi	r19, 0xFF	; 255
    3cd8:	4f e7       	ldi	r20, 0x7F	; 127
    3cda:	57 e4       	ldi	r21, 0x47	; 71
    3cdc:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3ce0:	18 16       	cp	r1, r24
    3ce2:	4c f5       	brge	.+82     	; 0x3d36 <errorBuzzer+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ce6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce8:	89 a5       	ldd	r24, Y+41	; 0x29
    3cea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e2       	ldi	r20, 0x20	; 32
    3cf2:	51 e4       	ldi	r21, 0x41	; 65
    3cf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	bc 01       	movw	r22, r24
    3cfe:	cd 01       	movw	r24, r26
    3d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	9a a3       	std	Y+34, r25	; 0x22
    3d0a:	89 a3       	std	Y+33, r24	; 0x21
    3d0c:	0f c0       	rjmp	.+30     	; 0x3d2c <errorBuzzer+0x5b8>
    3d0e:	80 e9       	ldi	r24, 0x90	; 144
    3d10:	91 e0       	ldi	r25, 0x01	; 1
    3d12:	98 a3       	std	Y+32, r25	; 0x20
    3d14:	8f 8f       	std	Y+31, r24	; 0x1f
    3d16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d18:	98 a1       	ldd	r25, Y+32	; 0x20
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <errorBuzzer+0x5a6>
    3d1e:	98 a3       	std	Y+32, r25	; 0x20
    3d20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d22:	89 a1       	ldd	r24, Y+33	; 0x21
    3d24:	9a a1       	ldd	r25, Y+34	; 0x22
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	9a a3       	std	Y+34, r25	; 0x22
    3d2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d2e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	69 f7       	brne	.-38     	; 0x3d0e <errorBuzzer+0x59a>
    3d34:	14 c0       	rjmp	.+40     	; 0x3d5e <errorBuzzer+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d36:	6b a1       	ldd	r22, Y+35	; 0x23
    3d38:	7c a1       	ldd	r23, Y+36	; 0x24
    3d3a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d3c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	9a a3       	std	Y+34, r25	; 0x22
    3d48:	89 a3       	std	Y+33, r24	; 0x21
    3d4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d4e:	9e 8f       	std	Y+30, r25	; 0x1e
    3d50:	8d 8f       	std	Y+29, r24	; 0x1d
    3d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <errorBuzzer+0x5e2>
    3d5a:	9e 8f       	std	Y+30, r25	; 0x1e
    3d5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	65 e0       	ldi	r22, 0x05	; 5
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	a8 e4       	ldi	r26, 0x48	; 72
    3d6e:	b2 e4       	ldi	r27, 0x42	; 66
    3d70:	89 8f       	std	Y+25, r24	; 0x19
    3d72:	9a 8f       	std	Y+26, r25	; 0x1a
    3d74:	ab 8f       	std	Y+27, r26	; 0x1b
    3d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d78:	69 8d       	ldd	r22, Y+25	; 0x19
    3d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	4a e7       	ldi	r20, 0x7A	; 122
    3d86:	55 e4       	ldi	r21, 0x45	; 69
    3d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	8d 8b       	std	Y+21, r24	; 0x15
    3d92:	9e 8b       	std	Y+22, r25	; 0x16
    3d94:	af 8b       	std	Y+23, r26	; 0x17
    3d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d98:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e8       	ldi	r20, 0x80	; 128
    3da6:	5f e3       	ldi	r21, 0x3F	; 63
    3da8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3dac:	88 23       	and	r24, r24
    3dae:	2c f4       	brge	.+10     	; 0x3dba <errorBuzzer+0x646>
		__ticks = 1;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	9c 8b       	std	Y+20, r25	; 0x14
    3db6:	8b 8b       	std	Y+19, r24	; 0x13
    3db8:	3f c0       	rjmp	.+126    	; 0x3e38 <errorBuzzer+0x6c4>
	else if (__tmp > 65535)
    3dba:	6d 89       	ldd	r22, Y+21	; 0x15
    3dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	3f ef       	ldi	r19, 0xFF	; 255
    3dc6:	4f e7       	ldi	r20, 0x7F	; 127
    3dc8:	57 e4       	ldi	r21, 0x47	; 71
    3dca:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3dce:	18 16       	cp	r1, r24
    3dd0:	4c f5       	brge	.+82     	; 0x3e24 <errorBuzzer+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e2       	ldi	r20, 0x20	; 32
    3de0:	51 e4       	ldi	r21, 0x41	; 65
    3de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	bc 01       	movw	r22, r24
    3dec:	cd 01       	movw	r24, r26
    3dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	9c 8b       	std	Y+20, r25	; 0x14
    3df8:	8b 8b       	std	Y+19, r24	; 0x13
    3dfa:	0f c0       	rjmp	.+30     	; 0x3e1a <errorBuzzer+0x6a6>
    3dfc:	80 e9       	ldi	r24, 0x90	; 144
    3dfe:	91 e0       	ldi	r25, 0x01	; 1
    3e00:	9a 8b       	std	Y+18, r25	; 0x12
    3e02:	89 8b       	std	Y+17, r24	; 0x11
    3e04:	89 89       	ldd	r24, Y+17	; 0x11
    3e06:	9a 89       	ldd	r25, Y+18	; 0x12
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	f1 f7       	brne	.-4      	; 0x3e08 <errorBuzzer+0x694>
    3e0c:	9a 8b       	std	Y+18, r25	; 0x12
    3e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e10:	8b 89       	ldd	r24, Y+19	; 0x13
    3e12:	9c 89       	ldd	r25, Y+20	; 0x14
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	9c 8b       	std	Y+20, r25	; 0x14
    3e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	69 f7       	brne	.-38     	; 0x3dfc <errorBuzzer+0x688>
    3e22:	14 c0       	rjmp	.+40     	; 0x3e4c <errorBuzzer+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e24:	6d 89       	ldd	r22, Y+21	; 0x15
    3e26:	7e 89       	ldd	r23, Y+22	; 0x16
    3e28:	8f 89       	ldd	r24, Y+23	; 0x17
    3e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	9c 8b       	std	Y+20, r25	; 0x14
    3e36:	8b 8b       	std	Y+19, r24	; 0x13
    3e38:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3c:	98 8b       	std	Y+16, r25	; 0x10
    3e3e:	8f 87       	std	Y+15, r24	; 0x0f
    3e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e42:	98 89       	ldd	r25, Y+16	; 0x10
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	f1 f7       	brne	.-4      	; 0x3e44 <errorBuzzer+0x6d0>
    3e48:	98 8b       	std	Y+16, r25	; 0x10
    3e4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
    3e4c:	82 e0       	ldi	r24, 0x02	; 2
    3e4e:	65 e0       	ldi	r22, 0x05	; 5
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	a8 e4       	ldi	r26, 0x48	; 72
    3e5c:	b2 e4       	ldi	r27, 0x42	; 66
    3e5e:	8b 87       	std	Y+11, r24	; 0x0b
    3e60:	9c 87       	std	Y+12, r25	; 0x0c
    3e62:	ad 87       	std	Y+13, r26	; 0x0d
    3e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	4a e7       	ldi	r20, 0x7A	; 122
    3e74:	55 e4       	ldi	r21, 0x45	; 69
    3e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	8f 83       	std	Y+7, r24	; 0x07
    3e80:	98 87       	std	Y+8, r25	; 0x08
    3e82:	a9 87       	std	Y+9, r26	; 0x09
    3e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e8       	ldi	r20, 0x80	; 128
    3e94:	5f e3       	ldi	r21, 0x3F	; 63
    3e96:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3e9a:	88 23       	and	r24, r24
    3e9c:	2c f4       	brge	.+10     	; 0x3ea8 <errorBuzzer+0x734>
		__ticks = 1;
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
    3ea4:	8d 83       	std	Y+5, r24	; 0x05
    3ea6:	3f c0       	rjmp	.+126    	; 0x3f26 <errorBuzzer+0x7b2>
	else if (__tmp > 65535)
    3ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eaa:	78 85       	ldd	r23, Y+8	; 0x08
    3eac:	89 85       	ldd	r24, Y+9	; 0x09
    3eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	3f ef       	ldi	r19, 0xFF	; 255
    3eb4:	4f e7       	ldi	r20, 0x7F	; 127
    3eb6:	57 e4       	ldi	r21, 0x47	; 71
    3eb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3ebc:	18 16       	cp	r1, r24
    3ebe:	4c f5       	brge	.+82     	; 0x3f12 <errorBuzzer+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e2       	ldi	r20, 0x20	; 32
    3ece:	51 e4       	ldi	r21, 0x41	; 65
    3ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	9e 83       	std	Y+6, r25	; 0x06
    3ee6:	8d 83       	std	Y+5, r24	; 0x05
    3ee8:	0f c0       	rjmp	.+30     	; 0x3f08 <errorBuzzer+0x794>
    3eea:	80 e9       	ldi	r24, 0x90	; 144
    3eec:	91 e0       	ldi	r25, 0x01	; 1
    3eee:	9c 83       	std	Y+4, r25	; 0x04
    3ef0:	8b 83       	std	Y+3, r24	; 0x03
    3ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	f1 f7       	brne	.-4      	; 0x3ef6 <errorBuzzer+0x782>
    3efa:	9c 83       	std	Y+4, r25	; 0x04
    3efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efe:	8d 81       	ldd	r24, Y+5	; 0x05
    3f00:	9e 81       	ldd	r25, Y+6	; 0x06
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	9e 83       	std	Y+6, r25	; 0x06
    3f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f08:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	69 f7       	brne	.-38     	; 0x3eea <errorBuzzer+0x776>
    3f10:	14 c0       	rjmp	.+40     	; 0x3f3a <errorBuzzer+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f12:	6f 81       	ldd	r22, Y+7	; 0x07
    3f14:	78 85       	ldd	r23, Y+8	; 0x08
    3f16:	89 85       	ldd	r24, Y+9	; 0x09
    3f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	9e 83       	std	Y+6, r25	; 0x06
    3f24:	8d 83       	std	Y+5, r24	; 0x05
    3f26:	8d 81       	ldd	r24, Y+5	; 0x05
    3f28:	9e 81       	ldd	r25, Y+6	; 0x06
    3f2a:	9a 83       	std	Y+2, r25	; 0x02
    3f2c:	89 83       	std	Y+1, r24	; 0x01
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	9a 81       	ldd	r25, Y+2	; 0x02
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	f1 f7       	brne	.-4      	; 0x3f32 <errorBuzzer+0x7be>
    3f36:	9a 83       	std	Y+2, r25	; 0x02
    3f38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    3f3a:	82 e0       	ldi	r24, 0x02	; 2
    3f3c:	65 e0       	ldi	r22, 0x05	; 5
    3f3e:	40 e0       	ldi	r20, 0x00	; 0
    3f40:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
}
    3f44:	ce 59       	subi	r28, 0x9E	; 158
    3f46:	df 4f       	sbci	r29, 0xFF	; 255
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	1f 91       	pop	r17
    3f58:	0f 91       	pop	r16
    3f5a:	08 95       	ret

00003f5c <printMyName>:

static void printMyName() {
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
	LCD_displayCustomCharacter(4);
    3f64:	84 e0       	ldi	r24, 0x04	; 4
    3f66:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(0);
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(1);
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(0);
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayString(" ");
    3f7c:	80 e6       	ldi	r24, 0x60	; 96
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
	LCD_displayCustomCharacter(4);
    3f84:	84 e0       	ldi	r24, 0x04	; 4
    3f86:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(3);
    3f8a:	83 e0       	ldi	r24, 0x03	; 3
    3f8c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(0);
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(2);
    3f96:	82 e0       	ldi	r24, 0x02	; 2
    3f98:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(1);
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
	LCD_displayCustomCharacter(0);
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_displayCustomCharacter>
}
    3fa8:	cf 91       	pop	r28
    3faa:	df 91       	pop	r29
    3fac:	08 95       	ret

00003fae <loading>:
static void loading() {
    3fae:	0f 93       	push	r16
    3fb0:	1f 93       	push	r17
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	c6 55       	subi	r28, 0x56	; 86
    3fbc:	d0 40       	sbci	r29, 0x00	; 0
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	f8 94       	cli
    3fc2:	de bf       	out	0x3e, r29	; 62
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 5;
    3fc8:	fe 01       	movw	r30, r28
    3fca:	eb 5a       	subi	r30, 0xAB	; 171
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	85 e0       	ldi	r24, 0x05	; 5
    3fd0:	80 83       	st	Z, r24
    3fd2:	2a c3       	rjmp	.+1620   	; 0x4628 <loading+0x67a>
	while (i--) {
		LCD_SetCursor(1, 4);
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	64 e0       	ldi	r22, 0x04	; 4
    3fd8:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
		LCD_displayCharacter('.');
    3fdc:	8e e2       	ldi	r24, 0x2E	; 46
    3fde:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	ef 5a       	subi	r30, 0xAF	; 175
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	a8 ec       	ldi	r26, 0xC8	; 200
    3fee:	b2 e4       	ldi	r27, 0x42	; 66
    3ff0:	80 83       	st	Z, r24
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	a2 83       	std	Z+2, r26	; 0x02
    3ff6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff8:	8e 01       	movw	r16, r28
    3ffa:	03 5b       	subi	r16, 0xB3	; 179
    3ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffe:	fe 01       	movw	r30, r28
    4000:	ef 5a       	subi	r30, 0xAF	; 175
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	4a e7       	ldi	r20, 0x7A	; 122
    4012:	55 e4       	ldi	r21, 0x45	; 69
    4014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	f8 01       	movw	r30, r16
    401e:	80 83       	st	Z, r24
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	a2 83       	std	Z+2, r26	; 0x02
    4024:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4026:	fe 01       	movw	r30, r28
    4028:	e3 5b       	subi	r30, 0xB3	; 179
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	60 81       	ld	r22, Z
    402e:	71 81       	ldd	r23, Z+1	; 0x01
    4030:	82 81       	ldd	r24, Z+2	; 0x02
    4032:	93 81       	ldd	r25, Z+3	; 0x03
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	40 e8       	ldi	r20, 0x80	; 128
    403a:	5f e3       	ldi	r21, 0x3F	; 63
    403c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4040:	88 23       	and	r24, r24
    4042:	44 f4       	brge	.+16     	; 0x4054 <loading+0xa6>
		__ticks = 1;
    4044:	fe 01       	movw	r30, r28
    4046:	e5 5b       	subi	r30, 0xB5	; 181
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	91 83       	std	Z+1, r25	; 0x01
    4050:	80 83       	st	Z, r24
    4052:	64 c0       	rjmp	.+200    	; 0x411c <loading+0x16e>
	else if (__tmp > 65535)
    4054:	fe 01       	movw	r30, r28
    4056:	e3 5b       	subi	r30, 0xB3	; 179
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	60 81       	ld	r22, Z
    405c:	71 81       	ldd	r23, Z+1	; 0x01
    405e:	82 81       	ldd	r24, Z+2	; 0x02
    4060:	93 81       	ldd	r25, Z+3	; 0x03
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	3f ef       	ldi	r19, 0xFF	; 255
    4066:	4f e7       	ldi	r20, 0x7F	; 127
    4068:	57 e4       	ldi	r21, 0x47	; 71
    406a:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    406e:	18 16       	cp	r1, r24
    4070:	0c f0       	brlt	.+2      	; 0x4074 <loading+0xc6>
    4072:	43 c0       	rjmp	.+134    	; 0x40fa <loading+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4074:	fe 01       	movw	r30, r28
    4076:	ef 5a       	subi	r30, 0xAF	; 175
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	60 81       	ld	r22, Z
    407c:	71 81       	ldd	r23, Z+1	; 0x01
    407e:	82 81       	ldd	r24, Z+2	; 0x02
    4080:	93 81       	ldd	r25, Z+3	; 0x03
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	40 e2       	ldi	r20, 0x20	; 32
    4088:	51 e4       	ldi	r21, 0x41	; 65
    408a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	8e 01       	movw	r16, r28
    4094:	05 5b       	subi	r16, 0xB5	; 181
    4096:	1f 4f       	sbci	r17, 0xFF	; 255
    4098:	bc 01       	movw	r22, r24
    409a:	cd 01       	movw	r24, r26
    409c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	f8 01       	movw	r30, r16
    40a6:	91 83       	std	Z+1, r25	; 0x01
    40a8:	80 83       	st	Z, r24
    40aa:	1f c0       	rjmp	.+62     	; 0x40ea <loading+0x13c>
    40ac:	fe 01       	movw	r30, r28
    40ae:	e7 5b       	subi	r30, 0xB7	; 183
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 e9       	ldi	r24, 0x90	; 144
    40b4:	91 e0       	ldi	r25, 0x01	; 1
    40b6:	91 83       	std	Z+1, r25	; 0x01
    40b8:	80 83       	st	Z, r24
    40ba:	fe 01       	movw	r30, r28
    40bc:	e7 5b       	subi	r30, 0xB7	; 183
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <loading+0x116>
    40c8:	fe 01       	movw	r30, r28
    40ca:	e7 5b       	subi	r30, 0xB7	; 183
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d2:	de 01       	movw	r26, r28
    40d4:	a5 5b       	subi	r26, 0xB5	; 181
    40d6:	bf 4f       	sbci	r27, 0xFF	; 255
    40d8:	fe 01       	movw	r30, r28
    40da:	e5 5b       	subi	r30, 0xB5	; 181
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	11 96       	adiw	r26, 0x01	; 1
    40e6:	9c 93       	st	X, r25
    40e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ea:	fe 01       	movw	r30, r28
    40ec:	e5 5b       	subi	r30, 0xB5	; 181
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	80 81       	ld	r24, Z
    40f2:	91 81       	ldd	r25, Z+1	; 0x01
    40f4:	00 97       	sbiw	r24, 0x00	; 0
    40f6:	d1 f6       	brne	.-76     	; 0x40ac <loading+0xfe>
    40f8:	27 c0       	rjmp	.+78     	; 0x4148 <loading+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40fa:	8e 01       	movw	r16, r28
    40fc:	05 5b       	subi	r16, 0xB5	; 181
    40fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4100:	fe 01       	movw	r30, r28
    4102:	e3 5b       	subi	r30, 0xB3	; 179
    4104:	ff 4f       	sbci	r31, 0xFF	; 255
    4106:	60 81       	ld	r22, Z
    4108:	71 81       	ldd	r23, Z+1	; 0x01
    410a:	82 81       	ldd	r24, Z+2	; 0x02
    410c:	93 81       	ldd	r25, Z+3	; 0x03
    410e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	f8 01       	movw	r30, r16
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
    411c:	de 01       	movw	r26, r28
    411e:	a9 5b       	subi	r26, 0xB9	; 185
    4120:	bf 4f       	sbci	r27, 0xFF	; 255
    4122:	fe 01       	movw	r30, r28
    4124:	e5 5b       	subi	r30, 0xB5	; 181
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	8d 93       	st	X+, r24
    412e:	9c 93       	st	X, r25
    4130:	fe 01       	movw	r30, r28
    4132:	e9 5b       	subi	r30, 0xB9	; 185
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	80 81       	ld	r24, Z
    4138:	91 81       	ldd	r25, Z+1	; 0x01
    413a:	01 97       	sbiw	r24, 0x01	; 1
    413c:	f1 f7       	brne	.-4      	; 0x413a <loading+0x18c>
    413e:	fe 01       	movw	r30, r28
    4140:	e9 5b       	subi	r30, 0xB9	; 185
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	80 83       	st	Z, r24
		_delay_ms(100);
		LCD_SetCursor(1, 3);
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	63 e0       	ldi	r22, 0x03	; 3
    414c:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
		LCD_displayCharacter('.');
    4150:	8e e2       	ldi	r24, 0x2E	; 46
    4152:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    4156:	fe 01       	movw	r30, r28
    4158:	ed 5b       	subi	r30, 0xBD	; 189
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	a8 ec       	ldi	r26, 0xC8	; 200
    4162:	b2 e4       	ldi	r27, 0x42	; 66
    4164:	80 83       	st	Z, r24
    4166:	91 83       	std	Z+1, r25	; 0x01
    4168:	a2 83       	std	Z+2, r26	; 0x02
    416a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    416c:	8e 01       	movw	r16, r28
    416e:	01 5c       	subi	r16, 0xC1	; 193
    4170:	1f 4f       	sbci	r17, 0xFF	; 255
    4172:	fe 01       	movw	r30, r28
    4174:	ed 5b       	subi	r30, 0xBD	; 189
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	60 81       	ld	r22, Z
    417a:	71 81       	ldd	r23, Z+1	; 0x01
    417c:	82 81       	ldd	r24, Z+2	; 0x02
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	4a e7       	ldi	r20, 0x7A	; 122
    4186:	55 e4       	ldi	r21, 0x45	; 69
    4188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	f8 01       	movw	r30, r16
    4192:	80 83       	st	Z, r24
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	a2 83       	std	Z+2, r26	; 0x02
    4198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    419a:	fe 01       	movw	r30, r28
    419c:	ff 96       	adiw	r30, 0x3f	; 63
    419e:	60 81       	ld	r22, Z
    41a0:	71 81       	ldd	r23, Z+1	; 0x01
    41a2:	82 81       	ldd	r24, Z+2	; 0x02
    41a4:	93 81       	ldd	r25, Z+3	; 0x03
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e8       	ldi	r20, 0x80	; 128
    41ac:	5f e3       	ldi	r21, 0x3F	; 63
    41ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    41b2:	88 23       	and	r24, r24
    41b4:	2c f4       	brge	.+10     	; 0x41c0 <loading+0x212>
		__ticks = 1;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	9e af       	std	Y+62, r25	; 0x3e
    41bc:	8d af       	std	Y+61, r24	; 0x3d
    41be:	46 c0       	rjmp	.+140    	; 0x424c <loading+0x29e>
	else if (__tmp > 65535)
    41c0:	fe 01       	movw	r30, r28
    41c2:	ff 96       	adiw	r30, 0x3f	; 63
    41c4:	60 81       	ld	r22, Z
    41c6:	71 81       	ldd	r23, Z+1	; 0x01
    41c8:	82 81       	ldd	r24, Z+2	; 0x02
    41ca:	93 81       	ldd	r25, Z+3	; 0x03
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	3f ef       	ldi	r19, 0xFF	; 255
    41d0:	4f e7       	ldi	r20, 0x7F	; 127
    41d2:	57 e4       	ldi	r21, 0x47	; 71
    41d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    41d8:	18 16       	cp	r1, r24
    41da:	64 f5       	brge	.+88     	; 0x4234 <loading+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41dc:	fe 01       	movw	r30, r28
    41de:	ed 5b       	subi	r30, 0xBD	; 189
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	60 81       	ld	r22, Z
    41e4:	71 81       	ldd	r23, Z+1	; 0x01
    41e6:	82 81       	ldd	r24, Z+2	; 0x02
    41e8:	93 81       	ldd	r25, Z+3	; 0x03
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	40 e2       	ldi	r20, 0x20	; 32
    41f0:	51 e4       	ldi	r21, 0x41	; 65
    41f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	bc 01       	movw	r22, r24
    41fc:	cd 01       	movw	r24, r26
    41fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	9e af       	std	Y+62, r25	; 0x3e
    4208:	8d af       	std	Y+61, r24	; 0x3d
    420a:	0f c0       	rjmp	.+30     	; 0x422a <loading+0x27c>
    420c:	80 e9       	ldi	r24, 0x90	; 144
    420e:	91 e0       	ldi	r25, 0x01	; 1
    4210:	9c af       	std	Y+60, r25	; 0x3c
    4212:	8b af       	std	Y+59, r24	; 0x3b
    4214:	8b ad       	ldd	r24, Y+59	; 0x3b
    4216:	9c ad       	ldd	r25, Y+60	; 0x3c
    4218:	01 97       	sbiw	r24, 0x01	; 1
    421a:	f1 f7       	brne	.-4      	; 0x4218 <loading+0x26a>
    421c:	9c af       	std	Y+60, r25	; 0x3c
    421e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4220:	8d ad       	ldd	r24, Y+61	; 0x3d
    4222:	9e ad       	ldd	r25, Y+62	; 0x3e
    4224:	01 97       	sbiw	r24, 0x01	; 1
    4226:	9e af       	std	Y+62, r25	; 0x3e
    4228:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    422a:	8d ad       	ldd	r24, Y+61	; 0x3d
    422c:	9e ad       	ldd	r25, Y+62	; 0x3e
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	69 f7       	brne	.-38     	; 0x420c <loading+0x25e>
    4232:	16 c0       	rjmp	.+44     	; 0x4260 <loading+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4234:	fe 01       	movw	r30, r28
    4236:	ff 96       	adiw	r30, 0x3f	; 63
    4238:	60 81       	ld	r22, Z
    423a:	71 81       	ldd	r23, Z+1	; 0x01
    423c:	82 81       	ldd	r24, Z+2	; 0x02
    423e:	93 81       	ldd	r25, Z+3	; 0x03
    4240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	9e af       	std	Y+62, r25	; 0x3e
    424a:	8d af       	std	Y+61, r24	; 0x3d
    424c:	8d ad       	ldd	r24, Y+61	; 0x3d
    424e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4250:	9a af       	std	Y+58, r25	; 0x3a
    4252:	89 af       	std	Y+57, r24	; 0x39
    4254:	89 ad       	ldd	r24, Y+57	; 0x39
    4256:	9a ad       	ldd	r25, Y+58	; 0x3a
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	f1 f7       	brne	.-4      	; 0x4258 <loading+0x2aa>
    425c:	9a af       	std	Y+58, r25	; 0x3a
    425e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);
		LCD_SetCursor(1, 2);
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	62 e0       	ldi	r22, 0x02	; 2
    4264:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
		LCD_displayCharacter('.');
    4268:	8e e2       	ldi	r24, 0x2E	; 46
    426a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	a8 ec       	ldi	r26, 0xC8	; 200
    4274:	b2 e4       	ldi	r27, 0x42	; 66
    4276:	8d ab       	std	Y+53, r24	; 0x35
    4278:	9e ab       	std	Y+54, r25	; 0x36
    427a:	af ab       	std	Y+55, r26	; 0x37
    427c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    427e:	6d a9       	ldd	r22, Y+53	; 0x35
    4280:	7e a9       	ldd	r23, Y+54	; 0x36
    4282:	8f a9       	ldd	r24, Y+55	; 0x37
    4284:	98 ad       	ldd	r25, Y+56	; 0x38
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	4a e7       	ldi	r20, 0x7A	; 122
    428c:	55 e4       	ldi	r21, 0x45	; 69
    428e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	89 ab       	std	Y+49, r24	; 0x31
    4298:	9a ab       	std	Y+50, r25	; 0x32
    429a:	ab ab       	std	Y+51, r26	; 0x33
    429c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    429e:	69 a9       	ldd	r22, Y+49	; 0x31
    42a0:	7a a9       	ldd	r23, Y+50	; 0x32
    42a2:	8b a9       	ldd	r24, Y+51	; 0x33
    42a4:	9c a9       	ldd	r25, Y+52	; 0x34
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 e8       	ldi	r20, 0x80	; 128
    42ac:	5f e3       	ldi	r21, 0x3F	; 63
    42ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    42b2:	88 23       	and	r24, r24
    42b4:	2c f4       	brge	.+10     	; 0x42c0 <loading+0x312>
		__ticks = 1;
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	98 ab       	std	Y+48, r25	; 0x30
    42bc:	8f a7       	std	Y+47, r24	; 0x2f
    42be:	3f c0       	rjmp	.+126    	; 0x433e <loading+0x390>
	else if (__tmp > 65535)
    42c0:	69 a9       	ldd	r22, Y+49	; 0x31
    42c2:	7a a9       	ldd	r23, Y+50	; 0x32
    42c4:	8b a9       	ldd	r24, Y+51	; 0x33
    42c6:	9c a9       	ldd	r25, Y+52	; 0x34
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	3f ef       	ldi	r19, 0xFF	; 255
    42cc:	4f e7       	ldi	r20, 0x7F	; 127
    42ce:	57 e4       	ldi	r21, 0x47	; 71
    42d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    42d4:	18 16       	cp	r1, r24
    42d6:	4c f5       	brge	.+82     	; 0x432a <loading+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d8:	6d a9       	ldd	r22, Y+53	; 0x35
    42da:	7e a9       	ldd	r23, Y+54	; 0x36
    42dc:	8f a9       	ldd	r24, Y+55	; 0x37
    42de:	98 ad       	ldd	r25, Y+56	; 0x38
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	40 e2       	ldi	r20, 0x20	; 32
    42e6:	51 e4       	ldi	r21, 0x41	; 65
    42e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42ec:	dc 01       	movw	r26, r24
    42ee:	cb 01       	movw	r24, r22
    42f0:	bc 01       	movw	r22, r24
    42f2:	cd 01       	movw	r24, r26
    42f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	98 ab       	std	Y+48, r25	; 0x30
    42fe:	8f a7       	std	Y+47, r24	; 0x2f
    4300:	0f c0       	rjmp	.+30     	; 0x4320 <loading+0x372>
    4302:	80 e9       	ldi	r24, 0x90	; 144
    4304:	91 e0       	ldi	r25, 0x01	; 1
    4306:	9e a7       	std	Y+46, r25	; 0x2e
    4308:	8d a7       	std	Y+45, r24	; 0x2d
    430a:	8d a5       	ldd	r24, Y+45	; 0x2d
    430c:	9e a5       	ldd	r25, Y+46	; 0x2e
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	f1 f7       	brne	.-4      	; 0x430e <loading+0x360>
    4312:	9e a7       	std	Y+46, r25	; 0x2e
    4314:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4316:	8f a5       	ldd	r24, Y+47	; 0x2f
    4318:	98 a9       	ldd	r25, Y+48	; 0x30
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	98 ab       	std	Y+48, r25	; 0x30
    431e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4320:	8f a5       	ldd	r24, Y+47	; 0x2f
    4322:	98 a9       	ldd	r25, Y+48	; 0x30
    4324:	00 97       	sbiw	r24, 0x00	; 0
    4326:	69 f7       	brne	.-38     	; 0x4302 <loading+0x354>
    4328:	14 c0       	rjmp	.+40     	; 0x4352 <loading+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    432a:	69 a9       	ldd	r22, Y+49	; 0x31
    432c:	7a a9       	ldd	r23, Y+50	; 0x32
    432e:	8b a9       	ldd	r24, Y+51	; 0x33
    4330:	9c a9       	ldd	r25, Y+52	; 0x34
    4332:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4336:	dc 01       	movw	r26, r24
    4338:	cb 01       	movw	r24, r22
    433a:	98 ab       	std	Y+48, r25	; 0x30
    433c:	8f a7       	std	Y+47, r24	; 0x2f
    433e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4340:	98 a9       	ldd	r25, Y+48	; 0x30
    4342:	9c a7       	std	Y+44, r25	; 0x2c
    4344:	8b a7       	std	Y+43, r24	; 0x2b
    4346:	8b a5       	ldd	r24, Y+43	; 0x2b
    4348:	9c a5       	ldd	r25, Y+44	; 0x2c
    434a:	01 97       	sbiw	r24, 0x01	; 1
    434c:	f1 f7       	brne	.-4      	; 0x434a <loading+0x39c>
    434e:	9c a7       	std	Y+44, r25	; 0x2c
    4350:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		LCD_SetCursor(1, 2);
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	62 e0       	ldi	r22, 0x02	; 2
    4356:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
		LCD_displayCharacter(' ');
    435a:	80 e2       	ldi	r24, 0x20	; 32
    435c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	a8 ec       	ldi	r26, 0xC8	; 200
    4366:	b2 e4       	ldi	r27, 0x42	; 66
    4368:	8f a3       	std	Y+39, r24	; 0x27
    436a:	98 a7       	std	Y+40, r25	; 0x28
    436c:	a9 a7       	std	Y+41, r26	; 0x29
    436e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4370:	6f a1       	ldd	r22, Y+39	; 0x27
    4372:	78 a5       	ldd	r23, Y+40	; 0x28
    4374:	89 a5       	ldd	r24, Y+41	; 0x29
    4376:	9a a5       	ldd	r25, Y+42	; 0x2a
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	4a e7       	ldi	r20, 0x7A	; 122
    437e:	55 e4       	ldi	r21, 0x45	; 69
    4380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4384:	dc 01       	movw	r26, r24
    4386:	cb 01       	movw	r24, r22
    4388:	8b a3       	std	Y+35, r24	; 0x23
    438a:	9c a3       	std	Y+36, r25	; 0x24
    438c:	ad a3       	std	Y+37, r26	; 0x25
    438e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4390:	6b a1       	ldd	r22, Y+35	; 0x23
    4392:	7c a1       	ldd	r23, Y+36	; 0x24
    4394:	8d a1       	ldd	r24, Y+37	; 0x25
    4396:	9e a1       	ldd	r25, Y+38	; 0x26
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	40 e8       	ldi	r20, 0x80	; 128
    439e:	5f e3       	ldi	r21, 0x3F	; 63
    43a0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    43a4:	88 23       	and	r24, r24
    43a6:	2c f4       	brge	.+10     	; 0x43b2 <loading+0x404>
		__ticks = 1;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	9a a3       	std	Y+34, r25	; 0x22
    43ae:	89 a3       	std	Y+33, r24	; 0x21
    43b0:	3f c0       	rjmp	.+126    	; 0x4430 <loading+0x482>
	else if (__tmp > 65535)
    43b2:	6b a1       	ldd	r22, Y+35	; 0x23
    43b4:	7c a1       	ldd	r23, Y+36	; 0x24
    43b6:	8d a1       	ldd	r24, Y+37	; 0x25
    43b8:	9e a1       	ldd	r25, Y+38	; 0x26
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	3f ef       	ldi	r19, 0xFF	; 255
    43be:	4f e7       	ldi	r20, 0x7F	; 127
    43c0:	57 e4       	ldi	r21, 0x47	; 71
    43c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    43c6:	18 16       	cp	r1, r24
    43c8:	4c f5       	brge	.+82     	; 0x441c <loading+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ca:	6f a1       	ldd	r22, Y+39	; 0x27
    43cc:	78 a5       	ldd	r23, Y+40	; 0x28
    43ce:	89 a5       	ldd	r24, Y+41	; 0x29
    43d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e2       	ldi	r20, 0x20	; 32
    43d8:	51 e4       	ldi	r21, 0x41	; 65
    43da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	9a a3       	std	Y+34, r25	; 0x22
    43f0:	89 a3       	std	Y+33, r24	; 0x21
    43f2:	0f c0       	rjmp	.+30     	; 0x4412 <loading+0x464>
    43f4:	80 e9       	ldi	r24, 0x90	; 144
    43f6:	91 e0       	ldi	r25, 0x01	; 1
    43f8:	98 a3       	std	Y+32, r25	; 0x20
    43fa:	8f 8f       	std	Y+31, r24	; 0x1f
    43fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43fe:	98 a1       	ldd	r25, Y+32	; 0x20
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <loading+0x452>
    4404:	98 a3       	std	Y+32, r25	; 0x20
    4406:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4408:	89 a1       	ldd	r24, Y+33	; 0x21
    440a:	9a a1       	ldd	r25, Y+34	; 0x22
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	9a a3       	std	Y+34, r25	; 0x22
    4410:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4412:	89 a1       	ldd	r24, Y+33	; 0x21
    4414:	9a a1       	ldd	r25, Y+34	; 0x22
    4416:	00 97       	sbiw	r24, 0x00	; 0
    4418:	69 f7       	brne	.-38     	; 0x43f4 <loading+0x446>
    441a:	14 c0       	rjmp	.+40     	; 0x4444 <loading+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441c:	6b a1       	ldd	r22, Y+35	; 0x23
    441e:	7c a1       	ldd	r23, Y+36	; 0x24
    4420:	8d a1       	ldd	r24, Y+37	; 0x25
    4422:	9e a1       	ldd	r25, Y+38	; 0x26
    4424:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	9a a3       	std	Y+34, r25	; 0x22
    442e:	89 a3       	std	Y+33, r24	; 0x21
    4430:	89 a1       	ldd	r24, Y+33	; 0x21
    4432:	9a a1       	ldd	r25, Y+34	; 0x22
    4434:	9e 8f       	std	Y+30, r25	; 0x1e
    4436:	8d 8f       	std	Y+29, r24	; 0x1d
    4438:	8d 8d       	ldd	r24, Y+29	; 0x1d
    443a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    443c:	01 97       	sbiw	r24, 0x01	; 1
    443e:	f1 f7       	brne	.-4      	; 0x443c <loading+0x48e>
    4440:	9e 8f       	std	Y+30, r25	; 0x1e
    4442:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		LCD_SetCursor(1, 3);
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	63 e0       	ldi	r22, 0x03	; 3
    4448:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
		LCD_displayCharacter(' ');
    444c:	80 e2       	ldi	r24, 0x20	; 32
    444e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	a8 ec       	ldi	r26, 0xC8	; 200
    4458:	b2 e4       	ldi	r27, 0x42	; 66
    445a:	89 8f       	std	Y+25, r24	; 0x19
    445c:	9a 8f       	std	Y+26, r25	; 0x1a
    445e:	ab 8f       	std	Y+27, r26	; 0x1b
    4460:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4462:	69 8d       	ldd	r22, Y+25	; 0x19
    4464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	4a e7       	ldi	r20, 0x7A	; 122
    4470:	55 e4       	ldi	r21, 0x45	; 69
    4472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	8d 8b       	std	Y+21, r24	; 0x15
    447c:	9e 8b       	std	Y+22, r25	; 0x16
    447e:	af 8b       	std	Y+23, r26	; 0x17
    4480:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4482:	6d 89       	ldd	r22, Y+21	; 0x15
    4484:	7e 89       	ldd	r23, Y+22	; 0x16
    4486:	8f 89       	ldd	r24, Y+23	; 0x17
    4488:	98 8d       	ldd	r25, Y+24	; 0x18
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e8       	ldi	r20, 0x80	; 128
    4490:	5f e3       	ldi	r21, 0x3F	; 63
    4492:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4496:	88 23       	and	r24, r24
    4498:	2c f4       	brge	.+10     	; 0x44a4 <loading+0x4f6>
		__ticks = 1;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9c 8b       	std	Y+20, r25	; 0x14
    44a0:	8b 8b       	std	Y+19, r24	; 0x13
    44a2:	3f c0       	rjmp	.+126    	; 0x4522 <loading+0x574>
	else if (__tmp > 65535)
    44a4:	6d 89       	ldd	r22, Y+21	; 0x15
    44a6:	7e 89       	ldd	r23, Y+22	; 0x16
    44a8:	8f 89       	ldd	r24, Y+23	; 0x17
    44aa:	98 8d       	ldd	r25, Y+24	; 0x18
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	3f ef       	ldi	r19, 0xFF	; 255
    44b0:	4f e7       	ldi	r20, 0x7F	; 127
    44b2:	57 e4       	ldi	r21, 0x47	; 71
    44b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    44b8:	18 16       	cp	r1, r24
    44ba:	4c f5       	brge	.+82     	; 0x450e <loading+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44bc:	69 8d       	ldd	r22, Y+25	; 0x19
    44be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e2       	ldi	r20, 0x20	; 32
    44ca:	51 e4       	ldi	r21, 0x41	; 65
    44cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	bc 01       	movw	r22, r24
    44d6:	cd 01       	movw	r24, r26
    44d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	9c 8b       	std	Y+20, r25	; 0x14
    44e2:	8b 8b       	std	Y+19, r24	; 0x13
    44e4:	0f c0       	rjmp	.+30     	; 0x4504 <loading+0x556>
    44e6:	80 e9       	ldi	r24, 0x90	; 144
    44e8:	91 e0       	ldi	r25, 0x01	; 1
    44ea:	9a 8b       	std	Y+18, r25	; 0x12
    44ec:	89 8b       	std	Y+17, r24	; 0x11
    44ee:	89 89       	ldd	r24, Y+17	; 0x11
    44f0:	9a 89       	ldd	r25, Y+18	; 0x12
    44f2:	01 97       	sbiw	r24, 0x01	; 1
    44f4:	f1 f7       	brne	.-4      	; 0x44f2 <loading+0x544>
    44f6:	9a 8b       	std	Y+18, r25	; 0x12
    44f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fa:	8b 89       	ldd	r24, Y+19	; 0x13
    44fc:	9c 89       	ldd	r25, Y+20	; 0x14
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	9c 8b       	std	Y+20, r25	; 0x14
    4502:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4504:	8b 89       	ldd	r24, Y+19	; 0x13
    4506:	9c 89       	ldd	r25, Y+20	; 0x14
    4508:	00 97       	sbiw	r24, 0x00	; 0
    450a:	69 f7       	brne	.-38     	; 0x44e6 <loading+0x538>
    450c:	14 c0       	rjmp	.+40     	; 0x4536 <loading+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450e:	6d 89       	ldd	r22, Y+21	; 0x15
    4510:	7e 89       	ldd	r23, Y+22	; 0x16
    4512:	8f 89       	ldd	r24, Y+23	; 0x17
    4514:	98 8d       	ldd	r25, Y+24	; 0x18
    4516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	9c 8b       	std	Y+20, r25	; 0x14
    4520:	8b 8b       	std	Y+19, r24	; 0x13
    4522:	8b 89       	ldd	r24, Y+19	; 0x13
    4524:	9c 89       	ldd	r25, Y+20	; 0x14
    4526:	98 8b       	std	Y+16, r25	; 0x10
    4528:	8f 87       	std	Y+15, r24	; 0x0f
    452a:	8f 85       	ldd	r24, Y+15	; 0x0f
    452c:	98 89       	ldd	r25, Y+16	; 0x10
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <loading+0x580>
    4532:	98 8b       	std	Y+16, r25	; 0x10
    4534:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		LCD_SetCursor(1, 4);
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	64 e0       	ldi	r22, 0x04	; 4
    453a:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
		LCD_displayCharacter(' ');
    453e:	80 e2       	ldi	r24, 0x20	; 32
    4540:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	a8 ec       	ldi	r26, 0xC8	; 200
    454a:	b2 e4       	ldi	r27, 0x42	; 66
    454c:	8b 87       	std	Y+11, r24	; 0x0b
    454e:	9c 87       	std	Y+12, r25	; 0x0c
    4550:	ad 87       	std	Y+13, r26	; 0x0d
    4552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4554:	6b 85       	ldd	r22, Y+11	; 0x0b
    4556:	7c 85       	ldd	r23, Y+12	; 0x0c
    4558:	8d 85       	ldd	r24, Y+13	; 0x0d
    455a:	9e 85       	ldd	r25, Y+14	; 0x0e
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	4a e7       	ldi	r20, 0x7A	; 122
    4562:	55 e4       	ldi	r21, 0x45	; 69
    4564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	8f 83       	std	Y+7, r24	; 0x07
    456e:	98 87       	std	Y+8, r25	; 0x08
    4570:	a9 87       	std	Y+9, r26	; 0x09
    4572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4574:	6f 81       	ldd	r22, Y+7	; 0x07
    4576:	78 85       	ldd	r23, Y+8	; 0x08
    4578:	89 85       	ldd	r24, Y+9	; 0x09
    457a:	9a 85       	ldd	r25, Y+10	; 0x0a
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e8       	ldi	r20, 0x80	; 128
    4582:	5f e3       	ldi	r21, 0x3F	; 63
    4584:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4588:	88 23       	and	r24, r24
    458a:	2c f4       	brge	.+10     	; 0x4596 <loading+0x5e8>
		__ticks = 1;
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	9e 83       	std	Y+6, r25	; 0x06
    4592:	8d 83       	std	Y+5, r24	; 0x05
    4594:	3f c0       	rjmp	.+126    	; 0x4614 <loading+0x666>
	else if (__tmp > 65535)
    4596:	6f 81       	ldd	r22, Y+7	; 0x07
    4598:	78 85       	ldd	r23, Y+8	; 0x08
    459a:	89 85       	ldd	r24, Y+9	; 0x09
    459c:	9a 85       	ldd	r25, Y+10	; 0x0a
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	3f ef       	ldi	r19, 0xFF	; 255
    45a2:	4f e7       	ldi	r20, 0x7F	; 127
    45a4:	57 e4       	ldi	r21, 0x47	; 71
    45a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    45aa:	18 16       	cp	r1, r24
    45ac:	4c f5       	brge	.+82     	; 0x4600 <loading+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    45b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    45b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e2       	ldi	r20, 0x20	; 32
    45bc:	51 e4       	ldi	r21, 0x41	; 65
    45be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	bc 01       	movw	r22, r24
    45c8:	cd 01       	movw	r24, r26
    45ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	9e 83       	std	Y+6, r25	; 0x06
    45d4:	8d 83       	std	Y+5, r24	; 0x05
    45d6:	0f c0       	rjmp	.+30     	; 0x45f6 <loading+0x648>
    45d8:	80 e9       	ldi	r24, 0x90	; 144
    45da:	91 e0       	ldi	r25, 0x01	; 1
    45dc:	9c 83       	std	Y+4, r25	; 0x04
    45de:	8b 83       	std	Y+3, r24	; 0x03
    45e0:	8b 81       	ldd	r24, Y+3	; 0x03
    45e2:	9c 81       	ldd	r25, Y+4	; 0x04
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <loading+0x636>
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ec:	8d 81       	ldd	r24, Y+5	; 0x05
    45ee:	9e 81       	ldd	r25, Y+6	; 0x06
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	9e 83       	std	Y+6, r25	; 0x06
    45f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f6:	8d 81       	ldd	r24, Y+5	; 0x05
    45f8:	9e 81       	ldd	r25, Y+6	; 0x06
    45fa:	00 97       	sbiw	r24, 0x00	; 0
    45fc:	69 f7       	brne	.-38     	; 0x45d8 <loading+0x62a>
    45fe:	14 c0       	rjmp	.+40     	; 0x4628 <loading+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4600:	6f 81       	ldd	r22, Y+7	; 0x07
    4602:	78 85       	ldd	r23, Y+8	; 0x08
    4604:	89 85       	ldd	r24, Y+9	; 0x09
    4606:	9a 85       	ldd	r25, Y+10	; 0x0a
    4608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	9e 83       	std	Y+6, r25	; 0x06
    4612:	8d 83       	std	Y+5, r24	; 0x05
    4614:	8d 81       	ldd	r24, Y+5	; 0x05
    4616:	9e 81       	ldd	r25, Y+6	; 0x06
    4618:	9a 83       	std	Y+2, r25	; 0x02
    461a:	89 83       	std	Y+1, r24	; 0x01
    461c:	89 81       	ldd	r24, Y+1	; 0x01
    461e:	9a 81       	ldd	r25, Y+2	; 0x02
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	f1 f7       	brne	.-4      	; 0x4620 <loading+0x672>
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayCustomCharacter(1);
	LCD_displayCustomCharacter(0);
}
static void loading() {
	uint8 i = 5;
	while (i--) {
    4628:	fe 01       	movw	r30, r28
    462a:	eb 5a       	subi	r30, 0xAB	; 171
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	80 81       	ld	r24, Z
    4630:	67 96       	adiw	r28, 0x17	; 23
    4632:	8f af       	std	Y+63, r24	; 0x3f
    4634:	67 97       	sbiw	r28, 0x17	; 23
    4636:	67 96       	adiw	r28, 0x17	; 23
    4638:	ef ad       	ldd	r30, Y+63	; 0x3f
    463a:	67 97       	sbiw	r28, 0x17	; 23
    463c:	ee 23       	and	r30, r30
    463e:	21 f0       	breq	.+8      	; 0x4648 <loading+0x69a>
    4640:	f1 e0       	ldi	r31, 0x01	; 1
    4642:	67 96       	adiw	r28, 0x17	; 23
    4644:	ff af       	std	Y+63, r31	; 0x3f
    4646:	67 97       	sbiw	r28, 0x17	; 23
    4648:	67 96       	adiw	r28, 0x17	; 23
    464a:	9f ad       	ldd	r25, Y+63	; 0x3f
    464c:	67 97       	sbiw	r28, 0x17	; 23
    464e:	de 01       	movw	r26, r28
    4650:	ab 5a       	subi	r26, 0xAB	; 171
    4652:	bf 4f       	sbci	r27, 0xFF	; 255
    4654:	fe 01       	movw	r30, r28
    4656:	eb 5a       	subi	r30, 0xAB	; 171
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	80 81       	ld	r24, Z
    465c:	81 50       	subi	r24, 0x01	; 1
    465e:	8c 93       	st	X, r24
    4660:	99 23       	and	r25, r25
    4662:	09 f0       	breq	.+2      	; 0x4666 <loading+0x6b8>
    4664:	b7 cc       	rjmp	.-1682   	; 0x3fd4 <loading+0x26>
		_delay_ms(100);
		LCD_SetCursor(1, 4);
		LCD_displayCharacter(' ');
		_delay_ms(100);
	}
}
    4666:	ca 5a       	subi	r28, 0xAA	; 170
    4668:	df 4f       	sbci	r29, 0xFF	; 255
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	cf 91       	pop	r28
    4676:	df 91       	pop	r29
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	08 95       	ret

0000467e <main>:
int main(void) {
    467e:	af 92       	push	r10
    4680:	bf 92       	push	r11
    4682:	cf 92       	push	r12
    4684:	df 92       	push	r13
    4686:	ef 92       	push	r14
    4688:	ff 92       	push	r15
    468a:	0f 93       	push	r16
    468c:	1f 93       	push	r17
    468e:	df 93       	push	r29
    4690:	cf 93       	push	r28
    4692:	cd b7       	in	r28, 0x3d	; 61
    4694:	de b7       	in	r29, 0x3e	; 62
    4696:	ca 5c       	subi	r28, 0xCA	; 202
    4698:	d0 40       	sbci	r29, 0x00	; 0
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	f8 94       	cli
    469e:	de bf       	out	0x3e, r29	; 62
    46a0:	0f be       	out	0x3f, r0	; 63
    46a2:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    46a4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <LCD_Init>
	GPIO_setupPinDirection(PORTC_ID, PIN5_ID, PIN_OUTPUT);
    46a8:	82 e0       	ldi	r24, 0x02	; 2
    46aa:	65 e0       	ldi	r22, 0x05	; 5
    46ac:	41 e0       	ldi	r20, 0x01	; 1
    46ae:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
    46b2:	82 e0       	ldi	r24, 0x02	; 2
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <GPIO_setupPinDirection>

	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    46bc:	82 e0       	ldi	r24, 0x02	; 2
    46be:	65 e0       	ldi	r22, 0x05	; 5
    46c0:	40 e0       	ldi	r20, 0x00	; 0
    46c2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    46c6:	82 e0       	ldi	r24, 0x02	; 2
    46c8:	60 e0       	ldi	r22, 0x00	; 0
    46ca:	40 e0       	ldi	r20, 0x00	; 0
    46cc:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>

	uint8 char1m[] = { 31, 17, 21, 1, 31, 31, 31 };
    46d0:	9e 01       	movw	r18, r28
    46d2:	24 5c       	subi	r18, 0xC4	; 196
    46d4:	3f 4f       	sbci	r19, 0xFF	; 255
    46d6:	ce 54       	subi	r28, 0x4E	; 78
    46d8:	df 4f       	sbci	r29, 0xFF	; 255
    46da:	39 83       	std	Y+1, r19	; 0x01
    46dc:	28 83       	st	Y, r18
    46de:	c2 5b       	subi	r28, 0xB2	; 178
    46e0:	d0 40       	sbci	r29, 0x00	; 0
    46e2:	83 ed       	ldi	r24, 0xD3	; 211
    46e4:	91 e0       	ldi	r25, 0x01	; 1
    46e6:	cc 54       	subi	r28, 0x4C	; 76
    46e8:	df 4f       	sbci	r29, 0xFF	; 255
    46ea:	99 83       	std	Y+1, r25	; 0x01
    46ec:	88 83       	st	Y, r24
    46ee:	c4 5b       	subi	r28, 0xB4	; 180
    46f0:	d0 40       	sbci	r29, 0x00	; 0
    46f2:	97 e0       	ldi	r25, 0x07	; 7
    46f4:	ca 54       	subi	r28, 0x4A	; 74
    46f6:	df 4f       	sbci	r29, 0xFF	; 255
    46f8:	98 83       	st	Y, r25
    46fa:	c6 5b       	subi	r28, 0xB6	; 182
    46fc:	d0 40       	sbci	r29, 0x00	; 0
    46fe:	cc 54       	subi	r28, 0x4C	; 76
    4700:	df 4f       	sbci	r29, 0xFF	; 255
    4702:	e8 81       	ld	r30, Y
    4704:	f9 81       	ldd	r31, Y+1	; 0x01
    4706:	c4 5b       	subi	r28, 0xB4	; 180
    4708:	d0 40       	sbci	r29, 0x00	; 0
    470a:	00 80       	ld	r0, Z
    470c:	cc 54       	subi	r28, 0x4C	; 76
    470e:	df 4f       	sbci	r29, 0xFF	; 255
    4710:	28 81       	ld	r18, Y
    4712:	39 81       	ldd	r19, Y+1	; 0x01
    4714:	c4 5b       	subi	r28, 0xB4	; 180
    4716:	d0 40       	sbci	r29, 0x00	; 0
    4718:	2f 5f       	subi	r18, 0xFF	; 255
    471a:	3f 4f       	sbci	r19, 0xFF	; 255
    471c:	cc 54       	subi	r28, 0x4C	; 76
    471e:	df 4f       	sbci	r29, 0xFF	; 255
    4720:	39 83       	std	Y+1, r19	; 0x01
    4722:	28 83       	st	Y, r18
    4724:	c4 5b       	subi	r28, 0xB4	; 180
    4726:	d0 40       	sbci	r29, 0x00	; 0
    4728:	ce 54       	subi	r28, 0x4E	; 78
    472a:	df 4f       	sbci	r29, 0xFF	; 255
    472c:	e8 81       	ld	r30, Y
    472e:	f9 81       	ldd	r31, Y+1	; 0x01
    4730:	c2 5b       	subi	r28, 0xB2	; 178
    4732:	d0 40       	sbci	r29, 0x00	; 0
    4734:	00 82       	st	Z, r0
    4736:	ce 54       	subi	r28, 0x4E	; 78
    4738:	df 4f       	sbci	r29, 0xFF	; 255
    473a:	28 81       	ld	r18, Y
    473c:	39 81       	ldd	r19, Y+1	; 0x01
    473e:	c2 5b       	subi	r28, 0xB2	; 178
    4740:	d0 40       	sbci	r29, 0x00	; 0
    4742:	2f 5f       	subi	r18, 0xFF	; 255
    4744:	3f 4f       	sbci	r19, 0xFF	; 255
    4746:	ce 54       	subi	r28, 0x4E	; 78
    4748:	df 4f       	sbci	r29, 0xFF	; 255
    474a:	39 83       	std	Y+1, r19	; 0x01
    474c:	28 83       	st	Y, r18
    474e:	c2 5b       	subi	r28, 0xB2	; 178
    4750:	d0 40       	sbci	r29, 0x00	; 0
    4752:	ca 54       	subi	r28, 0x4A	; 74
    4754:	df 4f       	sbci	r29, 0xFF	; 255
    4756:	38 81       	ld	r19, Y
    4758:	c6 5b       	subi	r28, 0xB6	; 182
    475a:	d0 40       	sbci	r29, 0x00	; 0
    475c:	31 50       	subi	r19, 0x01	; 1
    475e:	ca 54       	subi	r28, 0x4A	; 74
    4760:	df 4f       	sbci	r29, 0xFF	; 255
    4762:	38 83       	st	Y, r19
    4764:	c6 5b       	subi	r28, 0xB6	; 182
    4766:	d0 40       	sbci	r29, 0x00	; 0
    4768:	ca 54       	subi	r28, 0x4A	; 74
    476a:	df 4f       	sbci	r29, 0xFF	; 255
    476c:	88 81       	ld	r24, Y
    476e:	c6 5b       	subi	r28, 0xB6	; 182
    4770:	d0 40       	sbci	r29, 0x00	; 0
    4772:	88 23       	and	r24, r24
    4774:	21 f6       	brne	.-120    	; 0x46fe <main+0x80>
	uint8 char27[] = { 31, 17, 29, 1, 31, 31, 31 };
    4776:	ce 01       	movw	r24, r28
    4778:	8d 5b       	subi	r24, 0xBD	; 189
    477a:	9f 4f       	sbci	r25, 0xFF	; 255
    477c:	c9 54       	subi	r28, 0x49	; 73
    477e:	df 4f       	sbci	r29, 0xFF	; 255
    4780:	99 83       	std	Y+1, r25	; 0x01
    4782:	88 83       	st	Y, r24
    4784:	c7 5b       	subi	r28, 0xB7	; 183
    4786:	d0 40       	sbci	r29, 0x00	; 0
    4788:	ec ec       	ldi	r30, 0xCC	; 204
    478a:	f1 e0       	ldi	r31, 0x01	; 1
    478c:	c7 54       	subi	r28, 0x47	; 71
    478e:	df 4f       	sbci	r29, 0xFF	; 255
    4790:	f9 83       	std	Y+1, r31	; 0x01
    4792:	e8 83       	st	Y, r30
    4794:	c9 5b       	subi	r28, 0xB9	; 185
    4796:	d0 40       	sbci	r29, 0x00	; 0
    4798:	f7 e0       	ldi	r31, 0x07	; 7
    479a:	c5 54       	subi	r28, 0x45	; 69
    479c:	df 4f       	sbci	r29, 0xFF	; 255
    479e:	f8 83       	st	Y, r31
    47a0:	cb 5b       	subi	r28, 0xBB	; 187
    47a2:	d0 40       	sbci	r29, 0x00	; 0
    47a4:	c7 54       	subi	r28, 0x47	; 71
    47a6:	df 4f       	sbci	r29, 0xFF	; 255
    47a8:	e8 81       	ld	r30, Y
    47aa:	f9 81       	ldd	r31, Y+1	; 0x01
    47ac:	c9 5b       	subi	r28, 0xB9	; 185
    47ae:	d0 40       	sbci	r29, 0x00	; 0
    47b0:	00 80       	ld	r0, Z
    47b2:	c7 54       	subi	r28, 0x47	; 71
    47b4:	df 4f       	sbci	r29, 0xFF	; 255
    47b6:	28 81       	ld	r18, Y
    47b8:	39 81       	ldd	r19, Y+1	; 0x01
    47ba:	c9 5b       	subi	r28, 0xB9	; 185
    47bc:	d0 40       	sbci	r29, 0x00	; 0
    47be:	2f 5f       	subi	r18, 0xFF	; 255
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	c7 54       	subi	r28, 0x47	; 71
    47c4:	df 4f       	sbci	r29, 0xFF	; 255
    47c6:	39 83       	std	Y+1, r19	; 0x01
    47c8:	28 83       	st	Y, r18
    47ca:	c9 5b       	subi	r28, 0xB9	; 185
    47cc:	d0 40       	sbci	r29, 0x00	; 0
    47ce:	c9 54       	subi	r28, 0x49	; 73
    47d0:	df 4f       	sbci	r29, 0xFF	; 255
    47d2:	e8 81       	ld	r30, Y
    47d4:	f9 81       	ldd	r31, Y+1	; 0x01
    47d6:	c7 5b       	subi	r28, 0xB7	; 183
    47d8:	d0 40       	sbci	r29, 0x00	; 0
    47da:	00 82       	st	Z, r0
    47dc:	c9 54       	subi	r28, 0x49	; 73
    47de:	df 4f       	sbci	r29, 0xFF	; 255
    47e0:	28 81       	ld	r18, Y
    47e2:	39 81       	ldd	r19, Y+1	; 0x01
    47e4:	c7 5b       	subi	r28, 0xB7	; 183
    47e6:	d0 40       	sbci	r29, 0x00	; 0
    47e8:	2f 5f       	subi	r18, 0xFF	; 255
    47ea:	3f 4f       	sbci	r19, 0xFF	; 255
    47ec:	c9 54       	subi	r28, 0x49	; 73
    47ee:	df 4f       	sbci	r29, 0xFF	; 255
    47f0:	39 83       	std	Y+1, r19	; 0x01
    47f2:	28 83       	st	Y, r18
    47f4:	c7 5b       	subi	r28, 0xB7	; 183
    47f6:	d0 40       	sbci	r29, 0x00	; 0
    47f8:	c5 54       	subi	r28, 0x45	; 69
    47fa:	df 4f       	sbci	r29, 0xFF	; 255
    47fc:	38 81       	ld	r19, Y
    47fe:	cb 5b       	subi	r28, 0xBB	; 187
    4800:	d0 40       	sbci	r29, 0x00	; 0
    4802:	31 50       	subi	r19, 0x01	; 1
    4804:	c5 54       	subi	r28, 0x45	; 69
    4806:	df 4f       	sbci	r29, 0xFF	; 255
    4808:	38 83       	st	Y, r19
    480a:	cb 5b       	subi	r28, 0xBB	; 187
    480c:	d0 40       	sbci	r29, 0x00	; 0
    480e:	c5 54       	subi	r28, 0x45	; 69
    4810:	df 4f       	sbci	r29, 0xFF	; 255
    4812:	88 81       	ld	r24, Y
    4814:	cb 5b       	subi	r28, 0xBB	; 187
    4816:	d0 40       	sbci	r29, 0x00	; 0
    4818:	88 23       	and	r24, r24
    481a:	21 f6       	brne	.-120    	; 0x47a4 <main+0x126>
	uint8 char3[] = { 31, 31, 31, 0, 31, 31, 31 };
    481c:	ce 01       	movw	r24, r28
    481e:	86 5b       	subi	r24, 0xB6	; 182
    4820:	9f 4f       	sbci	r25, 0xFF	; 255
    4822:	c4 54       	subi	r28, 0x44	; 68
    4824:	df 4f       	sbci	r29, 0xFF	; 255
    4826:	99 83       	std	Y+1, r25	; 0x01
    4828:	88 83       	st	Y, r24
    482a:	cc 5b       	subi	r28, 0xBC	; 188
    482c:	d0 40       	sbci	r29, 0x00	; 0
    482e:	e5 ec       	ldi	r30, 0xC5	; 197
    4830:	f1 e0       	ldi	r31, 0x01	; 1
    4832:	c2 54       	subi	r28, 0x42	; 66
    4834:	df 4f       	sbci	r29, 0xFF	; 255
    4836:	f9 83       	std	Y+1, r31	; 0x01
    4838:	e8 83       	st	Y, r30
    483a:	ce 5b       	subi	r28, 0xBE	; 190
    483c:	d0 40       	sbci	r29, 0x00	; 0
    483e:	f7 e0       	ldi	r31, 0x07	; 7
    4840:	c0 54       	subi	r28, 0x40	; 64
    4842:	df 4f       	sbci	r29, 0xFF	; 255
    4844:	f8 83       	st	Y, r31
    4846:	c0 5c       	subi	r28, 0xC0	; 192
    4848:	d0 40       	sbci	r29, 0x00	; 0
    484a:	c2 54       	subi	r28, 0x42	; 66
    484c:	df 4f       	sbci	r29, 0xFF	; 255
    484e:	e8 81       	ld	r30, Y
    4850:	f9 81       	ldd	r31, Y+1	; 0x01
    4852:	ce 5b       	subi	r28, 0xBE	; 190
    4854:	d0 40       	sbci	r29, 0x00	; 0
    4856:	00 80       	ld	r0, Z
    4858:	c2 54       	subi	r28, 0x42	; 66
    485a:	df 4f       	sbci	r29, 0xFF	; 255
    485c:	28 81       	ld	r18, Y
    485e:	39 81       	ldd	r19, Y+1	; 0x01
    4860:	ce 5b       	subi	r28, 0xBE	; 190
    4862:	d0 40       	sbci	r29, 0x00	; 0
    4864:	2f 5f       	subi	r18, 0xFF	; 255
    4866:	3f 4f       	sbci	r19, 0xFF	; 255
    4868:	c2 54       	subi	r28, 0x42	; 66
    486a:	df 4f       	sbci	r29, 0xFF	; 255
    486c:	39 83       	std	Y+1, r19	; 0x01
    486e:	28 83       	st	Y, r18
    4870:	ce 5b       	subi	r28, 0xBE	; 190
    4872:	d0 40       	sbci	r29, 0x00	; 0
    4874:	c4 54       	subi	r28, 0x44	; 68
    4876:	df 4f       	sbci	r29, 0xFF	; 255
    4878:	e8 81       	ld	r30, Y
    487a:	f9 81       	ldd	r31, Y+1	; 0x01
    487c:	cc 5b       	subi	r28, 0xBC	; 188
    487e:	d0 40       	sbci	r29, 0x00	; 0
    4880:	00 82       	st	Z, r0
    4882:	c4 54       	subi	r28, 0x44	; 68
    4884:	df 4f       	sbci	r29, 0xFF	; 255
    4886:	28 81       	ld	r18, Y
    4888:	39 81       	ldd	r19, Y+1	; 0x01
    488a:	cc 5b       	subi	r28, 0xBC	; 188
    488c:	d0 40       	sbci	r29, 0x00	; 0
    488e:	2f 5f       	subi	r18, 0xFF	; 255
    4890:	3f 4f       	sbci	r19, 0xFF	; 255
    4892:	c4 54       	subi	r28, 0x44	; 68
    4894:	df 4f       	sbci	r29, 0xFF	; 255
    4896:	39 83       	std	Y+1, r19	; 0x01
    4898:	28 83       	st	Y, r18
    489a:	cc 5b       	subi	r28, 0xBC	; 188
    489c:	d0 40       	sbci	r29, 0x00	; 0
    489e:	c0 54       	subi	r28, 0x40	; 64
    48a0:	df 4f       	sbci	r29, 0xFF	; 255
    48a2:	38 81       	ld	r19, Y
    48a4:	c0 5c       	subi	r28, 0xC0	; 192
    48a6:	d0 40       	sbci	r29, 0x00	; 0
    48a8:	31 50       	subi	r19, 0x01	; 1
    48aa:	c0 54       	subi	r28, 0x40	; 64
    48ac:	df 4f       	sbci	r29, 0xFF	; 255
    48ae:	38 83       	st	Y, r19
    48b0:	c0 5c       	subi	r28, 0xC0	; 192
    48b2:	d0 40       	sbci	r29, 0x00	; 0
    48b4:	c0 54       	subi	r28, 0x40	; 64
    48b6:	df 4f       	sbci	r29, 0xFF	; 255
    48b8:	88 81       	ld	r24, Y
    48ba:	c0 5c       	subi	r28, 0xC0	; 192
    48bc:	d0 40       	sbci	r29, 0x00	; 0
    48be:	88 23       	and	r24, r24
    48c0:	21 f6       	brne	.-120    	; 0x484a <main+0x1cc>
	uint8 char4w[] = { 31, 17, 21, 16, 29, 17, 31 };
    48c2:	ce 01       	movw	r24, r28
    48c4:	8f 5a       	subi	r24, 0xAF	; 175
    48c6:	9f 4f       	sbci	r25, 0xFF	; 255
    48c8:	cf 53       	subi	r28, 0x3F	; 63
    48ca:	df 4f       	sbci	r29, 0xFF	; 255
    48cc:	99 83       	std	Y+1, r25	; 0x01
    48ce:	88 83       	st	Y, r24
    48d0:	c1 5c       	subi	r28, 0xC1	; 193
    48d2:	d0 40       	sbci	r29, 0x00	; 0
    48d4:	ee eb       	ldi	r30, 0xBE	; 190
    48d6:	f1 e0       	ldi	r31, 0x01	; 1
    48d8:	cd 53       	subi	r28, 0x3D	; 61
    48da:	df 4f       	sbci	r29, 0xFF	; 255
    48dc:	f9 83       	std	Y+1, r31	; 0x01
    48de:	e8 83       	st	Y, r30
    48e0:	c3 5c       	subi	r28, 0xC3	; 195
    48e2:	d0 40       	sbci	r29, 0x00	; 0
    48e4:	f7 e0       	ldi	r31, 0x07	; 7
    48e6:	cb 53       	subi	r28, 0x3B	; 59
    48e8:	df 4f       	sbci	r29, 0xFF	; 255
    48ea:	f8 83       	st	Y, r31
    48ec:	c5 5c       	subi	r28, 0xC5	; 197
    48ee:	d0 40       	sbci	r29, 0x00	; 0
    48f0:	cd 53       	subi	r28, 0x3D	; 61
    48f2:	df 4f       	sbci	r29, 0xFF	; 255
    48f4:	e8 81       	ld	r30, Y
    48f6:	f9 81       	ldd	r31, Y+1	; 0x01
    48f8:	c3 5c       	subi	r28, 0xC3	; 195
    48fa:	d0 40       	sbci	r29, 0x00	; 0
    48fc:	00 80       	ld	r0, Z
    48fe:	cd 53       	subi	r28, 0x3D	; 61
    4900:	df 4f       	sbci	r29, 0xFF	; 255
    4902:	28 81       	ld	r18, Y
    4904:	39 81       	ldd	r19, Y+1	; 0x01
    4906:	c3 5c       	subi	r28, 0xC3	; 195
    4908:	d0 40       	sbci	r29, 0x00	; 0
    490a:	2f 5f       	subi	r18, 0xFF	; 255
    490c:	3f 4f       	sbci	r19, 0xFF	; 255
    490e:	cd 53       	subi	r28, 0x3D	; 61
    4910:	df 4f       	sbci	r29, 0xFF	; 255
    4912:	39 83       	std	Y+1, r19	; 0x01
    4914:	28 83       	st	Y, r18
    4916:	c3 5c       	subi	r28, 0xC3	; 195
    4918:	d0 40       	sbci	r29, 0x00	; 0
    491a:	cf 53       	subi	r28, 0x3F	; 63
    491c:	df 4f       	sbci	r29, 0xFF	; 255
    491e:	e8 81       	ld	r30, Y
    4920:	f9 81       	ldd	r31, Y+1	; 0x01
    4922:	c1 5c       	subi	r28, 0xC1	; 193
    4924:	d0 40       	sbci	r29, 0x00	; 0
    4926:	00 82       	st	Z, r0
    4928:	cf 53       	subi	r28, 0x3F	; 63
    492a:	df 4f       	sbci	r29, 0xFF	; 255
    492c:	28 81       	ld	r18, Y
    492e:	39 81       	ldd	r19, Y+1	; 0x01
    4930:	c1 5c       	subi	r28, 0xC1	; 193
    4932:	d0 40       	sbci	r29, 0x00	; 0
    4934:	2f 5f       	subi	r18, 0xFF	; 255
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	cf 53       	subi	r28, 0x3F	; 63
    493a:	df 4f       	sbci	r29, 0xFF	; 255
    493c:	39 83       	std	Y+1, r19	; 0x01
    493e:	28 83       	st	Y, r18
    4940:	c1 5c       	subi	r28, 0xC1	; 193
    4942:	d0 40       	sbci	r29, 0x00	; 0
    4944:	cb 53       	subi	r28, 0x3B	; 59
    4946:	df 4f       	sbci	r29, 0xFF	; 255
    4948:	38 81       	ld	r19, Y
    494a:	c5 5c       	subi	r28, 0xC5	; 197
    494c:	d0 40       	sbci	r29, 0x00	; 0
    494e:	31 50       	subi	r19, 0x01	; 1
    4950:	cb 53       	subi	r28, 0x3B	; 59
    4952:	df 4f       	sbci	r29, 0xFF	; 255
    4954:	38 83       	st	Y, r19
    4956:	c5 5c       	subi	r28, 0xC5	; 197
    4958:	d0 40       	sbci	r29, 0x00	; 0
    495a:	cb 53       	subi	r28, 0x3B	; 59
    495c:	df 4f       	sbci	r29, 0xFF	; 255
    495e:	88 81       	ld	r24, Y
    4960:	c5 5c       	subi	r28, 0xC5	; 197
    4962:	d0 40       	sbci	r29, 0x00	; 0
    4964:	88 23       	and	r24, r24
    4966:	21 f6       	brne	.-120    	; 0x48f0 <main+0x272>
	uint8 char5d[] = { 31, 29, 29, 17, 31, 31, 31 };
    4968:	ce 01       	movw	r24, r28
    496a:	88 5a       	subi	r24, 0xA8	; 168
    496c:	9f 4f       	sbci	r25, 0xFF	; 255
    496e:	ca 53       	subi	r28, 0x3A	; 58
    4970:	df 4f       	sbci	r29, 0xFF	; 255
    4972:	99 83       	std	Y+1, r25	; 0x01
    4974:	88 83       	st	Y, r24
    4976:	c6 5c       	subi	r28, 0xC6	; 198
    4978:	d0 40       	sbci	r29, 0x00	; 0
    497a:	e7 eb       	ldi	r30, 0xB7	; 183
    497c:	f1 e0       	ldi	r31, 0x01	; 1
    497e:	c8 53       	subi	r28, 0x38	; 56
    4980:	df 4f       	sbci	r29, 0xFF	; 255
    4982:	f9 83       	std	Y+1, r31	; 0x01
    4984:	e8 83       	st	Y, r30
    4986:	c8 5c       	subi	r28, 0xC8	; 200
    4988:	d0 40       	sbci	r29, 0x00	; 0
    498a:	f7 e0       	ldi	r31, 0x07	; 7
    498c:	c6 53       	subi	r28, 0x36	; 54
    498e:	df 4f       	sbci	r29, 0xFF	; 255
    4990:	f8 83       	st	Y, r31
    4992:	ca 5c       	subi	r28, 0xCA	; 202
    4994:	d0 40       	sbci	r29, 0x00	; 0
    4996:	c8 53       	subi	r28, 0x38	; 56
    4998:	df 4f       	sbci	r29, 0xFF	; 255
    499a:	e8 81       	ld	r30, Y
    499c:	f9 81       	ldd	r31, Y+1	; 0x01
    499e:	c8 5c       	subi	r28, 0xC8	; 200
    49a0:	d0 40       	sbci	r29, 0x00	; 0
    49a2:	00 80       	ld	r0, Z
    49a4:	c8 53       	subi	r28, 0x38	; 56
    49a6:	df 4f       	sbci	r29, 0xFF	; 255
    49a8:	28 81       	ld	r18, Y
    49aa:	39 81       	ldd	r19, Y+1	; 0x01
    49ac:	c8 5c       	subi	r28, 0xC8	; 200
    49ae:	d0 40       	sbci	r29, 0x00	; 0
    49b0:	2f 5f       	subi	r18, 0xFF	; 255
    49b2:	3f 4f       	sbci	r19, 0xFF	; 255
    49b4:	c8 53       	subi	r28, 0x38	; 56
    49b6:	df 4f       	sbci	r29, 0xFF	; 255
    49b8:	39 83       	std	Y+1, r19	; 0x01
    49ba:	28 83       	st	Y, r18
    49bc:	c8 5c       	subi	r28, 0xC8	; 200
    49be:	d0 40       	sbci	r29, 0x00	; 0
    49c0:	ca 53       	subi	r28, 0x3A	; 58
    49c2:	df 4f       	sbci	r29, 0xFF	; 255
    49c4:	e8 81       	ld	r30, Y
    49c6:	f9 81       	ldd	r31, Y+1	; 0x01
    49c8:	c6 5c       	subi	r28, 0xC6	; 198
    49ca:	d0 40       	sbci	r29, 0x00	; 0
    49cc:	00 82       	st	Z, r0
    49ce:	ca 53       	subi	r28, 0x3A	; 58
    49d0:	df 4f       	sbci	r29, 0xFF	; 255
    49d2:	28 81       	ld	r18, Y
    49d4:	39 81       	ldd	r19, Y+1	; 0x01
    49d6:	c6 5c       	subi	r28, 0xC6	; 198
    49d8:	d0 40       	sbci	r29, 0x00	; 0
    49da:	2f 5f       	subi	r18, 0xFF	; 255
    49dc:	3f 4f       	sbci	r19, 0xFF	; 255
    49de:	ca 53       	subi	r28, 0x3A	; 58
    49e0:	df 4f       	sbci	r29, 0xFF	; 255
    49e2:	39 83       	std	Y+1, r19	; 0x01
    49e4:	28 83       	st	Y, r18
    49e6:	c6 5c       	subi	r28, 0xC6	; 198
    49e8:	d0 40       	sbci	r29, 0x00	; 0
    49ea:	c6 53       	subi	r28, 0x36	; 54
    49ec:	df 4f       	sbci	r29, 0xFF	; 255
    49ee:	38 81       	ld	r19, Y
    49f0:	ca 5c       	subi	r28, 0xCA	; 202
    49f2:	d0 40       	sbci	r29, 0x00	; 0
    49f4:	31 50       	subi	r19, 0x01	; 1
    49f6:	c6 53       	subi	r28, 0x36	; 54
    49f8:	df 4f       	sbci	r29, 0xFF	; 255
    49fa:	38 83       	st	Y, r19
    49fc:	ca 5c       	subi	r28, 0xCA	; 202
    49fe:	d0 40       	sbci	r29, 0x00	; 0
    4a00:	c6 53       	subi	r28, 0x36	; 54
    4a02:	df 4f       	sbci	r29, 0xFF	; 255
    4a04:	88 81       	ld	r24, Y
    4a06:	ca 5c       	subi	r28, 0xCA	; 202
    4a08:	d0 40       	sbci	r29, 0x00	; 0
    4a0a:	88 23       	and	r24, r24
    4a0c:	21 f6       	brne	.-120    	; 0x4996 <main+0x318>

	LCD_createCustomCharacter(char1m, 0);
    4a0e:	ce 01       	movw	r24, r28
    4a10:	cc 96       	adiw	r24, 0x3c	; 60
    4a12:	60 e0       	ldi	r22, 0x00	; 0
    4a14:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(char27, 1);
    4a18:	ce 01       	movw	r24, r28
    4a1a:	8d 5b       	subi	r24, 0xBD	; 189
    4a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1e:	61 e0       	ldi	r22, 0x01	; 1
    4a20:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(char3, 2);
    4a24:	ce 01       	movw	r24, r28
    4a26:	86 5b       	subi	r24, 0xB6	; 182
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	62 e0       	ldi	r22, 0x02	; 2
    4a2c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(char4w, 3);
    4a30:	ce 01       	movw	r24, r28
    4a32:	8f 5a       	subi	r24, 0xAF	; 175
    4a34:	9f 4f       	sbci	r25, 0xFF	; 255
    4a36:	63 e0       	ldi	r22, 0x03	; 3
    4a38:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(char5d, 4);
    4a3c:	ce 01       	movw	r24, r28
    4a3e:	88 5a       	subi	r24, 0xA8	; 168
    4a40:	9f 4f       	sbci	r25, 0xFF	; 255
    4a42:	64 e0       	ldi	r22, 0x04	; 4
    4a44:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <LCD_createCustomCharacter>

	LCD_SetCursor(0, 2);
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	62 e0       	ldi	r22, 0x02	; 2
    4a4c:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
	LCD_displayString("Not a Simple");
    4a50:	82 e6       	ldi	r24, 0x62	; 98
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
	LCD_SetCursor(1, 3);
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	63 e0       	ldi	r22, 0x03	; 3
    4a5c:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
	LCD_displayString("calculator");
    4a60:	8f e6       	ldi	r24, 0x6F	; 111
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	aa e7       	ldi	r26, 0x7A	; 122
    4a6e:	b4 e4       	ldi	r27, 0x44	; 68
    4a70:	8f a3       	std	Y+39, r24	; 0x27
    4a72:	98 a7       	std	Y+40, r25	; 0x28
    4a74:	a9 a7       	std	Y+41, r26	; 0x29
    4a76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a78:	6f a1       	ldd	r22, Y+39	; 0x27
    4a7a:	78 a5       	ldd	r23, Y+40	; 0x28
    4a7c:	89 a5       	ldd	r24, Y+41	; 0x29
    4a7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	4a e7       	ldi	r20, 0x7A	; 122
    4a86:	55 e4       	ldi	r21, 0x45	; 69
    4a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a8c:	dc 01       	movw	r26, r24
    4a8e:	cb 01       	movw	r24, r22
    4a90:	8b a3       	std	Y+35, r24	; 0x23
    4a92:	9c a3       	std	Y+36, r25	; 0x24
    4a94:	ad a3       	std	Y+37, r26	; 0x25
    4a96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a98:	6b a1       	ldd	r22, Y+35	; 0x23
    4a9a:	7c a1       	ldd	r23, Y+36	; 0x24
    4a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    4a9e:	9e a1       	ldd	r25, Y+38	; 0x26
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	40 e8       	ldi	r20, 0x80	; 128
    4aa6:	5f e3       	ldi	r21, 0x3F	; 63
    4aa8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4aac:	88 23       	and	r24, r24
    4aae:	2c f4       	brge	.+10     	; 0x4aba <main+0x43c>
		__ticks = 1;
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	9a a3       	std	Y+34, r25	; 0x22
    4ab6:	89 a3       	std	Y+33, r24	; 0x21
    4ab8:	3f c0       	rjmp	.+126    	; 0x4b38 <main+0x4ba>
	else if (__tmp > 65535)
    4aba:	6b a1       	ldd	r22, Y+35	; 0x23
    4abc:	7c a1       	ldd	r23, Y+36	; 0x24
    4abe:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac2:	20 e0       	ldi	r18, 0x00	; 0
    4ac4:	3f ef       	ldi	r19, 0xFF	; 255
    4ac6:	4f e7       	ldi	r20, 0x7F	; 127
    4ac8:	57 e4       	ldi	r21, 0x47	; 71
    4aca:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4ace:	18 16       	cp	r1, r24
    4ad0:	4c f5       	brge	.+82     	; 0x4b24 <main+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad2:	6f a1       	ldd	r22, Y+39	; 0x27
    4ad4:	78 a5       	ldd	r23, Y+40	; 0x28
    4ad6:	89 a5       	ldd	r24, Y+41	; 0x29
    4ad8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e2       	ldi	r20, 0x20	; 32
    4ae0:	51 e4       	ldi	r21, 0x41	; 65
    4ae2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	bc 01       	movw	r22, r24
    4aec:	cd 01       	movw	r24, r26
    4aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	9a a3       	std	Y+34, r25	; 0x22
    4af8:	89 a3       	std	Y+33, r24	; 0x21
    4afa:	0f c0       	rjmp	.+30     	; 0x4b1a <main+0x49c>
    4afc:	80 e9       	ldi	r24, 0x90	; 144
    4afe:	91 e0       	ldi	r25, 0x01	; 1
    4b00:	98 a3       	std	Y+32, r25	; 0x20
    4b02:	8f 8f       	std	Y+31, r24	; 0x1f
    4b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b06:	98 a1       	ldd	r25, Y+32	; 0x20
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <main+0x48a>
    4b0c:	98 a3       	std	Y+32, r25	; 0x20
    4b0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b10:	89 a1       	ldd	r24, Y+33	; 0x21
    4b12:	9a a1       	ldd	r25, Y+34	; 0x22
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	9a a3       	std	Y+34, r25	; 0x22
    4b18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    4b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	69 f7       	brne	.-38     	; 0x4afc <main+0x47e>
    4b22:	14 c0       	rjmp	.+40     	; 0x4b4c <main+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b24:	6b a1       	ldd	r22, Y+35	; 0x23
    4b26:	7c a1       	ldd	r23, Y+36	; 0x24
    4b28:	8d a1       	ldd	r24, Y+37	; 0x25
    4b2a:	9e a1       	ldd	r25, Y+38	; 0x26
    4b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	9a a3       	std	Y+34, r25	; 0x22
    4b36:	89 a3       	std	Y+33, r24	; 0x21
    4b38:	89 a1       	ldd	r24, Y+33	; 0x21
    4b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    4b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    4b3e:	8d 8f       	std	Y+29, r24	; 0x1d
    4b40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	f1 f7       	brne	.-4      	; 0x4b44 <main+0x4c6>
    4b48:	9e 8f       	std	Y+30, r25	; 0x1e
    4b4a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_ClearDisplay();
    4b4c:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
	LCD_SetCursor(0, 3);
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	63 e0       	ldi	r22, 0x03	; 3
    4b54:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
	LCD_displayString("Made By :");
    4b58:	8a e7       	ldi	r24, 0x7A	; 122
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
	LCD_SetCursor(1, 5);
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	65 e0       	ldi	r22, 0x05	; 5
    4b64:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
	printMyName();
    4b68:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <printMyName>
	loading();
    4b6c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <loading>
	LCD_ClearDisplay();
    4b70:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
	/*array to store input numbers and operations sequentially*/
	float32 equationArray[20];
	/*variable for input of keypad*/
	uint8 keypadInput;
	/*variable to store the result*/
	float32 result = 0;
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	a0 e0       	ldi	r26, 0x00	; 0
    4b7a:	b0 e0       	ldi	r27, 0x00	; 0
    4b7c:	8f ab       	std	Y+55, r24	; 0x37
    4b7e:	98 af       	std	Y+56, r25	; 0x38
    4b80:	a9 af       	std	Y+57, r26	; 0x39
    4b82:	ba af       	std	Y+58, r27	; 0x3a
	/*variable for index of operations and numbers stored in the array*/
	uint8 indexCounter = 0;
    4b84:	1e aa       	std	Y+54, r1	; 0x36
	/* flags to control errors*/
	uint8 validFlag = TRUE, syntaxErrorFlag = FALSE,
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	8d ab       	std	Y+53, r24	; 0x35
    4b8a:	1c aa       	std	Y+52, r1	; 0x34
			numberOfConsequativeOperators = 0, opertorsErrorFlag = FALSE;
    4b8c:	1b aa       	std	Y+51, r1	; 0x33
    4b8e:	1a aa       	std	Y+50, r1	; 0x32

	while (1) {
		/*takes the input from the keypad*/
		keypadInput = KEYPAD_getPressedKey();
    4b90:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <KEYPAD_getPressedKey>
    4b94:	8b af       	std	Y+59, r24	; 0x3b
		/*depending on the input a certain process is done*/
		switch (keypadInput) {
    4b96:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b98:	e8 2f       	mov	r30, r24
    4b9a:	f0 e0       	ldi	r31, 0x00	; 0
    4b9c:	c0 55       	subi	r28, 0x50	; 80
    4b9e:	df 4f       	sbci	r29, 0xFF	; 255
    4ba0:	f9 83       	std	Y+1, r31	; 0x01
    4ba2:	e8 83       	st	Y, r30
    4ba4:	c0 5b       	subi	r28, 0xB0	; 176
    4ba6:	d0 40       	sbci	r29, 0x00	; 0
    4ba8:	c0 55       	subi	r28, 0x50	; 80
    4baa:	df 4f       	sbci	r29, 0xFF	; 255
    4bac:	28 81       	ld	r18, Y
    4bae:	39 81       	ldd	r19, Y+1	; 0x01
    4bb0:	c0 5b       	subi	r28, 0xB0	; 176
    4bb2:	d0 40       	sbci	r29, 0x00	; 0
    4bb4:	2c 32       	cpi	r18, 0x2C	; 44
    4bb6:	31 05       	cpc	r19, r1
    4bb8:	34 f5       	brge	.+76     	; 0x4c06 <main+0x588>
    4bba:	c0 55       	subi	r28, 0x50	; 80
    4bbc:	df 4f       	sbci	r29, 0xFF	; 255
    4bbe:	88 81       	ld	r24, Y
    4bc0:	99 81       	ldd	r25, Y+1	; 0x01
    4bc2:	c0 5b       	subi	r28, 0xB0	; 176
    4bc4:	d0 40       	sbci	r29, 0x00	; 0
    4bc6:	8a 32       	cpi	r24, 0x2A	; 42
    4bc8:	91 05       	cpc	r25, r1
    4bca:	d4 f5       	brge	.+116    	; 0x4c40 <main+0x5c2>
    4bcc:	c0 55       	subi	r28, 0x50	; 80
    4bce:	df 4f       	sbci	r29, 0xFF	; 255
    4bd0:	e8 81       	ld	r30, Y
    4bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    4bd4:	c0 5b       	subi	r28, 0xB0	; 176
    4bd6:	d0 40       	sbci	r29, 0x00	; 0
    4bd8:	ff 23       	and	r31, r31
    4bda:	d4 f2       	brlt	.-76     	; 0x4b90 <main+0x512>
    4bdc:	c0 55       	subi	r28, 0x50	; 80
    4bde:	df 4f       	sbci	r29, 0xFF	; 255
    4be0:	28 81       	ld	r18, Y
    4be2:	39 81       	ldd	r19, Y+1	; 0x01
    4be4:	c0 5b       	subi	r28, 0xB0	; 176
    4be6:	d0 40       	sbci	r29, 0x00	; 0
    4be8:	2a 30       	cpi	r18, 0x0A	; 10
    4bea:	31 05       	cpc	r19, r1
    4bec:	0c f4       	brge	.+2      	; 0x4bf0 <main+0x572>
    4bee:	2a c1       	rjmp	.+596    	; 0x4e44 <main+0x7c6>
    4bf0:	c0 55       	subi	r28, 0x50	; 80
    4bf2:	df 4f       	sbci	r29, 0xFF	; 255
    4bf4:	88 81       	ld	r24, Y
    4bf6:	99 81       	ldd	r25, Y+1	; 0x01
    4bf8:	c0 5b       	subi	r28, 0xB0	; 176
    4bfa:	d0 40       	sbci	r29, 0x00	; 0
    4bfc:	8d 30       	cpi	r24, 0x0D	; 13
    4bfe:	91 05       	cpc	r25, r1
    4c00:	09 f4       	brne	.+2      	; 0x4c04 <main+0x586>
    4c02:	27 c2       	rjmp	.+1102   	; 0x5052 <main+0x9d4>
    4c04:	c5 cf       	rjmp	.-118    	; 0x4b90 <main+0x512>
    4c06:	c0 55       	subi	r28, 0x50	; 80
    4c08:	df 4f       	sbci	r29, 0xFF	; 255
    4c0a:	e8 81       	ld	r30, Y
    4c0c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c0e:	c0 5b       	subi	r28, 0xB0	; 176
    4c10:	d0 40       	sbci	r29, 0x00	; 0
    4c12:	ef 32       	cpi	r30, 0x2F	; 47
    4c14:	f1 05       	cpc	r31, r1
    4c16:	a1 f0       	breq	.+40     	; 0x4c40 <main+0x5c2>
    4c18:	c0 55       	subi	r28, 0x50	; 80
    4c1a:	df 4f       	sbci	r29, 0xFF	; 255
    4c1c:	28 81       	ld	r18, Y
    4c1e:	39 81       	ldd	r19, Y+1	; 0x01
    4c20:	c0 5b       	subi	r28, 0xB0	; 176
    4c22:	d0 40       	sbci	r29, 0x00	; 0
    4c24:	2d 33       	cpi	r18, 0x3D	; 61
    4c26:	31 05       	cpc	r19, r1
    4c28:	09 f4       	brne	.+2      	; 0x4c2c <main+0x5ae>
    4c2a:	4b c2       	rjmp	.+1174   	; 0x50c2 <main+0xa44>
    4c2c:	c0 55       	subi	r28, 0x50	; 80
    4c2e:	df 4f       	sbci	r29, 0xFF	; 255
    4c30:	88 81       	ld	r24, Y
    4c32:	99 81       	ldd	r25, Y+1	; 0x01
    4c34:	c0 5b       	subi	r28, 0xB0	; 176
    4c36:	d0 40       	sbci	r29, 0x00	; 0
    4c38:	8d 32       	cpi	r24, 0x2D	; 45
    4c3a:	91 05       	cpc	r25, r1
    4c3c:	09 f0       	breq	.+2      	; 0x4c40 <main+0x5c2>
    4c3e:	a8 cf       	rjmp	.-176    	; 0x4b90 <main+0x512>
			 * if there are any consecutive operators it sets operators flag to true to outputs an error message
			 * increases the array index counter and stores the operator in the equation array
			 * displays the input on the LCD
			 * increases the array index counter again to be ready for the number input
			 */
			if (result != 0) {
    4c40:	6f a9       	ldd	r22, Y+55	; 0x37
    4c42:	78 ad       	ldd	r23, Y+56	; 0x38
    4c44:	89 ad       	ldd	r24, Y+57	; 0x39
    4c46:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c48:	20 e0       	ldi	r18, 0x00	; 0
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	50 e0       	ldi	r21, 0x00	; 0
    4c50:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    4c54:	88 23       	and	r24, r24
    4c56:	91 f0       	breq	.+36     	; 0x4c7c <main+0x5fe>
				LCD_ClearDisplay();
    4c58:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
				LCD_PrintNumF(result);
    4c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    4c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    4c60:	a9 ad       	ldd	r26, Y+57	; 0x39
    4c62:	ba ad       	ldd	r27, Y+58	; 0x3a
    4c64:	bc 01       	movw	r22, r24
    4c66:	cd 01       	movw	r24, r26
    4c68:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_PrintNumF>
				result = 0;
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	a0 e0       	ldi	r26, 0x00	; 0
    4c72:	b0 e0       	ldi	r27, 0x00	; 0
    4c74:	8f ab       	std	Y+55, r24	; 0x37
    4c76:	98 af       	std	Y+56, r25	; 0x38
    4c78:	a9 af       	std	Y+57, r26	; 0x39
    4c7a:	ba af       	std	Y+58, r27	; 0x3a
			}
			syntaxErrorFlag = TRUE;
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	8c ab       	std	Y+52, r24	; 0x34
			numberOfConsequativeOperators++;
    4c80:	8b a9       	ldd	r24, Y+51	; 0x33
    4c82:	8f 5f       	subi	r24, 0xFF	; 255
    4c84:	8b ab       	std	Y+51, r24	; 0x33
			if (numberOfConsequativeOperators > 1) {
    4c86:	8b a9       	ldd	r24, Y+51	; 0x33
    4c88:	82 30       	cpi	r24, 0x02	; 2
    4c8a:	38 f0       	brcs	.+14     	; 0x4c9a <main+0x61c>
				opertorsErrorFlag = TRUE;
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	8a ab       	std	Y+50, r24	; 0x32
				GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	60 e0       	ldi	r22, 0x00	; 0
    4c94:	41 e0       	ldi	r20, 0x01	; 1
    4c96:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
			}
			if (equationArray[indexCounter] == 0
    4c9a:	8e a9       	ldd	r24, Y+54	; 0x36
    4c9c:	88 2f       	mov	r24, r24
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	9e 01       	movw	r18, r28
    4ca2:	21 5a       	subi	r18, 0xA1	; 161
    4ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca6:	88 0f       	add	r24, r24
    4ca8:	99 1f       	adc	r25, r25
    4caa:	88 0f       	add	r24, r24
    4cac:	99 1f       	adc	r25, r25
    4cae:	f9 01       	movw	r30, r18
    4cb0:	e8 0f       	add	r30, r24
    4cb2:	f9 1f       	adc	r31, r25
    4cb4:	80 81       	ld	r24, Z
    4cb6:	91 81       	ldd	r25, Z+1	; 0x01
    4cb8:	a2 81       	ldd	r26, Z+2	; 0x02
    4cba:	b3 81       	ldd	r27, Z+3	; 0x03
    4cbc:	bc 01       	movw	r22, r24
    4cbe:	cd 01       	movw	r24, r26
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	40 e0       	ldi	r20, 0x00	; 0
    4cc6:	50 e0       	ldi	r21, 0x00	; 0
    4cc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4ccc:	88 23       	and	r24, r24
    4cce:	09 f5       	brne	.+66     	; 0x4d12 <main+0x694>
    4cd0:	8e a9       	ldd	r24, Y+54	; 0x36
    4cd2:	88 2f       	mov	r24, r24
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	01 97       	sbiw	r24, 0x01	; 1
    4cd8:	9e 01       	movw	r18, r28
    4cda:	21 5a       	subi	r18, 0xA1	; 161
    4cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cde:	88 0f       	add	r24, r24
    4ce0:	99 1f       	adc	r25, r25
    4ce2:	88 0f       	add	r24, r24
    4ce4:	99 1f       	adc	r25, r25
    4ce6:	f9 01       	movw	r30, r18
    4ce8:	e8 0f       	add	r30, r24
    4cea:	f9 1f       	adc	r31, r25
    4cec:	80 81       	ld	r24, Z
    4cee:	91 81       	ldd	r25, Z+1	; 0x01
    4cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    4cf2:	b3 81       	ldd	r27, Z+3	; 0x03
    4cf4:	bc 01       	movw	r22, r24
    4cf6:	cd 01       	movw	r24, r26
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	4c e3       	ldi	r20, 0x3C	; 60
    4cfe:	52 e4       	ldi	r21, 0x42	; 66
    4d00:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4d04:	88 23       	and	r24, r24
    4d06:	29 f4       	brne	.+10     	; 0x4d12 <main+0x694>
					&& equationArray[indexCounter - 1] == '/')
				GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
    4d08:	82 e0       	ldi	r24, 0x02	; 2
    4d0a:	60 e0       	ldi	r22, 0x00	; 0
    4d0c:	41 e0       	ldi	r20, 0x01	; 1
    4d0e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
			indexCounter++;
    4d12:	8e a9       	ldd	r24, Y+54	; 0x36
    4d14:	8f 5f       	subi	r24, 0xFF	; 255
    4d16:	8e ab       	std	Y+54, r24	; 0x36
			LCD_displayCharacter(keypadInput);
    4d18:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d1a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayCharacter>
			equationArray[indexCounter] = keypadInput;
    4d1e:	8e a9       	ldd	r24, Y+54	; 0x36
    4d20:	08 2f       	mov	r16, r24
    4d22:	10 e0       	ldi	r17, 0x00	; 0
    4d24:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d26:	88 2f       	mov	r24, r24
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	a0 e0       	ldi	r26, 0x00	; 0
    4d2c:	b0 e0       	ldi	r27, 0x00	; 0
    4d2e:	bc 01       	movw	r22, r24
    4d30:	cd 01       	movw	r24, r26
    4d32:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    4d36:	9b 01       	movw	r18, r22
    4d38:	ac 01       	movw	r20, r24
    4d3a:	be 01       	movw	r22, r28
    4d3c:	61 5a       	subi	r22, 0xA1	; 161
    4d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d40:	c8 01       	movw	r24, r16
    4d42:	88 0f       	add	r24, r24
    4d44:	99 1f       	adc	r25, r25
    4d46:	88 0f       	add	r24, r24
    4d48:	99 1f       	adc	r25, r25
    4d4a:	fb 01       	movw	r30, r22
    4d4c:	e8 0f       	add	r30, r24
    4d4e:	f9 1f       	adc	r31, r25
    4d50:	20 83       	st	Z, r18
    4d52:	31 83       	std	Z+1, r19	; 0x01
    4d54:	42 83       	std	Z+2, r20	; 0x02
    4d56:	53 83       	std	Z+3, r21	; 0x03
    4d58:	80 e0       	ldi	r24, 0x00	; 0
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	a0 e2       	ldi	r26, 0x20	; 32
    4d5e:	b1 e4       	ldi	r27, 0x41	; 65
    4d60:	89 8f       	std	Y+25, r24	; 0x19
    4d62:	9a 8f       	std	Y+26, r25	; 0x1a
    4d64:	ab 8f       	std	Y+27, r26	; 0x1b
    4d66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d68:	69 8d       	ldd	r22, Y+25	; 0x19
    4d6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	4a e7       	ldi	r20, 0x7A	; 122
    4d76:	55 e4       	ldi	r21, 0x45	; 69
    4d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	8d 8b       	std	Y+21, r24	; 0x15
    4d82:	9e 8b       	std	Y+22, r25	; 0x16
    4d84:	af 8b       	std	Y+23, r26	; 0x17
    4d86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d88:	6d 89       	ldd	r22, Y+21	; 0x15
    4d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	40 e8       	ldi	r20, 0x80	; 128
    4d96:	5f e3       	ldi	r21, 0x3F	; 63
    4d98:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4d9c:	88 23       	and	r24, r24
    4d9e:	2c f4       	brge	.+10     	; 0x4daa <main+0x72c>
		__ticks = 1;
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	9c 8b       	std	Y+20, r25	; 0x14
    4da6:	8b 8b       	std	Y+19, r24	; 0x13
    4da8:	3f c0       	rjmp	.+126    	; 0x4e28 <main+0x7aa>
	else if (__tmp > 65535)
    4daa:	6d 89       	ldd	r22, Y+21	; 0x15
    4dac:	7e 89       	ldd	r23, Y+22	; 0x16
    4dae:	8f 89       	ldd	r24, Y+23	; 0x17
    4db0:	98 8d       	ldd	r25, Y+24	; 0x18
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	3f ef       	ldi	r19, 0xFF	; 255
    4db6:	4f e7       	ldi	r20, 0x7F	; 127
    4db8:	57 e4       	ldi	r21, 0x47	; 71
    4dba:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4dbe:	18 16       	cp	r1, r24
    4dc0:	4c f5       	brge	.+82     	; 0x4e14 <main+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dc2:	69 8d       	ldd	r22, Y+25	; 0x19
    4dc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	40 e2       	ldi	r20, 0x20	; 32
    4dd0:	51 e4       	ldi	r21, 0x41	; 65
    4dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	bc 01       	movw	r22, r24
    4ddc:	cd 01       	movw	r24, r26
    4dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4de2:	dc 01       	movw	r26, r24
    4de4:	cb 01       	movw	r24, r22
    4de6:	9c 8b       	std	Y+20, r25	; 0x14
    4de8:	8b 8b       	std	Y+19, r24	; 0x13
    4dea:	0f c0       	rjmp	.+30     	; 0x4e0a <main+0x78c>
    4dec:	80 e9       	ldi	r24, 0x90	; 144
    4dee:	91 e0       	ldi	r25, 0x01	; 1
    4df0:	9a 8b       	std	Y+18, r25	; 0x12
    4df2:	89 8b       	std	Y+17, r24	; 0x11
    4df4:	89 89       	ldd	r24, Y+17	; 0x11
    4df6:	9a 89       	ldd	r25, Y+18	; 0x12
    4df8:	01 97       	sbiw	r24, 0x01	; 1
    4dfa:	f1 f7       	brne	.-4      	; 0x4df8 <main+0x77a>
    4dfc:	9a 8b       	std	Y+18, r25	; 0x12
    4dfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e00:	8b 89       	ldd	r24, Y+19	; 0x13
    4e02:	9c 89       	ldd	r25, Y+20	; 0x14
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	9c 8b       	std	Y+20, r25	; 0x14
    4e08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e0e:	00 97       	sbiw	r24, 0x00	; 0
    4e10:	69 f7       	brne	.-38     	; 0x4dec <main+0x76e>
    4e12:	14 c0       	rjmp	.+40     	; 0x4e3c <main+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e14:	6d 89       	ldd	r22, Y+21	; 0x15
    4e16:	7e 89       	ldd	r23, Y+22	; 0x16
    4e18:	8f 89       	ldd	r24, Y+23	; 0x17
    4e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e20:	dc 01       	movw	r26, r24
    4e22:	cb 01       	movw	r24, r22
    4e24:	9c 8b       	std	Y+20, r25	; 0x14
    4e26:	8b 8b       	std	Y+19, r24	; 0x13
    4e28:	8b 89       	ldd	r24, Y+19	; 0x13
    4e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e2c:	98 8b       	std	Y+16, r25	; 0x10
    4e2e:	8f 87       	std	Y+15, r24	; 0x0f
    4e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e32:	98 89       	ldd	r25, Y+16	; 0x10
    4e34:	01 97       	sbiw	r24, 0x01	; 1
    4e36:	f1 f7       	brne	.-4      	; 0x4e34 <main+0x7b6>
    4e38:	98 8b       	std	Y+16, r25	; 0x10
    4e3a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			indexCounter++;
    4e3c:	8e a9       	ldd	r24, Y+54	; 0x36
    4e3e:	8f 5f       	subi	r24, 0xFF	; 255
    4e40:	8e ab       	std	Y+54, r24	; 0x36
    4e42:	a6 ce       	rjmp	.-692    	; 0x4b90 <main+0x512>
			 * to make a multi-digit number with single digits:
			 * multiplies the value in the array index by 10 and adds the input digit to it
			 * equationArray[2] = 1 input = 2 multiplies 1*10 = 10 and adds 1 10+1 = 11
			 * displays the input on the LCD
			 */
			if(result!=0){
    4e44:	6f a9       	ldd	r22, Y+55	; 0x37
    4e46:	78 ad       	ldd	r23, Y+56	; 0x38
    4e48:	89 ad       	ldd	r24, Y+57	; 0x39
    4e4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	40 e0       	ldi	r20, 0x00	; 0
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    4e58:	88 23       	and	r24, r24
    4e5a:	b1 f0       	breq	.+44     	; 0x4e88 <main+0x80a>
				LCD_ClearDisplay();
    4e5c:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
				result = 0;
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	a0 e0       	ldi	r26, 0x00	; 0
    4e66:	b0 e0       	ldi	r27, 0x00	; 0
    4e68:	8f ab       	std	Y+55, r24	; 0x37
    4e6a:	98 af       	std	Y+56, r25	; 0x38
    4e6c:	a9 af       	std	Y+57, r26	; 0x39
    4e6e:	ba af       	std	Y+58, r27	; 0x3a
				equationArray[0]=0;
    4e70:	fe 01       	movw	r30, r28
    4e72:	e1 5a       	subi	r30, 0xA1	; 161
    4e74:	ff 4f       	sbci	r31, 0xFF	; 255
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	a0 e0       	ldi	r26, 0x00	; 0
    4e7c:	b0 e0       	ldi	r27, 0x00	; 0
    4e7e:	80 83       	st	Z, r24
    4e80:	91 83       	std	Z+1, r25	; 0x01
    4e82:	a2 83       	std	Z+2, r26	; 0x02
    4e84:	b3 83       	std	Z+3, r27	; 0x03
				indexCounter =0 ;
    4e86:	1e aa       	std	Y+54, r1	; 0x36

			}
			numberOfConsequativeOperators = 0;
    4e88:	1b aa       	std	Y+51, r1	; 0x33
			syntaxErrorFlag = FALSE;
    4e8a:	1c aa       	std	Y+52, r1	; 0x34
			equationArray[indexCounter] *= 10;
    4e8c:	8e a9       	ldd	r24, Y+54	; 0x36
    4e8e:	08 2f       	mov	r16, r24
    4e90:	10 e0       	ldi	r17, 0x00	; 0
    4e92:	8e a9       	ldd	r24, Y+54	; 0x36
    4e94:	88 2f       	mov	r24, r24
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	9e 01       	movw	r18, r28
    4e9a:	21 5a       	subi	r18, 0xA1	; 161
    4e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9e:	88 0f       	add	r24, r24
    4ea0:	99 1f       	adc	r25, r25
    4ea2:	88 0f       	add	r24, r24
    4ea4:	99 1f       	adc	r25, r25
    4ea6:	f9 01       	movw	r30, r18
    4ea8:	e8 0f       	add	r30, r24
    4eaa:	f9 1f       	adc	r31, r25
    4eac:	80 81       	ld	r24, Z
    4eae:	91 81       	ldd	r25, Z+1	; 0x01
    4eb0:	a2 81       	ldd	r26, Z+2	; 0x02
    4eb2:	b3 81       	ldd	r27, Z+3	; 0x03
    4eb4:	bc 01       	movw	r22, r24
    4eb6:	cd 01       	movw	r24, r26
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	40 e2       	ldi	r20, 0x20	; 32
    4ebe:	51 e4       	ldi	r21, 0x41	; 65
    4ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	9c 01       	movw	r18, r24
    4eca:	ad 01       	movw	r20, r26
    4ecc:	be 01       	movw	r22, r28
    4ece:	61 5a       	subi	r22, 0xA1	; 161
    4ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed2:	c8 01       	movw	r24, r16
    4ed4:	88 0f       	add	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	88 0f       	add	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	fb 01       	movw	r30, r22
    4ede:	e8 0f       	add	r30, r24
    4ee0:	f9 1f       	adc	r31, r25
    4ee2:	20 83       	st	Z, r18
    4ee4:	31 83       	std	Z+1, r19	; 0x01
    4ee6:	42 83       	std	Z+2, r20	; 0x02
    4ee8:	53 83       	std	Z+3, r21	; 0x03
			equationArray[indexCounter] += keypadInput;
    4eea:	8e a9       	ldd	r24, Y+54	; 0x36
    4eec:	c8 2e       	mov	r12, r24
    4eee:	dd 24       	eor	r13, r13
    4ef0:	8e a9       	ldd	r24, Y+54	; 0x36
    4ef2:	88 2f       	mov	r24, r24
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	9e 01       	movw	r18, r28
    4ef8:	21 5a       	subi	r18, 0xA1	; 161
    4efa:	3f 4f       	sbci	r19, 0xFF	; 255
    4efc:	88 0f       	add	r24, r24
    4efe:	99 1f       	adc	r25, r25
    4f00:	88 0f       	add	r24, r24
    4f02:	99 1f       	adc	r25, r25
    4f04:	f9 01       	movw	r30, r18
    4f06:	e8 0f       	add	r30, r24
    4f08:	f9 1f       	adc	r31, r25
    4f0a:	e0 80       	ld	r14, Z
    4f0c:	f1 80       	ldd	r15, Z+1	; 0x01
    4f0e:	02 81       	ldd	r16, Z+2	; 0x02
    4f10:	13 81       	ldd	r17, Z+3	; 0x03
    4f12:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f14:	88 2f       	mov	r24, r24
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	aa 27       	eor	r26, r26
    4f1a:	97 fd       	sbrc	r25, 7
    4f1c:	a0 95       	com	r26
    4f1e:	ba 2f       	mov	r27, r26
    4f20:	bc 01       	movw	r22, r24
    4f22:	cd 01       	movw	r24, r26
    4f24:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    4f28:	9b 01       	movw	r18, r22
    4f2a:	ac 01       	movw	r20, r24
    4f2c:	c8 01       	movw	r24, r16
    4f2e:	b7 01       	movw	r22, r14
    4f30:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    4f34:	dc 01       	movw	r26, r24
    4f36:	cb 01       	movw	r24, r22
    4f38:	9c 01       	movw	r18, r24
    4f3a:	ad 01       	movw	r20, r26
    4f3c:	be 01       	movw	r22, r28
    4f3e:	61 5a       	subi	r22, 0xA1	; 161
    4f40:	7f 4f       	sbci	r23, 0xFF	; 255
    4f42:	c6 01       	movw	r24, r12
    4f44:	88 0f       	add	r24, r24
    4f46:	99 1f       	adc	r25, r25
    4f48:	88 0f       	add	r24, r24
    4f4a:	99 1f       	adc	r25, r25
    4f4c:	fb 01       	movw	r30, r22
    4f4e:	e8 0f       	add	r30, r24
    4f50:	f9 1f       	adc	r31, r25
    4f52:	20 83       	st	Z, r18
    4f54:	31 83       	std	Z+1, r19	; 0x01
    4f56:	42 83       	std	Z+2, r20	; 0x02
    4f58:	53 83       	std	Z+3, r21	; 0x03
			LCD_PrintNum(keypadInput);
    4f5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f5c:	88 2f       	mov	r24, r24
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	a0 e0       	ldi	r26, 0x00	; 0
    4f62:	b0 e0       	ldi	r27, 0x00	; 0
    4f64:	bc 01       	movw	r22, r24
    4f66:	cd 01       	movw	r24, r26
    4f68:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_PrintNum>
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	a0 e2       	ldi	r26, 0x20	; 32
    4f72:	b1 e4       	ldi	r27, 0x41	; 65
    4f74:	8b 87       	std	Y+11, r24	; 0x0b
    4f76:	9c 87       	std	Y+12, r25	; 0x0c
    4f78:	ad 87       	std	Y+13, r26	; 0x0d
    4f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	4a e7       	ldi	r20, 0x7A	; 122
    4f8a:	55 e4       	ldi	r21, 0x45	; 69
    4f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f90:	dc 01       	movw	r26, r24
    4f92:	cb 01       	movw	r24, r22
    4f94:	8f 83       	std	Y+7, r24	; 0x07
    4f96:	98 87       	std	Y+8, r25	; 0x08
    4f98:	a9 87       	std	Y+9, r26	; 0x09
    4f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f9e:	78 85       	ldd	r23, Y+8	; 0x08
    4fa0:	89 85       	ldd	r24, Y+9	; 0x09
    4fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	40 e8       	ldi	r20, 0x80	; 128
    4faa:	5f e3       	ldi	r21, 0x3F	; 63
    4fac:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4fb0:	88 23       	and	r24, r24
    4fb2:	2c f4       	brge	.+10     	; 0x4fbe <main+0x940>
		__ticks = 1;
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	9e 83       	std	Y+6, r25	; 0x06
    4fba:	8d 83       	std	Y+5, r24	; 0x05
    4fbc:	3f c0       	rjmp	.+126    	; 0x503c <main+0x9be>
	else if (__tmp > 65535)
    4fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc0:	78 85       	ldd	r23, Y+8	; 0x08
    4fc2:	89 85       	ldd	r24, Y+9	; 0x09
    4fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc6:	20 e0       	ldi	r18, 0x00	; 0
    4fc8:	3f ef       	ldi	r19, 0xFF	; 255
    4fca:	4f e7       	ldi	r20, 0x7F	; 127
    4fcc:	57 e4       	ldi	r21, 0x47	; 71
    4fce:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4fd2:	18 16       	cp	r1, r24
    4fd4:	4c f5       	brge	.+82     	; 0x5028 <main+0x9aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	40 e2       	ldi	r20, 0x20	; 32
    4fe4:	51 e4       	ldi	r21, 0x41	; 65
    4fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4fea:	dc 01       	movw	r26, r24
    4fec:	cb 01       	movw	r24, r22
    4fee:	bc 01       	movw	r22, r24
    4ff0:	cd 01       	movw	r24, r26
    4ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	9e 83       	std	Y+6, r25	; 0x06
    4ffc:	8d 83       	std	Y+5, r24	; 0x05
    4ffe:	0f c0       	rjmp	.+30     	; 0x501e <main+0x9a0>
    5000:	80 e9       	ldi	r24, 0x90	; 144
    5002:	91 e0       	ldi	r25, 0x01	; 1
    5004:	9c 83       	std	Y+4, r25	; 0x04
    5006:	8b 83       	std	Y+3, r24	; 0x03
    5008:	8b 81       	ldd	r24, Y+3	; 0x03
    500a:	9c 81       	ldd	r25, Y+4	; 0x04
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	f1 f7       	brne	.-4      	; 0x500c <main+0x98e>
    5010:	9c 83       	std	Y+4, r25	; 0x04
    5012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5014:	8d 81       	ldd	r24, Y+5	; 0x05
    5016:	9e 81       	ldd	r25, Y+6	; 0x06
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	9e 83       	std	Y+6, r25	; 0x06
    501c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    501e:	8d 81       	ldd	r24, Y+5	; 0x05
    5020:	9e 81       	ldd	r25, Y+6	; 0x06
    5022:	00 97       	sbiw	r24, 0x00	; 0
    5024:	69 f7       	brne	.-38     	; 0x5000 <main+0x982>
    5026:	b4 cd       	rjmp	.-1176   	; 0x4b90 <main+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5028:	6f 81       	ldd	r22, Y+7	; 0x07
    502a:	78 85       	ldd	r23, Y+8	; 0x08
    502c:	89 85       	ldd	r24, Y+9	; 0x09
    502e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5034:	dc 01       	movw	r26, r24
    5036:	cb 01       	movw	r24, r22
    5038:	9e 83       	std	Y+6, r25	; 0x06
    503a:	8d 83       	std	Y+5, r24	; 0x05
    503c:	8d 81       	ldd	r24, Y+5	; 0x05
    503e:	9e 81       	ldd	r25, Y+6	; 0x06
    5040:	9a 83       	std	Y+2, r25	; 0x02
    5042:	89 83       	std	Y+1, r24	; 0x01
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	9a 81       	ldd	r25, Y+2	; 0x02
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	f1 f7       	brne	.-4      	; 0x5048 <main+0x9ca>
    504c:	9a 83       	std	Y+2, r25	; 0x02
    504e:	89 83       	std	Y+1, r24	; 0x01
    5050:	9f cd       	rjmp	.-1218   	; 0x4b90 <main+0x512>
			 * if the user presses clear :
			 * clears the display
			 * resets all flags and values
			 * resets the equationArray
			 */
			LCD_ClearDisplay();
    5052:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
			indexCounter = 0;
    5056:	1e aa       	std	Y+54, r1	; 0x36
			result = 0;
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	a0 e0       	ldi	r26, 0x00	; 0
    505e:	b0 e0       	ldi	r27, 0x00	; 0
    5060:	8f ab       	std	Y+55, r24	; 0x37
    5062:	98 af       	std	Y+56, r25	; 0x38
    5064:	a9 af       	std	Y+57, r26	; 0x39
    5066:	ba af       	std	Y+58, r27	; 0x3a
			validFlag = 1, syntaxErrorFlag = FALSE, numberOfConsequativeOperators =
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	8d ab       	std	Y+53, r24	; 0x35
    506c:	1c aa       	std	Y+52, r1	; 0x34
    506e:	1b aa       	std	Y+51, r1	; 0x33
    5070:	1a aa       	std	Y+50, r1	; 0x32
					0, opertorsErrorFlag = FALSE;
			for (uint8 i = 0; i < 20; i++) {
    5072:	19 aa       	std	Y+49, r1	; 0x31
    5074:	18 c0       	rjmp	.+48     	; 0x50a6 <main+0xa28>
				equationArray[i] = 0;
    5076:	89 a9       	ldd	r24, Y+49	; 0x31
    5078:	88 2f       	mov	r24, r24
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	9e 01       	movw	r18, r28
    507e:	21 5a       	subi	r18, 0xA1	; 161
    5080:	3f 4f       	sbci	r19, 0xFF	; 255
    5082:	88 0f       	add	r24, r24
    5084:	99 1f       	adc	r25, r25
    5086:	88 0f       	add	r24, r24
    5088:	99 1f       	adc	r25, r25
    508a:	f9 01       	movw	r30, r18
    508c:	e8 0f       	add	r30, r24
    508e:	f9 1f       	adc	r31, r25
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	a0 e0       	ldi	r26, 0x00	; 0
    5096:	b0 e0       	ldi	r27, 0x00	; 0
    5098:	80 83       	st	Z, r24
    509a:	91 83       	std	Z+1, r25	; 0x01
    509c:	a2 83       	std	Z+2, r26	; 0x02
    509e:	b3 83       	std	Z+3, r27	; 0x03
			LCD_ClearDisplay();
			indexCounter = 0;
			result = 0;
			validFlag = 1, syntaxErrorFlag = FALSE, numberOfConsequativeOperators =
					0, opertorsErrorFlag = FALSE;
			for (uint8 i = 0; i < 20; i++) {
    50a0:	89 a9       	ldd	r24, Y+49	; 0x31
    50a2:	8f 5f       	subi	r24, 0xFF	; 255
    50a4:	89 ab       	std	Y+49, r24	; 0x31
    50a6:	89 a9       	ldd	r24, Y+49	; 0x31
    50a8:	84 31       	cpi	r24, 0x14	; 20
    50aa:	28 f3       	brcs	.-54     	; 0x5076 <main+0x9f8>
				equationArray[i] = 0;
			}
			GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    50ac:	82 e0       	ldi	r24, 0x02	; 2
    50ae:	65 e0       	ldi	r22, 0x05	; 5
    50b0:	40 e0       	ldi	r20, 0x00	; 0
    50b2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    50b6:	82 e0       	ldi	r24, 0x02	; 2
    50b8:	60 e0       	ldi	r22, 0x00	; 0
    50ba:	40 e0       	ldi	r20, 0x00	; 0
    50bc:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    50c0:	67 cd       	rjmp	.-1330   	; 0x4b90 <main+0x512>
			 * and shifts all the next element two indices to the left as we have removed the two numbers and operator and replaced them with there result
			 * sets the loop counter to be on the result element
			 * loops again and executes the + - operations to calculate the final result
			 * outputs the result and resets all values
			 */
			if (syntaxErrorFlag == TRUE || opertorsErrorFlag == TRUE) {
    50c2:	8c a9       	ldd	r24, Y+52	; 0x34
    50c4:	81 30       	cpi	r24, 0x01	; 1
    50c6:	19 f0       	breq	.+6      	; 0x50ce <main+0xa50>
    50c8:	8a a9       	ldd	r24, Y+50	; 0x32
    50ca:	81 30       	cpi	r24, 0x01	; 1
    50cc:	79 f5       	brne	.+94     	; 0x512c <main+0xaae>
				LCD_ClearDisplay();
    50ce:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
				LCD_SetCursor(1, 1);
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	61 e0       	ldi	r22, 0x01	; 1
    50d6:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
				LCD_displayString("Syntax Error");
    50da:	84 e8       	ldi	r24, 0x84	; 132
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
				errorBuzzer();
    50e2:	0e 94 ba 1b 	call	0x3774	; 0x3774 <errorBuzzer>
				indexCounter = 0;
    50e6:	1e aa       	std	Y+54, r1	; 0x36
				for (uint8 i = 0; i < 20; i++) {
    50e8:	18 aa       	std	Y+48, r1	; 0x30
    50ea:	18 c0       	rjmp	.+48     	; 0x511c <main+0xa9e>
					equationArray[i] = 0;
    50ec:	88 a9       	ldd	r24, Y+48	; 0x30
    50ee:	88 2f       	mov	r24, r24
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	9e 01       	movw	r18, r28
    50f4:	21 5a       	subi	r18, 0xA1	; 161
    50f6:	3f 4f       	sbci	r19, 0xFF	; 255
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	88 0f       	add	r24, r24
    50fe:	99 1f       	adc	r25, r25
    5100:	f9 01       	movw	r30, r18
    5102:	e8 0f       	add	r30, r24
    5104:	f9 1f       	adc	r31, r25
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	a0 e0       	ldi	r26, 0x00	; 0
    510c:	b0 e0       	ldi	r27, 0x00	; 0
    510e:	80 83       	st	Z, r24
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	a2 83       	std	Z+2, r26	; 0x02
    5114:	b3 83       	std	Z+3, r27	; 0x03
				LCD_ClearDisplay();
				LCD_SetCursor(1, 1);
				LCD_displayString("Syntax Error");
				errorBuzzer();
				indexCounter = 0;
				for (uint8 i = 0; i < 20; i++) {
    5116:	88 a9       	ldd	r24, Y+48	; 0x30
    5118:	8f 5f       	subi	r24, 0xFF	; 255
    511a:	88 ab       	std	Y+48, r24	; 0x30
    511c:	88 a9       	ldd	r24, Y+48	; 0x30
    511e:	84 31       	cpi	r24, 0x14	; 20
    5120:	28 f3       	brcs	.-54     	; 0x50ec <main+0xa6e>
					equationArray[i] = 0;
				}
				validFlag = FALSE, syntaxErrorFlag = FALSE;
    5122:	1d aa       	std	Y+53, r1	; 0x35
    5124:	1c aa       	std	Y+52, r1	; 0x34
				numberOfConsequativeOperators = 0;
    5126:	1b aa       	std	Y+51, r1	; 0x33
				opertorsErrorFlag = FALSE;
    5128:	1a aa       	std	Y+50, r1	; 0x32
    512a:	32 cd       	rjmp	.-1436   	; 0x4b90 <main+0x512>
				break;
			}
			for (uint8 i = 0; i <= indexCounter; i++) {
    512c:	1f a6       	std	Y+47, r1	; 0x2f
    512e:	47 c1       	rjmp	.+654    	; 0x53be <main+0xd40>
				if (equationArray[i] == '/' && equationArray[i + 1] == 0) {
    5130:	8f a5       	ldd	r24, Y+47	; 0x2f
    5132:	88 2f       	mov	r24, r24
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	9e 01       	movw	r18, r28
    5138:	21 5a       	subi	r18, 0xA1	; 161
    513a:	3f 4f       	sbci	r19, 0xFF	; 255
    513c:	88 0f       	add	r24, r24
    513e:	99 1f       	adc	r25, r25
    5140:	88 0f       	add	r24, r24
    5142:	99 1f       	adc	r25, r25
    5144:	f9 01       	movw	r30, r18
    5146:	e8 0f       	add	r30, r24
    5148:	f9 1f       	adc	r31, r25
    514a:	80 81       	ld	r24, Z
    514c:	91 81       	ldd	r25, Z+1	; 0x01
    514e:	a2 81       	ldd	r26, Z+2	; 0x02
    5150:	b3 81       	ldd	r27, Z+3	; 0x03
    5152:	bc 01       	movw	r22, r24
    5154:	cd 01       	movw	r24, r26
    5156:	20 e0       	ldi	r18, 0x00	; 0
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	4c e3       	ldi	r20, 0x3C	; 60
    515c:	52 e4       	ldi	r21, 0x42	; 66
    515e:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    5162:	88 23       	and	r24, r24
    5164:	09 f0       	breq	.+2      	; 0x5168 <main+0xaea>
    5166:	51 c0       	rjmp	.+162    	; 0x520a <main+0xb8c>
    5168:	8f a5       	ldd	r24, Y+47	; 0x2f
    516a:	88 2f       	mov	r24, r24
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	01 96       	adiw	r24, 0x01	; 1
    5170:	9e 01       	movw	r18, r28
    5172:	21 5a       	subi	r18, 0xA1	; 161
    5174:	3f 4f       	sbci	r19, 0xFF	; 255
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	88 0f       	add	r24, r24
    517c:	99 1f       	adc	r25, r25
    517e:	f9 01       	movw	r30, r18
    5180:	e8 0f       	add	r30, r24
    5182:	f9 1f       	adc	r31, r25
    5184:	80 81       	ld	r24, Z
    5186:	91 81       	ldd	r25, Z+1	; 0x01
    5188:	a2 81       	ldd	r26, Z+2	; 0x02
    518a:	b3 81       	ldd	r27, Z+3	; 0x03
    518c:	bc 01       	movw	r22, r24
    518e:	cd 01       	movw	r24, r26
    5190:	20 e0       	ldi	r18, 0x00	; 0
    5192:	30 e0       	ldi	r19, 0x00	; 0
    5194:	40 e0       	ldi	r20, 0x00	; 0
    5196:	50 e0       	ldi	r21, 0x00	; 0
    5198:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    519c:	88 23       	and	r24, r24
    519e:	a9 f5       	brne	.+106    	; 0x520a <main+0xb8c>
					LCD_ClearDisplay();
    51a0:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_ClearDisplay>
					LCD_SetCursor(0, 0);
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	60 e0       	ldi	r22, 0x00	; 0
    51a8:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
					LCD_displayString("Error");
    51ac:	81 e9       	ldi	r24, 0x91	; 145
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
					LCD_SetCursor(1, 0);
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
					LCD_displayString("divide by zero");
    51bc:	87 e9       	ldi	r24, 0x97	; 151
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
					errorBuzzer();
    51c4:	0e 94 ba 1b 	call	0x3774	; 0x3774 <errorBuzzer>
					indexCounter = 0;
    51c8:	1e aa       	std	Y+54, r1	; 0x36
					for (uint8 i = 0; i < 20; i++) {
    51ca:	1e a6       	std	Y+46, r1	; 0x2e
    51cc:	18 c0       	rjmp	.+48     	; 0x51fe <main+0xb80>
						equationArray[i] = 0;
    51ce:	8e a5       	ldd	r24, Y+46	; 0x2e
    51d0:	88 2f       	mov	r24, r24
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	9e 01       	movw	r18, r28
    51d6:	21 5a       	subi	r18, 0xA1	; 161
    51d8:	3f 4f       	sbci	r19, 0xFF	; 255
    51da:	88 0f       	add	r24, r24
    51dc:	99 1f       	adc	r25, r25
    51de:	88 0f       	add	r24, r24
    51e0:	99 1f       	adc	r25, r25
    51e2:	f9 01       	movw	r30, r18
    51e4:	e8 0f       	add	r30, r24
    51e6:	f9 1f       	adc	r31, r25
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	a0 e0       	ldi	r26, 0x00	; 0
    51ee:	b0 e0       	ldi	r27, 0x00	; 0
    51f0:	80 83       	st	Z, r24
    51f2:	91 83       	std	Z+1, r25	; 0x01
    51f4:	a2 83       	std	Z+2, r26	; 0x02
    51f6:	b3 83       	std	Z+3, r27	; 0x03
					LCD_displayString("Error");
					LCD_SetCursor(1, 0);
					LCD_displayString("divide by zero");
					errorBuzzer();
					indexCounter = 0;
					for (uint8 i = 0; i < 20; i++) {
    51f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    51fa:	8f 5f       	subi	r24, 0xFF	; 255
    51fc:	8e a7       	std	Y+46, r24	; 0x2e
    51fe:	8e a5       	ldd	r24, Y+46	; 0x2e
    5200:	84 31       	cpi	r24, 0x14	; 20
    5202:	28 f3       	brcs	.-54     	; 0x51ce <main+0xb50>
						equationArray[i] = 0;
					}
					validFlag = FALSE, syntaxErrorFlag = FALSE;
    5204:	1d aa       	std	Y+53, r1	; 0x35
    5206:	1c aa       	std	Y+52, r1	; 0x34
    5208:	df c0       	rjmp	.+446    	; 0x53c8 <main+0xd4a>
					break;
				}
				/* loops on the equation array execute all / and * operations and stores the + - rest equation in the array  :*/
				if (equationArray[i] != '*' && equationArray[i] != '/')
    520a:	8f a5       	ldd	r24, Y+47	; 0x2f
    520c:	88 2f       	mov	r24, r24
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	9e 01       	movw	r18, r28
    5212:	21 5a       	subi	r18, 0xA1	; 161
    5214:	3f 4f       	sbci	r19, 0xFF	; 255
    5216:	88 0f       	add	r24, r24
    5218:	99 1f       	adc	r25, r25
    521a:	88 0f       	add	r24, r24
    521c:	99 1f       	adc	r25, r25
    521e:	f9 01       	movw	r30, r18
    5220:	e8 0f       	add	r30, r24
    5222:	f9 1f       	adc	r31, r25
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	a2 81       	ldd	r26, Z+2	; 0x02
    522a:	b3 81       	ldd	r27, Z+3	; 0x03
    522c:	c1 55       	subi	r28, 0x51	; 81
    522e:	df 4f       	sbci	r29, 0xFF	; 255
    5230:	18 82       	st	Y, r1
    5232:	cf 5a       	subi	r28, 0xAF	; 175
    5234:	d0 40       	sbci	r29, 0x00	; 0
    5236:	bc 01       	movw	r22, r24
    5238:	cd 01       	movw	r24, r26
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	48 e2       	ldi	r20, 0x28	; 40
    5240:	52 e4       	ldi	r21, 0x42	; 66
    5242:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    5246:	88 23       	and	r24, r24
    5248:	31 f0       	breq	.+12     	; 0x5256 <main+0xbd8>
    524a:	91 e0       	ldi	r25, 0x01	; 1
    524c:	c1 55       	subi	r28, 0x51	; 81
    524e:	df 4f       	sbci	r29, 0xFF	; 255
    5250:	98 83       	st	Y, r25
    5252:	cf 5a       	subi	r28, 0xAF	; 175
    5254:	d0 40       	sbci	r29, 0x00	; 0
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	c1 55       	subi	r28, 0x51	; 81
    525a:	df 4f       	sbci	r29, 0xFF	; 255
    525c:	e8 81       	ld	r30, Y
    525e:	cf 5a       	subi	r28, 0xAF	; 175
    5260:	d0 40       	sbci	r29, 0x00	; 0
    5262:	8e 27       	eor	r24, r30
    5264:	88 23       	and	r24, r24
    5266:	e1 f4       	brne	.+56     	; 0x52a0 <main+0xc22>
    5268:	8f a5       	ldd	r24, Y+47	; 0x2f
    526a:	88 2f       	mov	r24, r24
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	9e 01       	movw	r18, r28
    5270:	21 5a       	subi	r18, 0xA1	; 161
    5272:	3f 4f       	sbci	r19, 0xFF	; 255
    5274:	88 0f       	add	r24, r24
    5276:	99 1f       	adc	r25, r25
    5278:	88 0f       	add	r24, r24
    527a:	99 1f       	adc	r25, r25
    527c:	f9 01       	movw	r30, r18
    527e:	e8 0f       	add	r30, r24
    5280:	f9 1f       	adc	r31, r25
    5282:	80 81       	ld	r24, Z
    5284:	91 81       	ldd	r25, Z+1	; 0x01
    5286:	a2 81       	ldd	r26, Z+2	; 0x02
    5288:	b3 81       	ldd	r27, Z+3	; 0x03
    528a:	bc 01       	movw	r22, r24
    528c:	cd 01       	movw	r24, r26
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	4c e3       	ldi	r20, 0x3C	; 60
    5294:	52 e4       	ldi	r21, 0x42	; 66
    5296:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    529a:	88 23       	and	r24, r24
    529c:	09 f0       	breq	.+2      	; 0x52a0 <main+0xc22>
    529e:	8c c0       	rjmp	.+280    	; 0x53b8 <main+0xd3a>
					continue;
				else {
					equationArray[i - 1] = calculate(equationArray[i - 1],
    52a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    52a2:	88 2f       	mov	r24, r24
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	5c 01       	movw	r10, r24
    52a8:	08 94       	sec
    52aa:	a1 08       	sbc	r10, r1
    52ac:	b1 08       	sbc	r11, r1
    52ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    52b0:	88 2f       	mov	r24, r24
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	9e 01       	movw	r18, r28
    52b8:	21 5a       	subi	r18, 0xA1	; 161
    52ba:	3f 4f       	sbci	r19, 0xFF	; 255
    52bc:	88 0f       	add	r24, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	88 0f       	add	r24, r24
    52c2:	99 1f       	adc	r25, r25
    52c4:	f9 01       	movw	r30, r18
    52c6:	e8 0f       	add	r30, r24
    52c8:	f9 1f       	adc	r31, r25
    52ca:	c0 80       	ld	r12, Z
    52cc:	d1 80       	ldd	r13, Z+1	; 0x01
    52ce:	e2 80       	ldd	r14, Z+2	; 0x02
    52d0:	f3 80       	ldd	r15, Z+3	; 0x03
    52d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    52d4:	88 2f       	mov	r24, r24
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	9e 01       	movw	r18, r28
    52da:	21 5a       	subi	r18, 0xA1	; 161
    52dc:	3f 4f       	sbci	r19, 0xFF	; 255
    52de:	88 0f       	add	r24, r24
    52e0:	99 1f       	adc	r25, r25
    52e2:	88 0f       	add	r24, r24
    52e4:	99 1f       	adc	r25, r25
    52e6:	f9 01       	movw	r30, r18
    52e8:	e8 0f       	add	r30, r24
    52ea:	f9 1f       	adc	r31, r25
    52ec:	80 81       	ld	r24, Z
    52ee:	91 81       	ldd	r25, Z+1	; 0x01
    52f0:	a2 81       	ldd	r26, Z+2	; 0x02
    52f2:	b3 81       	ldd	r27, Z+3	; 0x03
    52f4:	bc 01       	movw	r22, r24
    52f6:	cd 01       	movw	r24, r26
    52f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	48 2f       	mov	r20, r24
    5302:	8f a5       	ldd	r24, Y+47	; 0x2f
    5304:	88 2f       	mov	r24, r24
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	01 96       	adiw	r24, 0x01	; 1
    530a:	9e 01       	movw	r18, r28
    530c:	21 5a       	subi	r18, 0xA1	; 161
    530e:	3f 4f       	sbci	r19, 0xFF	; 255
    5310:	88 0f       	add	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	88 0f       	add	r24, r24
    5316:	99 1f       	adc	r25, r25
    5318:	f9 01       	movw	r30, r18
    531a:	e8 0f       	add	r30, r24
    531c:	f9 1f       	adc	r31, r25
    531e:	00 81       	ld	r16, Z
    5320:	11 81       	ldd	r17, Z+1	; 0x01
    5322:	22 81       	ldd	r18, Z+2	; 0x02
    5324:	33 81       	ldd	r19, Z+3	; 0x03
    5326:	c7 01       	movw	r24, r14
    5328:	b6 01       	movw	r22, r12
    532a:	0e 94 28 1b 	call	0x3650	; 0x3650 <calculate>
    532e:	9b 01       	movw	r18, r22
    5330:	ac 01       	movw	r20, r24
    5332:	be 01       	movw	r22, r28
    5334:	61 5a       	subi	r22, 0xA1	; 161
    5336:	7f 4f       	sbci	r23, 0xFF	; 255
    5338:	c5 01       	movw	r24, r10
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	88 0f       	add	r24, r24
    5340:	99 1f       	adc	r25, r25
    5342:	fb 01       	movw	r30, r22
    5344:	e8 0f       	add	r30, r24
    5346:	f9 1f       	adc	r31, r25
    5348:	20 83       	st	Z, r18
    534a:	31 83       	std	Z+1, r19	; 0x01
    534c:	42 83       	std	Z+2, r20	; 0x02
    534e:	53 83       	std	Z+3, r21	; 0x03
							equationArray[i], equationArray[i + 1]);
					for (uint8 var = i; var <= indexCounter; ++var) {
    5350:	8f a5       	ldd	r24, Y+47	; 0x2f
    5352:	8d a7       	std	Y+45, r24	; 0x2d
    5354:	27 c0       	rjmp	.+78     	; 0x53a4 <main+0xd26>
						equationArray[var] = equationArray[var + 2];
    5356:	8d a5       	ldd	r24, Y+45	; 0x2d
    5358:	a8 2f       	mov	r26, r24
    535a:	b0 e0       	ldi	r27, 0x00	; 0
    535c:	8d a5       	ldd	r24, Y+45	; 0x2d
    535e:	88 2f       	mov	r24, r24
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	02 96       	adiw	r24, 0x02	; 2
    5364:	9e 01       	movw	r18, r28
    5366:	21 5a       	subi	r18, 0xA1	; 161
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	88 0f       	add	r24, r24
    536c:	99 1f       	adc	r25, r25
    536e:	88 0f       	add	r24, r24
    5370:	99 1f       	adc	r25, r25
    5372:	f9 01       	movw	r30, r18
    5374:	e8 0f       	add	r30, r24
    5376:	f9 1f       	adc	r31, r25
    5378:	20 81       	ld	r18, Z
    537a:	31 81       	ldd	r19, Z+1	; 0x01
    537c:	42 81       	ldd	r20, Z+2	; 0x02
    537e:	53 81       	ldd	r21, Z+3	; 0x03
    5380:	be 01       	movw	r22, r28
    5382:	61 5a       	subi	r22, 0xA1	; 161
    5384:	7f 4f       	sbci	r23, 0xFF	; 255
    5386:	cd 01       	movw	r24, r26
    5388:	88 0f       	add	r24, r24
    538a:	99 1f       	adc	r25, r25
    538c:	88 0f       	add	r24, r24
    538e:	99 1f       	adc	r25, r25
    5390:	fb 01       	movw	r30, r22
    5392:	e8 0f       	add	r30, r24
    5394:	f9 1f       	adc	r31, r25
    5396:	20 83       	st	Z, r18
    5398:	31 83       	std	Z+1, r19	; 0x01
    539a:	42 83       	std	Z+2, r20	; 0x02
    539c:	53 83       	std	Z+3, r21	; 0x03
				if (equationArray[i] != '*' && equationArray[i] != '/')
					continue;
				else {
					equationArray[i - 1] = calculate(equationArray[i - 1],
							equationArray[i], equationArray[i + 1]);
					for (uint8 var = i; var <= indexCounter; ++var) {
    539e:	8d a5       	ldd	r24, Y+45	; 0x2d
    53a0:	8f 5f       	subi	r24, 0xFF	; 255
    53a2:	8d a7       	std	Y+45, r24	; 0x2d
    53a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    53a6:	8e a9       	ldd	r24, Y+54	; 0x36
    53a8:	89 17       	cp	r24, r25
    53aa:	a8 f6       	brcc	.-86     	; 0x5356 <main+0xcd8>
						equationArray[var] = equationArray[var + 2];
					}
					indexCounter -= 2;
    53ac:	8e a9       	ldd	r24, Y+54	; 0x36
    53ae:	82 50       	subi	r24, 0x02	; 2
    53b0:	8e ab       	std	Y+54, r24	; 0x36
					i--;
    53b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    53b4:	81 50       	subi	r24, 0x01	; 1
    53b6:	8f a7       	std	Y+47, r24	; 0x2f
				validFlag = FALSE, syntaxErrorFlag = FALSE;
				numberOfConsequativeOperators = 0;
				opertorsErrorFlag = FALSE;
				break;
			}
			for (uint8 i = 0; i <= indexCounter; i++) {
    53b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    53ba:	8f 5f       	subi	r24, 0xFF	; 255
    53bc:	8f a7       	std	Y+47, r24	; 0x2f
    53be:	9f a5       	ldd	r25, Y+47	; 0x2f
    53c0:	8e a9       	ldd	r24, Y+54	; 0x36
    53c2:	89 17       	cp	r24, r25
    53c4:	08 f0       	brcs	.+2      	; 0x53c8 <main+0xd4a>
    53c6:	b4 ce       	rjmp	.-664    	; 0x5130 <main+0xab2>
					}
					indexCounter -= 2;
					i--;
				}
			}
			result = equationArray[0];
    53c8:	fe 01       	movw	r30, r28
    53ca:	e1 5a       	subi	r30, 0xA1	; 161
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	80 81       	ld	r24, Z
    53d0:	91 81       	ldd	r25, Z+1	; 0x01
    53d2:	a2 81       	ldd	r26, Z+2	; 0x02
    53d4:	b3 81       	ldd	r27, Z+3	; 0x03
    53d6:	8f ab       	std	Y+55, r24	; 0x37
    53d8:	98 af       	std	Y+56, r25	; 0x38
    53da:	a9 af       	std	Y+57, r26	; 0x39
    53dc:	ba af       	std	Y+58, r27	; 0x3a
			for (uint8 i = 1; i <= indexCounter; i += 2) {
    53de:	81 e0       	ldi	r24, 0x01	; 1
    53e0:	8c a7       	std	Y+44, r24	; 0x2c
    53e2:	3b c0       	rjmp	.+118    	; 0x545a <main+0xddc>
				result = calculate(result, equationArray[i],
    53e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    53e6:	88 2f       	mov	r24, r24
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	9e 01       	movw	r18, r28
    53ec:	21 5a       	subi	r18, 0xA1	; 161
    53ee:	3f 4f       	sbci	r19, 0xFF	; 255
    53f0:	88 0f       	add	r24, r24
    53f2:	99 1f       	adc	r25, r25
    53f4:	88 0f       	add	r24, r24
    53f6:	99 1f       	adc	r25, r25
    53f8:	f9 01       	movw	r30, r18
    53fa:	e8 0f       	add	r30, r24
    53fc:	f9 1f       	adc	r31, r25
    53fe:	80 81       	ld	r24, Z
    5400:	91 81       	ldd	r25, Z+1	; 0x01
    5402:	a2 81       	ldd	r26, Z+2	; 0x02
    5404:	b3 81       	ldd	r27, Z+3	; 0x03
    5406:	bc 01       	movw	r22, r24
    5408:	cd 01       	movw	r24, r26
    540a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	48 2f       	mov	r20, r24
    5414:	8c a5       	ldd	r24, Y+44	; 0x2c
    5416:	88 2f       	mov	r24, r24
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	01 96       	adiw	r24, 0x01	; 1
    541c:	9e 01       	movw	r18, r28
    541e:	21 5a       	subi	r18, 0xA1	; 161
    5420:	3f 4f       	sbci	r19, 0xFF	; 255
    5422:	88 0f       	add	r24, r24
    5424:	99 1f       	adc	r25, r25
    5426:	88 0f       	add	r24, r24
    5428:	99 1f       	adc	r25, r25
    542a:	f9 01       	movw	r30, r18
    542c:	e8 0f       	add	r30, r24
    542e:	f9 1f       	adc	r31, r25
    5430:	00 81       	ld	r16, Z
    5432:	11 81       	ldd	r17, Z+1	; 0x01
    5434:	22 81       	ldd	r18, Z+2	; 0x02
    5436:	33 81       	ldd	r19, Z+3	; 0x03
    5438:	8f a9       	ldd	r24, Y+55	; 0x37
    543a:	98 ad       	ldd	r25, Y+56	; 0x38
    543c:	a9 ad       	ldd	r26, Y+57	; 0x39
    543e:	ba ad       	ldd	r27, Y+58	; 0x3a
    5440:	bc 01       	movw	r22, r24
    5442:	cd 01       	movw	r24, r26
    5444:	0e 94 28 1b 	call	0x3650	; 0x3650 <calculate>
    5448:	dc 01       	movw	r26, r24
    544a:	cb 01       	movw	r24, r22
    544c:	8f ab       	std	Y+55, r24	; 0x37
    544e:	98 af       	std	Y+56, r25	; 0x38
    5450:	a9 af       	std	Y+57, r26	; 0x39
    5452:	ba af       	std	Y+58, r27	; 0x3a
					indexCounter -= 2;
					i--;
				}
			}
			result = equationArray[0];
			for (uint8 i = 1; i <= indexCounter; i += 2) {
    5454:	8c a5       	ldd	r24, Y+44	; 0x2c
    5456:	8e 5f       	subi	r24, 0xFE	; 254
    5458:	8c a7       	std	Y+44, r24	; 0x2c
    545a:	9c a5       	ldd	r25, Y+44	; 0x2c
    545c:	8e a9       	ldd	r24, Y+54	; 0x36
    545e:	89 17       	cp	r24, r25
    5460:	08 f6       	brcc	.-126    	; 0x53e4 <main+0xd66>
				result = calculate(result, equationArray[i],
						equationArray[i + 1]);
			}
			if (validFlag == 1) {
    5462:	8d a9       	ldd	r24, Y+53	; 0x35
    5464:	81 30       	cpi	r24, 0x01	; 1
    5466:	09 f0       	breq	.+2      	; 0x546a <main+0xdec>
    5468:	93 cb       	rjmp	.-2266   	; 0x4b90 <main+0x512>
				LCD_SetCursor(1, 0);
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	60 e0       	ldi	r22, 0x00	; 0
    546e:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_SetCursor>
				LCD_displayString("result: ");
    5472:	86 ea       	ldi	r24, 0xA6	; 166
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_displayString>
				LCD_PrintNumF(result);
    547a:	8f a9       	ldd	r24, Y+55	; 0x37
    547c:	98 ad       	ldd	r25, Y+56	; 0x38
    547e:	a9 ad       	ldd	r26, Y+57	; 0x39
    5480:	ba ad       	ldd	r27, Y+58	; 0x3a
    5482:	bc 01       	movw	r22, r24
    5484:	cd 01       	movw	r24, r26
    5486:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_PrintNumF>
				indexCounter = 0;
    548a:	1e aa       	std	Y+54, r1	; 0x36
				for (uint8 i = 0; i < 10; i++) {
    548c:	1b a6       	std	Y+43, r1	; 0x2b
    548e:	18 c0       	rjmp	.+48     	; 0x54c0 <main+0xe42>
					equationArray[i] = 0;
    5490:	8b a5       	ldd	r24, Y+43	; 0x2b
    5492:	88 2f       	mov	r24, r24
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	9e 01       	movw	r18, r28
    5498:	21 5a       	subi	r18, 0xA1	; 161
    549a:	3f 4f       	sbci	r19, 0xFF	; 255
    549c:	88 0f       	add	r24, r24
    549e:	99 1f       	adc	r25, r25
    54a0:	88 0f       	add	r24, r24
    54a2:	99 1f       	adc	r25, r25
    54a4:	f9 01       	movw	r30, r18
    54a6:	e8 0f       	add	r30, r24
    54a8:	f9 1f       	adc	r31, r25
    54aa:	80 e0       	ldi	r24, 0x00	; 0
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	a0 e0       	ldi	r26, 0x00	; 0
    54b0:	b0 e0       	ldi	r27, 0x00	; 0
    54b2:	80 83       	st	Z, r24
    54b4:	91 83       	std	Z+1, r25	; 0x01
    54b6:	a2 83       	std	Z+2, r26	; 0x02
    54b8:	b3 83       	std	Z+3, r27	; 0x03
			if (validFlag == 1) {
				LCD_SetCursor(1, 0);
				LCD_displayString("result: ");
				LCD_PrintNumF(result);
				indexCounter = 0;
				for (uint8 i = 0; i < 10; i++) {
    54ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    54bc:	8f 5f       	subi	r24, 0xFF	; 255
    54be:	8b a7       	std	Y+43, r24	; 0x2b
    54c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    54c2:	8a 30       	cpi	r24, 0x0A	; 10
    54c4:	28 f3       	brcs	.-54     	; 0x5490 <main+0xe12>
					equationArray[i] = 0;
				}
				equationArray[0] = result;
    54c6:	fe 01       	movw	r30, r28
    54c8:	e1 5a       	subi	r30, 0xA1	; 161
    54ca:	ff 4f       	sbci	r31, 0xFF	; 255
    54cc:	8f a9       	ldd	r24, Y+55	; 0x37
    54ce:	98 ad       	ldd	r25, Y+56	; 0x38
    54d0:	a9 ad       	ldd	r26, Y+57	; 0x39
    54d2:	ba ad       	ldd	r27, Y+58	; 0x3a
    54d4:	80 83       	st	Z, r24
    54d6:	91 83       	std	Z+1, r25	; 0x01
    54d8:	a2 83       	std	Z+2, r26	; 0x02
    54da:	b3 83       	std	Z+3, r27	; 0x03
				validFlag = TRUE, syntaxErrorFlag = FALSE, opertorsErrorFlag =
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	8d ab       	std	Y+53, r24	; 0x35
    54e0:	1c aa       	std	Y+52, r1	; 0x34
    54e2:	1a aa       	std	Y+50, r1	; 0x32
    54e4:	1b aa       	std	Y+51, r1	; 0x33
				FALSE, numberOfConsequativeOperators = 0;
				GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    54e6:	82 e0       	ldi	r24, 0x02	; 2
    54e8:	65 e0       	ldi	r22, 0x05	; 5
    54ea:	40 e0       	ldi	r20, 0x00	; 0
    54ec:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
				GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    54f0:	82 e0       	ldi	r24, 0x02	; 2
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	40 e0       	ldi	r20, 0x00	; 0
    54f6:	0e 94 d5 18 	call	0x31aa	; 0x31aa <GPIO_writePin>
    54fa:	4a cb       	rjmp	.-2412   	; 0x4b90 <main+0x512>

000054fc <__mulsi3>:
    54fc:	62 9f       	mul	r22, r18
    54fe:	d0 01       	movw	r26, r0
    5500:	73 9f       	mul	r23, r19
    5502:	f0 01       	movw	r30, r0
    5504:	82 9f       	mul	r24, r18
    5506:	e0 0d       	add	r30, r0
    5508:	f1 1d       	adc	r31, r1
    550a:	64 9f       	mul	r22, r20
    550c:	e0 0d       	add	r30, r0
    550e:	f1 1d       	adc	r31, r1
    5510:	92 9f       	mul	r25, r18
    5512:	f0 0d       	add	r31, r0
    5514:	83 9f       	mul	r24, r19
    5516:	f0 0d       	add	r31, r0
    5518:	74 9f       	mul	r23, r20
    551a:	f0 0d       	add	r31, r0
    551c:	65 9f       	mul	r22, r21
    551e:	f0 0d       	add	r31, r0
    5520:	99 27       	eor	r25, r25
    5522:	72 9f       	mul	r23, r18
    5524:	b0 0d       	add	r27, r0
    5526:	e1 1d       	adc	r30, r1
    5528:	f9 1f       	adc	r31, r25
    552a:	63 9f       	mul	r22, r19
    552c:	b0 0d       	add	r27, r0
    552e:	e1 1d       	adc	r30, r1
    5530:	f9 1f       	adc	r31, r25
    5532:	bd 01       	movw	r22, r26
    5534:	cf 01       	movw	r24, r30
    5536:	11 24       	eor	r1, r1
    5538:	08 95       	ret

0000553a <__udivmodhi4>:
    553a:	aa 1b       	sub	r26, r26
    553c:	bb 1b       	sub	r27, r27
    553e:	51 e1       	ldi	r21, 0x11	; 17
    5540:	07 c0       	rjmp	.+14     	; 0x5550 <__udivmodhi4_ep>

00005542 <__udivmodhi4_loop>:
    5542:	aa 1f       	adc	r26, r26
    5544:	bb 1f       	adc	r27, r27
    5546:	a6 17       	cp	r26, r22
    5548:	b7 07       	cpc	r27, r23
    554a:	10 f0       	brcs	.+4      	; 0x5550 <__udivmodhi4_ep>
    554c:	a6 1b       	sub	r26, r22
    554e:	b7 0b       	sbc	r27, r23

00005550 <__udivmodhi4_ep>:
    5550:	88 1f       	adc	r24, r24
    5552:	99 1f       	adc	r25, r25
    5554:	5a 95       	dec	r21
    5556:	a9 f7       	brne	.-22     	; 0x5542 <__udivmodhi4_loop>
    5558:	80 95       	com	r24
    555a:	90 95       	com	r25
    555c:	bc 01       	movw	r22, r24
    555e:	cd 01       	movw	r24, r26
    5560:	08 95       	ret

00005562 <__divmodsi4>:
    5562:	97 fb       	bst	r25, 7
    5564:	09 2e       	mov	r0, r25
    5566:	05 26       	eor	r0, r21
    5568:	0e d0       	rcall	.+28     	; 0x5586 <__divmodsi4_neg1>
    556a:	57 fd       	sbrc	r21, 7
    556c:	04 d0       	rcall	.+8      	; 0x5576 <__divmodsi4_neg2>
    556e:	14 d0       	rcall	.+40     	; 0x5598 <__udivmodsi4>
    5570:	0a d0       	rcall	.+20     	; 0x5586 <__divmodsi4_neg1>
    5572:	00 1c       	adc	r0, r0
    5574:	38 f4       	brcc	.+14     	; 0x5584 <__divmodsi4_exit>

00005576 <__divmodsi4_neg2>:
    5576:	50 95       	com	r21
    5578:	40 95       	com	r20
    557a:	30 95       	com	r19
    557c:	21 95       	neg	r18
    557e:	3f 4f       	sbci	r19, 0xFF	; 255
    5580:	4f 4f       	sbci	r20, 0xFF	; 255
    5582:	5f 4f       	sbci	r21, 0xFF	; 255

00005584 <__divmodsi4_exit>:
    5584:	08 95       	ret

00005586 <__divmodsi4_neg1>:
    5586:	f6 f7       	brtc	.-4      	; 0x5584 <__divmodsi4_exit>
    5588:	90 95       	com	r25
    558a:	80 95       	com	r24
    558c:	70 95       	com	r23
    558e:	61 95       	neg	r22
    5590:	7f 4f       	sbci	r23, 0xFF	; 255
    5592:	8f 4f       	sbci	r24, 0xFF	; 255
    5594:	9f 4f       	sbci	r25, 0xFF	; 255
    5596:	08 95       	ret

00005598 <__udivmodsi4>:
    5598:	a1 e2       	ldi	r26, 0x21	; 33
    559a:	1a 2e       	mov	r1, r26
    559c:	aa 1b       	sub	r26, r26
    559e:	bb 1b       	sub	r27, r27
    55a0:	fd 01       	movw	r30, r26
    55a2:	0d c0       	rjmp	.+26     	; 0x55be <__udivmodsi4_ep>

000055a4 <__udivmodsi4_loop>:
    55a4:	aa 1f       	adc	r26, r26
    55a6:	bb 1f       	adc	r27, r27
    55a8:	ee 1f       	adc	r30, r30
    55aa:	ff 1f       	adc	r31, r31
    55ac:	a2 17       	cp	r26, r18
    55ae:	b3 07       	cpc	r27, r19
    55b0:	e4 07       	cpc	r30, r20
    55b2:	f5 07       	cpc	r31, r21
    55b4:	20 f0       	brcs	.+8      	; 0x55be <__udivmodsi4_ep>
    55b6:	a2 1b       	sub	r26, r18
    55b8:	b3 0b       	sbc	r27, r19
    55ba:	e4 0b       	sbc	r30, r20
    55bc:	f5 0b       	sbc	r31, r21

000055be <__udivmodsi4_ep>:
    55be:	66 1f       	adc	r22, r22
    55c0:	77 1f       	adc	r23, r23
    55c2:	88 1f       	adc	r24, r24
    55c4:	99 1f       	adc	r25, r25
    55c6:	1a 94       	dec	r1
    55c8:	69 f7       	brne	.-38     	; 0x55a4 <__udivmodsi4_loop>
    55ca:	60 95       	com	r22
    55cc:	70 95       	com	r23
    55ce:	80 95       	com	r24
    55d0:	90 95       	com	r25
    55d2:	9b 01       	movw	r18, r22
    55d4:	ac 01       	movw	r20, r24
    55d6:	bd 01       	movw	r22, r26
    55d8:	cf 01       	movw	r24, r30
    55da:	08 95       	ret

000055dc <__prologue_saves__>:
    55dc:	2f 92       	push	r2
    55de:	3f 92       	push	r3
    55e0:	4f 92       	push	r4
    55e2:	5f 92       	push	r5
    55e4:	6f 92       	push	r6
    55e6:	7f 92       	push	r7
    55e8:	8f 92       	push	r8
    55ea:	9f 92       	push	r9
    55ec:	af 92       	push	r10
    55ee:	bf 92       	push	r11
    55f0:	cf 92       	push	r12
    55f2:	df 92       	push	r13
    55f4:	ef 92       	push	r14
    55f6:	ff 92       	push	r15
    55f8:	0f 93       	push	r16
    55fa:	1f 93       	push	r17
    55fc:	cf 93       	push	r28
    55fe:	df 93       	push	r29
    5600:	cd b7       	in	r28, 0x3d	; 61
    5602:	de b7       	in	r29, 0x3e	; 62
    5604:	ca 1b       	sub	r28, r26
    5606:	db 0b       	sbc	r29, r27
    5608:	0f b6       	in	r0, 0x3f	; 63
    560a:	f8 94       	cli
    560c:	de bf       	out	0x3e, r29	; 62
    560e:	0f be       	out	0x3f, r0	; 63
    5610:	cd bf       	out	0x3d, r28	; 61
    5612:	09 94       	ijmp

00005614 <__epilogue_restores__>:
    5614:	2a 88       	ldd	r2, Y+18	; 0x12
    5616:	39 88       	ldd	r3, Y+17	; 0x11
    5618:	48 88       	ldd	r4, Y+16	; 0x10
    561a:	5f 84       	ldd	r5, Y+15	; 0x0f
    561c:	6e 84       	ldd	r6, Y+14	; 0x0e
    561e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5620:	8c 84       	ldd	r8, Y+12	; 0x0c
    5622:	9b 84       	ldd	r9, Y+11	; 0x0b
    5624:	aa 84       	ldd	r10, Y+10	; 0x0a
    5626:	b9 84       	ldd	r11, Y+9	; 0x09
    5628:	c8 84       	ldd	r12, Y+8	; 0x08
    562a:	df 80       	ldd	r13, Y+7	; 0x07
    562c:	ee 80       	ldd	r14, Y+6	; 0x06
    562e:	fd 80       	ldd	r15, Y+5	; 0x05
    5630:	0c 81       	ldd	r16, Y+4	; 0x04
    5632:	1b 81       	ldd	r17, Y+3	; 0x03
    5634:	aa 81       	ldd	r26, Y+2	; 0x02
    5636:	b9 81       	ldd	r27, Y+1	; 0x01
    5638:	ce 0f       	add	r28, r30
    563a:	d1 1d       	adc	r29, r1
    563c:	0f b6       	in	r0, 0x3f	; 63
    563e:	f8 94       	cli
    5640:	de bf       	out	0x3e, r29	; 62
    5642:	0f be       	out	0x3f, r0	; 63
    5644:	cd bf       	out	0x3d, r28	; 61
    5646:	ed 01       	movw	r28, r26
    5648:	08 95       	ret

0000564a <_exit>:
    564a:	f8 94       	cli

0000564c <__stop_program>:
    564c:	ff cf       	rjmp	.-2      	; 0x564c <__stop_program>
